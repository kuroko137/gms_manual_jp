<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "10.2.16.6.0_1";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css" />
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <title>json_encode</title>
  <meta name="topic-status" content="Draft" />

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_encode</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_encode" />
  <meta name="rh-index-keywords" content="json_encode" />
  <meta name="search-keywords" content="json_encode" />
</head>

<body>
  <div class="topic-header rh-topicheader-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="json_encode">
        <span>json_encode</span>
      </div>
      <div class="gotohome" title="ページをすべて表示するにはここをクリック">
        <span>ページをすべて表示するにはここをクリック</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_encode</h1>
  <h3><strong>IMPORTANT!</strong> This function - while still valid - has been superceeded by the function <span class="inline"><a href="json_stringify.htm">json_stringify()</a></span>, and we recommend that you only use this function for legacy support.</h3>
  <p>JSON (JavaScript Object Notation) is a lightweight data-interchange format which is easy for to read and write, for both people and machines. It is built on two basic structures:</p>
  <ul class="colour">
    <li>A collection of name/value pairs, called a <a href="../../Data_Structures/DS_Maps/DS_Maps.htm"><tt>DS Map</tt></a> in GameMaker Studio 2 but also known as a "dictionary" or "object" in other programming languages.</li>
    <li>An ordered list of values, called a <a href="../../Data_Structures/DS_Lists/DS_Lists.htm"><tt>DS </tt><tt>List</tt></a> in GameMaker Studio 2 but this can also be called an "array" or "sequence" in other programming languages.</li>
  </ul>
  <p><tt>json_encode()</tt> takes a DS map or array that you have previously created and encodes it as a JSON string which you can then use as (for example) part of an <a href="../../Asynchronous_Functions/HTTP/http_post_string.htm"><tt>http_post_string()</tt></a> call, or - so it can be stored externally - it can be written to a file. If using an array as the top level structure, then the array can only contain valid values or other arrays, and <em>not</em> data structures. For that you should use the appropriate DS functions.</p>
  <p class="note"><strong>IMPORTANT!</strong> JSON is agnostic about numbers. In any programming language, there can be a variety of number types of various capacities and complements, fixed or floating, binary or decimal. That can make interchange between different programming languages difficult. JSON instead offers only the representation of numbers that humans use: a sequence of digits. All programming languages know how to make sense of digit sequences even if they disagree on internal representations. For more information see the <a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">ECMA JSON Standard</a>.</p>
  <p>Note that care should be taken when writing JSON to an ini file, as the ini specifications can cause issues when using quotes and escape characters. See the function <a href="../Ini_Files/ini_write_string.htm"><tt>ini_write_string()</tt></a> for more information. Also note that if you encode an int64 to JSON it will write it as an <i>int</i> if it is in the valid range for an int32, as a <i>double</i> if it can do so without losing precision or (if neither of those cases is applicable) as a <i>string</i> with an identifier "<tt>@i64@</tt>" before it and "<tt>$i64$</tt>" after it. When you come to decode the JSON to a map again GameMaker Studio 2 will pick these identifiers up and re-convert the value to an int64. This does mean that if the JSON is intended for a server or some other non-GameMaker target, these values will not be appropriate and so should be avoided.</p>
  <p class="note"><b>NOTE</b>: The hierarchical functionality of JSON is available through special DS map and DS list functions (for example <span class="inline"><a href="../../Data_Structures/DS_Maps/ds_map_add_list.htm" style="font-size: 14px">ds_map_add_list()</a></span> or <span class="inline"><a href="../../Data_Structures/DS_Lists/ds_list_mark_as_map.htm" style="font-size: 14px">ds_list_mark_as_map()</a></span>), so you are able to encode sub-lists and maps.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">json_encode(map)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>map</td>
        <td>a DS map with the information to encode (or an array)</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code">string</p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">var hiscore_map, i, str;<br /> hiscore_map = ds_map_create();<br /> for (i = 0; i &lt; 10; i ++;)<br />     { <br />     ds_map_add(hiscore_map, name[i], score[i]);<br />     } <br /> str = json_encode(hiscore_map);<br /> get[0] = http_post_string("http://www.angusgames.com/game?game_id=" + string(global.game_id), str)<br /> ds_map_destroy(hiscore_map);
  </p>
  <p>The above code creates a DS map and then loops through the name and score arrays, adding each key/value pair to the new map. Next, this map is encoded using <tt>json_encode()</tt> and stored as a string in the variable "str". This string is then sent to a web server using <tt>http_post_string()</tt> and the DS map is destroyed to prevent a memory leak as it is no-longer needed.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Encoding_And_Hashing.htm">File Encoding</a></div>
        <div style="float:right">Next: <a href="json_decode.htm">json_decode</a></div>
      </div>
    </div>
    <h5>© Copyright YoYo Games Ltd. 2020 All Rights Reserved</h5>
  </div>
  <!-- KEYWORDS
json_encode
-->
  <!-- TAGS
json_encode
-->

</body></html>