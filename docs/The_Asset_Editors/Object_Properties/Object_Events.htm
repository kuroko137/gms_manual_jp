<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "5.2.1";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css" />
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <title>オブジェクトイベント</title>
  <meta name="topic-status" content="Draft" />

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>オブジェクトイベント</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing the events system and the different events in an object" />
  <meta name="rh-index-keywords" content="Objects - Events" />
  <meta name="search-keywords" content="events,object events,events list" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
</head>

<body>
  <div class="topic-header rh-topicheader-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="オブジェクトイベント">
        <span>オブジェクトイベント</span>
      </div>
      <div class="gotohome" title="ページをすべて表示するにはここをクリック">
        <span>ページをすべて表示するにはここをクリック</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>オブジェクトイベント</h1>
  <p>オブジェクトの<strong>イベント</strong>とは具体的に何でしょうか？要約するとゲームのループ内において、プログラムした内容を実行するための個々のタイミングのことです。GameMaker Studio 2 はこうしたイベントの繰り返しを扱っています。ルームが開始・終了するまでの間にはゲームループが実行され、<strong>ステップ</strong>ごとに一連のイベントを実行およびチェックします。オブジェクトには、それらのイベントに応答するコードまたは DnD™ アクションを追加することができます（なお、ステップとはルームの速度によって決まる、ゲーム内での最小時間単位（瞬間）のことであり、<strong>フレーム</strong>とも呼びます）。</p>
  <p>オブジェクトのイベント、コードの典型的な設定例を見てみましょう。</p>
  <p><img alt="オブジェクトエディタのイベントビュー" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Events.png" style="width: 100%; max-width: 1203px;" />画像のオブジェクトにはいくつかのイベントが並んでいますが、実際にオブジェクトを作成すると、最初はイベントが何もありません。使いたいイベント、そしてイベントの作動時に取らせるオブジェクトの動作は自分で決めることになります。イベントを追加するには、リストの下側にある<em></em>「イベントを追加」ボタンをクリックしてください。以下のメニューが開きます。</p>
  <p><img alt="オブジェクトエディタのイベントリスト" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_EventList.png" style="width: 100%; max-width: 161px;" />このリストには、オブジェクトに応答させられる基本的なイベントの一覧とカテゴリが表示されており、イベントのカテゴリ内には動作を突き詰めるためのサブイベントが用意されています。たとえば <strong></strong><strong>Key Pressed</strong><img_tag=Key_Press_Icon:0> というイベントカテゴリをクリックすると奥にメニューが開き、オブジェクトを<em></em>任意のキーに応答させるイベント群が表示されます。イベントを決定すると、右側にコードウィンドウ（または DnD™ ワークスペースウィンドウ）が開きます。ここからコードを編集することで、そのイベントに対する動作ないし反応をオブジェクトに実装できます。</p>
  <p>オブジェクトに追加したイベントを右クリック<img_tag=RMB_Icon:0>した場合は、以下のメニュー項目が表示されます。</p>
  <p><img alt="オブジェクトエディタのイベントメニュー" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_RMBMenu.png" style="width: 100%; max-width: 292px;" />こちらは項目の一覧です。</p>
  <ul class="colour">
    <li><strong>イベントを追加</strong> - イベントリストから新しいイベントを追加します。</li>
    <li>イベントの<strong>切り取り</strong> / <strong>コピー</strong> / <strong>貼り付け</strong> - 選択したイベントを切り取り・コピー・貼り付けします。<img_tag=CTRL_Icon:0> / <img_tag=CMD_Icon:0> + <span class="inline">X</span> 、<img_tag=CTRL_Icon:0> / <img_tag=CMD_Icon:0> + <span class="inline">C</span> 、<img_tag=CTRL_Icon:0> / <img_tag=CMD_Icon:0> + <span class="inline">V</span> という標準のキーボードショートカットでも同じことが可能です。</li>
    <li><strong>イベントの複製</strong> - 現在のイベントを複製します。イベントの内容はそのまま引き継がれ、新しく指定したイベントにコピーされます。</li>
    <li><strong>イベントの変更</strong> - イベントを別のものに変更します。この項目を選ぶとイベントリストが表示され、指定した別のイベントに現在のイベントの内容が移されます（同時に現在のイベントは削除されます）</li>
    <li><strong>DnD™ / コードに変換</strong> - オブジェクトのイベントはプロジェクト作成時に選択した、コードまたは Drag and Drop™ アクションのいずれかの方式で作成されますが、この項目を選ぶとプロジェクトの形式を問わず、イベントをもう一方のものに変更できます。</li>
    <li><strong>イベントの削除</strong> - 選択されているイベントをすべて削除します。</li>
  </ul>
  <p>イベントを削除する際は、<img_tag=Shift_Icon:0>を押しながらクリック<img_tag=LMB_Icon:0>すると複数のイベントをまとめて削除できます。なお、<strong>オブジェクトエディタ</strong>から追加したイベントはいずれも各オブジェクト内でのみ使われます。また、イベントは 2 つのタイプに分別できます。</p>
  <ul class="colour">
    <li>1 ゲームステップごとに作動するもの</li>
    <li>インスタンスがルームの端まで移動、あるいはキーボードやマウスを押したときなど、ゲームイベントによって「作動」するもの</li>
  </ul>
  <p>以下はイベントの一覧となります。</p>
  <p> </p>
  <p><img alt="Create イベントのアイコン" src="../../assets/Images/Icons/Icon_Create.png" style="width: 100%; max-width: 16px;" /><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#"><span data-open-text="true">Create</span><span data-close-text="true">Create</span></a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot">オブジェクトのインスタンスが最初に生成されたときに起きるイベントです。ルームエディタによって配置されたシーケンス内で最初に起きるイベントであり、ルームに入ったタイミングで発生します。そのためこのイベントは、<a class="tooltip" title="A variable is a named value within a program which can be modified, stored and displayed whenever required. For example, if we have an integer variable with a name XYZ and it stores a value 10, we can then do things like A = XYZ + 10, which will set the value of the variable A to 20, since XYZ is 10 and we are adding 10 to it. You can also change variable values using operators, so doing XYZ = XYZ + 100 would modify the value of our XYZ variable to be equal to 110. Variables can also be used to store identifiers and references to different assets.">変数</a><span class="glossextra"></span>の初期化、<a href="../Timelines.htm">タイムライン</a>の開始、<a href="../Paths.htm">パス</a>の設定といった用途にもっとも適しています。あるいは一度だけ実行したいコードや、インスタンスがルームに生成された最初のタイミングで実行したいコードがある場合などにも活用できるでしょう。オブジェクトエディタから追加できる<strong>オブジェクト変数</strong>、またはルームエディタから追加できる<strong>インスタンス変数</strong>がオブジェクトにある場合、それらの変数は先に初期化され、その後で <strong>Create イベント</strong>が実行されます。</p>
    <p class="dropspot">Remember that you can modify anything you set up in the Create Event from the <a href="../Room_Properties/Layer_Properties.htm">Instance Creation Code</a> in the Room Editor, as this is run directly after the create event for the instance and can be used to create <strong>Instance Variables</strong> or to override any variables added as Object Variables or in the actual Create Event.</p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Destroy Event Icon" src="../../assets/Images/Icons/Icon_Destroy.png" style="width: 100%; max-width: 16px;" /><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#"><span data-open-text="true">Destroy</span><span data-close-text="true">Destroy</span></a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot">This event is the event to be executed when an instance is destroyed. It is often overlooked when adding behaviours to objects, but it can be very useful, for example by creating explosion or particle effects when an enemy is killed, or for re-spawning a new instance of the object in another part of the room, or even for adding points onto a score.</p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Clean Up Event Icon" src="../../assets/Images/Icons/Icon_Destroy.png" style="width: 100%; max-width: 16px;" /><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#"><span data-open-text="true">Clean Up</span><span data-close-text="true">Clean Up</span></a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p class="dropspot"><span>This event will be called after any event that removes an instance of the object from the room. So, it will be triggered if:</span></p>
    <ul class="dropspotlist">
      <li class="dropspot"><span>the instance is destroyed</span></li>
      <li class="dropspot"><span>the room ends</span></li>
      <li class="dropspot"><span>the game ends</span></li>
    </ul>
    <p class="dropspot"><span>It is designed for you to use to "clean up" any dynamic resources that you may have in your game (like surfaces, data structures, etc...) or to perform any task that you need performed <em>once </em>when the instance is removed from the game in any way.</span></p>
    <p class="dropspot"><span>Note that this event will be called <em>instantly </em>after the event that triggered it, but the instance will not actually be removed from the game <strong>until the end of the current event</strong>. For example, if you call <span class="inline">instance_destroy()</span> in the Step Event, then the Destroy Event will be called, then the Clean Up Event, and then <em>the rest of the Step Event will finish running</em>. This means that any code you have after the call to <span class="inline">instance_destroy()</span> will still be run and be a potential cause for errors if you've cleaned up a data structure or some other resource that the code requires, so care must be taken when using this event.</span>
    </p>
    <p> </p>
  </div>
  <p><img alt="Alarm Event Icon" src="../../assets/Images/Icons/Icon_Alarm.png" style="width: 100%; max-width: 16px;" /><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#"><span data-open-text="true">Alarm</span><span data-close-text="true">Alarm</span></a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="dropspot">The alarm category is split into 12 events, one for each of the possible alarms that can be set in an instance. So, when you click on the <em>Add Alarm </em>category you are presented with this window:</p>
    <p class="dropspot"><img alt="Object Editor Alarm Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_AlarmEvents.png" style="width: 100%; max-width: 230px;" />Here you select the alarm that you wish to create and, once that is done, you will see that it has been added to the event window allowing you to add code to it as normal. But what is an alarm? Well, it is a special event that does nothing unless the alarm has been previously set, and then it will wait until that alarm has counted down to 0 before running the actions or code that you have added into it.</p>
    <p class="dropspot">Once the alarm has reached 0 and run the code, it will then count down to -1, where it will remain until set again (meaning you can check the value of an alarm to see if it is greater than -1, which will tell you if it's running or not). So, say you set <span class="inline">alarm[0]</span> in the create event of the object to 30, this means that GameMaker Studio 2 will count down 30 game steps before it runs the actions or code that are placed in the <span class="inline">alarm[0]</span> event. Note that setting an alarm to 0 will <em>not </em>run the alarm code, as the event is triggered, but the alarm is set to -1 immediately, so the code is skipped. If you need an alarm to run the very next step, then you should set it to 1.</p>
    <p class="dropspot">This can be very useful as it allows you to set things in motion at precise moments, and you can even have them repeat as there is nothing to stop you setting an alarm in its own event. Imagine you have a monster and you want it to turn right every three seconds... well, you would set an alarm in its create event to the room speed * 3 (if the room speed is 30, that's 30 steps per second, so multiply that by 3 and you get 3 seconds!) and then in the alarm event you would have the code or action to set its direction, as well as the action (or code) to set its alarm to room speed * 3 again. In this way, you can set up simple game loops where things only happen at specific intervals.</p>
    <p class="dropspot">It is worth noting that an alarm with no actions or code in it in it will <em>not </em>count down. However, even with just a comment and no code or actions, then the alarm will continue to count down and can be set and checked as you would normally.</p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Step Event Icon" src="../../assets/Images/Icons/Icon_Step.png" style="width: 100%; max-width: 16px;" /><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#"><span data-open-text="true">Step</span><span data-close-text="true">Step</span></a></p>
  <div class="droptext" data-targetname="drop-down12">
    <p class="dropspot">GameMaker Studio 2 splits time into <strong>steps </strong>with the room speed defining how many of these steps there are supposed to be per second (a step can also be called a <strong>frame</strong>). A single step, is basically the loop that runs constantly with all the events being checked and triggered as necessary while the game runs, so as you can imagine, the <strong>Step Event </strong>is an event that is checked every single step of the game while the instance exists.</p>
    <p class="dropspot">The step event is actually comprised of three sub events that are outlined below:</p>
    <p class="dropspot"><img alt="Object Editor Step Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Step.png" style="width: 100%; max-width: 239px;" />For most things the standard step event will be fine to use, but sometimes you want a bit more control over what code runs and at what time, so for that you are provided with the <strong>Begin </strong>and <strong>End </strong>step events. All three are checked every step, but their order will never vary even if future updates to the GameMaker Studio 2 engine change other events, which means that this is the only reliable method of making sure that something always happens before something else.</p>
    <p class="dropspot">What can the step event be used for? Well, it can be used for actions or code that needs to be executed continuously. For example, if one object should follow another, here you can adapt the direction of motion towards the object we are following to keep it moving smoothly behind. Be careful with this event though, and don't put many complicated actions in the step event of objects, especially if you are planning on having lots of instances of the object in your game room, as this might slow the game down. Many things can be placed into alarms, or set to trigger using some of the <strong>Other </strong>events, rather than happening all the time.</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Collision Event Icon" src="../../assets/Images/Icons/Icon_Collision.png" style="width: 100%; max-width: 16px;" /><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#"><span data-open-text="true">Collision</span><span data-close-text="true">Collision</span></a></p>
  <div class="droptext" data-targetname="drop-down13">
    <p class="dropspot">Obviously when making a game, it is very important that you know when two (or more) instances of an object have collided, and for that we have the <strong>Collision Event</strong>. This is an event that you place in an object and then specify against which other object you should be checking for collisions.</p>
    <p class="dropspot">When you don't have physics turned on, these collisions will be calculated based on the mask of the two objects (the mask is defined within the sprite properties, or can be assigned independently in the object properties) and whether they overlap or not. Note, that if one or the other instances in the collision does not have a mask assigned (or the sprite mask is set to nothing), <em>even if it is drawing something</em> no collisions will be detected.</p>
    <p class="dropspot">If you have <strong>Physics </strong>on, then the collision will be based on the type of <strong>collision shape</strong> (<em>Fixture</em>) that you have defined for the object in its physics properties, as will its reaction to the collision. This means you may not need any code to deal with the collision, but this event will still <em>need to have at least a comment in it </em>for the collisions to be detected.</p>
    <p class="dropspot">Finally, it should be noted that all collisions will be calculated once per game step before the collision event is triggered, such that when the collision event runs, all collisions will have been calculated already and pre-assigned. This means that if you create an instance in this event and then try to check for a collision with it, the collision wont be detected or resolved until the next <a class="tooltip" title="An iteration is a single pass through a set of operations in your project code. One form of iteration in computer programming is via loops. A loop will repeat a certain segment of code until a condition is met and it can proceed further. Each time the computer runs a loop, it is known as an iteration. In simple terms, iteration is the process of repeating a particular snippet of code over and over again to perform a certain action.">iteration</a> of the game loop.</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Keyboard Icon" src="../../assets/Images/Icons/Icon_Keyboard.png" style="width: 100%; max-width: 16px;" /><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#"><span data-open-text="true">Keyboard,</span><span data-close-text="true">Keyboard,</span></a> <img alt="Keyboard Press Icon" src="../../assets/Images/Icons/Icon_KeyboardPress.png" style="width: 100%; max-width: 16px;" /><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#"><span data-open-text="true">Keyboard Press,</span><span data-close-text="true">Keyboard Press,</span></a> <img alt="Keyboard Release Icon" src="../../assets/Images/Icons/Icon_KeyboardRelease.png" style="cursor: nwse-resize; width: 100%; max-width: 15px;" /> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#"><span data-open-text="true">Keyboard Release</span><span data-close-text="true">Keyboard Release</span></a></p>
  <div class="droptext" data-targetname="drop-down14">
    <p class="dropspot">Letting the player control the different aspects of your game is very important, and to that end GameMaker Studio 2 provides you with a very comprehensive list of keyboard events that can be used in any of the three main keyboard categories. For the general Keyboard category, it is triggered continuously every step for as long as the selected key is pressed down, while the Press and Release category events will only be triggered once when the key is initially pressed down or released.</p>
    <p class="dropspot">It should be noted that keyboard events are actually triggered in all active instances in a room whenever a key is used, but only those that have an event defined for that particular key will respond and you can create multiple keyboard events in any object and the instances of that object will respond to all of them while the game is running.</p>
    <p class="dropspot">When you add any keyboard event to an object, you will be presented with the keyboard sub event menu where you can specify the key you are to be checking for:</p>
    <p class="dropspot"><img alt="Object Editor Keyboard Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Keyboard.png" style="width: 100%; max-width: 600px;" />Most of them are fairly obvious, but let's just go through the sections briefly - at the top we have the arrow keys, followed by the most used modifier keys, then the rest of the keyboard (split into further sub-sections so you can get the exact key required like <img alt="Escape Icon" class="icon" src="../../assets/Images/Icons/Icon_Escape.png" style="width: 100%; max-width: 55px;" /> or <img alt="Insert Icon" class="icon" src="../../assets/Images/Icons/Icon_Insert.png" style="width: 100%; max-width: 55px;" />) and finally two very special sub events, <strong>No Key</strong> and <strong>Any Key</strong>. As their names imply, these are sub events that check for when <em>no </em>key is pressed or for when <em>any </em>key is pressed. Please note that the keys on the numeric keypad only produce the corresponding events when <strong>Number Lock </strong>is enabled.</p>
    <p class="dropspot">The <strong>Press </strong>and <strong>Release </strong>events for the keyboard are almost exactly the same as the regular keyboard event, except that instead of being triggered continuously, they are triggered once only. When the keyboard first registers that a key has been pressed it will generate a <strong>Keyboard Pressed</strong> event (as well as a regular Keyboard event), and the first time after that where a key is no longer being detected as pressed it will trigger a single <strong>Keyboard Release</strong> event.</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt=" Mouse Icon" src="../../assets/Images/Icons/Icon_MouseEvent.png" style="width: 100%; max-width: 16px;" /><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down16" href="#"><span data-open-text="true">Mouse</span><span data-close-text="true">Mouse</span></a></p>
  <div class="droptext" data-targetname="drop-down16">
    <p class="dropspot">The Mouse category is separated into a series of events that can be selected to give you a more precise control over what is happening in your game. Here you can see exactly what these events are:</p>
    <p class="dropspot"><img alt="Object Editor Mouse Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Mouse.png" style="width: 100%; max-width: 439px;" />The left <img alt="LMB Icon" class="icon" src="../../assets/Images/Icons/Icon_LMB.png" style="width: 100%; max-width: 21px;" />, right <img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" style="width: 100%; max-width: 21px;" /> and middle <img alt="MMB Icon" class="icon" src="../../assets/Images/Icons/Icon_MMB.png" style="width: 100%; max-width: 21px;" /> button events (whether <strong>normal</strong>, <strong>pressed </strong>or <strong>released</strong>) all work on the mask of the instance that has the event. What this means is that GameMaker Studio 2 will check the position of the mouse in the room when those buttons are used against the collision masks of the instances that have a mouse event. If there is a "collision" with the instance <a class="tooltip" title="For sprites, the bounding-box is the name given to the edges of the area that collisions will initially be detected in, and it doesn't have to be the same size as the sprite it's being applied to. For sequences, the bounding box is the outer edge of the total space that one or more assets occupy in the canvas.">bounding box</a> then the event will be triggered, so make sure that any instance with these events has a sprite with a valid collision mask or that the object has a mask sprite selected in the object properties. As their names imply, these events will be triggered either once when the chosen mouse button is first pressed or released, or continuously each step while the button is maintained.
    </p>
    <p class="dropspot">The mouse enter and leave events are also similar to the button events in that they too rely on the mask of the instance to work, but this time they are triggered when the mouse first "enters" (touches) the instance or when the mouse "leaves" (stops touching) the instance. These events are not continuous however, and are triggered only once for each time the mouse enters or leaves the object - so they are an ideal method for creating, for example, buttons that need to change as the mouse hovers over them before going back to normal when the mouse is removed.</p>
    <p class="dropspot">Finally we have another section to the mouse events which is called the <strong>Global Mouse</strong>. In this sub-menu you will find a selection of events that are for recording mouse events in instances even when the mouse is not over them or even near them. These are events that are generated for <em>all </em>instances and if there are actions or code defined for the specified event then it will be run, regardless of the position of the mouse within the game room.</p>
    <p class="dropspot">Please note that on mobile or touch-screen devices the left mouse button <img alt="LMB Icon" class="icon" src="../../assets/Images/Icons/Icon_LMB.png" style="width: 100%; max-width: 21px;" /> can also be used to check for a finger tab on a touch screen, and the right mouse button <img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" style="width: 100%; max-width: 21px;" /> is triggered by a double tap on the screen (this behaviour can be changed using code).</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Gestures Icon" src="../../assets/Images/Icons/Icon_Gesture.png" style="width: 100%; max-width: 16px;" /><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down18" href="#"><span data-open-text="true">Gestures</span><span data-close-text="true">Gestures</span></a></p>
  <div class="droptext" data-targetname="drop-down18">
    <p class="dropspot">This event is the one that will be triggered by the user touching the screen (on mobile) or clicking and moving the mouse (on all other platforms). These events are similar to the mouse events, in that you have regular versions and <em>global</em> versions. The regular versions of these events will only be triggered when the touches occur on an instance that has a sprite (or a mask) and the touches occur within its <a class="tooltip" title="For sprites, the bounding-box is the name given to the edges of the area that collisions will initially be detected in, and it doesn't have to be the same size as the sprite it's being applied to. For sequences, the bounding box is the outer edge of the total space that one or more assets occupy in the canvas.">bounding box</a>. The global versions of these events, however, will be triggered by the user touching <em>anywhere </em>on the screen.</p>
    <p class="dropspot">The gesture events detect the following:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><img alt="Tap Icon" class="icon" src="../../assets/Images/Icons/Icon_Tap.png" style="width: 100%; max-width: 20px;" /> <strong>taps </strong>- when a user clicks/touches and releases quickly</li>
      <li class="dropspot"><img alt="Drag Icon" class="icon" src="../../assets/Images/Icons/Icon_Drag.png" style="width: 100%; max-width: 20px;" /> <strong>drags </strong>- when a user touches/clicks and maintains it then moves their finger/cursor</li>
      <li class="dropspot"><img alt="Flick Icon" class="icon" src="../../assets/Images/Icons/Icon_Flick.png" style="width: 100%; max-width: 20px;" /> <strong>flicks </strong>- when the user moves and releases a touch/click in one movement</li>
      <li class="dropspot"><img alt="Pinch Icon" class="icon" src="../../assets/Images/Icons/Icon_Pinch.png" style="width: 100%; max-width: 20px;" /> <strong>pinches </strong>- when the user has two fingers on the screen and then moves them together/apart</li>
      <li class="dropspot"><img alt="Rotate Icon" class="icon" src="../../assets/Images/Icons/Icon_Rotate.png" style="width: 100%; max-width: 20px;" /> <strong>rotates </strong>- when the user has two fingers on the screen and then rotates them around a point</li>
    </ul>
    <p class="dropspot"><img alt="Object Editor Gesture Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Gesture.png" style="width: 100%; max-width: 368px;" />The different events will always contain a DS Map called the "<span class="inline">event_data</span>" map, which will contain a number of key/value pairs with data on the touch/click position and movement. For full details on all the available sub-events and how they work, please see the following section:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="Gesture_Events.htm">The Gesture Event</a></li>
    </ul>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Other Icon" src="../../assets/Images/Icons/Icon_Other.png" style="width: 100%; max-width: 16px;" /><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down19" href="#"><span data-open-text="true">Other</span><span data-close-text="true">Other</span></a></p>
  <div class="droptext" data-targetname="drop-down19">
    <p class="dropspot">There are a number of special events for use when making games with GameMaker Studio 2 and they are mostly grouped together under the Other event and can be selected from the pop up menu of sub events that comes up when you select this. Here is an image of all these other events:</p>
    <p class="dropspot"><img alt="Object Editor Other Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_OtherEvents.png" style="width: 100%; max-width: 612px;" />For more information on each of the events listed in the image above, please see the following section:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="Other_Events.htm">The Other Events</a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Draw Event" src="../../assets/Images/Icons/Icon_Draw.png" style="width: 100%; max-width: 16px;" /><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down20" href="#"><span data-open-text="true">Draw</span><span data-close-text="true">Draw</span></a></p>
  <div class="droptext" data-targetname="drop-down20">
    <p class="dropspot">This event category is the one that governs what you see on the screen when you run your game, and is split into various discreet events:</p>
    <p class="dropspot"><img alt="Draw Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Draw.png" style="width: 100%; max-width: 268px;" />As you can see, the draw event category has multiple different event types. <strong>Draw Begin</strong>, <strong>Draw </strong>and <strong>Draw End</strong> are the "standard" draw events which you will probably use most. By default the main Draw event is always called for every instance, regardless of whether it has a sprite or not, although if you flag the instance as invisible, the event will not be triggered (so keep this in mind if you have any game logic in the draw event of an invisible object, as it won't run). The main draw event is also where GameMaker Studio 2 default draws the instance sprite when there is no code nor actions in the event (ie: you haven't added it into the event list for the object). Default drawing uses the sprite associated with the instance and will draw that with any transforms set in code or actions applied.</p>
    <p class="dropspot">The standard draw events draw <em>before </em>the <strong>Draw GUI </strong>events and <em>between </em>the <strong>Pre Draw </strong>and <strong>Post Draw </strong>events, meaning that everything that is drawn in this event is drawn beneath that of the <strong>Draw GUI </strong>event, regardless of the layer (ie: anything drawn in the Draw GUI event will always be drawn over anything drawn in the normal draw event, regardless of layer order).</p>
    <p class="dropspot">Note that the above is simply an overview of how the Draw Events work, but for full details on all the available sub-events, please see the following section:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="Draw_Events.htm">The Draw Event</a></li>
    </ul>
    <p> </p>
    <p> </p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Async Event" src="../../assets/Images/Icons/Icon_Async.png" style="width: 100%; max-width: 16px;" /><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down21" href="#"><span data-open-text="true">Asynchronous</span><span data-close-text="true">Asynchronous</span></a></p>
  <div class="droptext" data-targetname="drop-down21">
    <p class="dropspot">This event category is special in that the events it contains are not triggered by default by GameMaker Studio 2, but rather by the end of some other action, like the loading of a file, or the reply from a web server. The category is split into the following events:</p>
    <p class="dropspot"><img alt="Object Editor Asynchronous Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Async.png" style="width: 100%; max-width: 316px;" /></p>
    <p class="dropspot">So, say you want to add an image file to GameMaker Studio 2. Well, you would code this in another event (maybe the Create Event) of an object and then have that object draw a loading bar while waiting (for example), polling the appropriate asynchronous event until the <a class="tooltip" title="A callback is simply a function that runs and then triggers another function (or code block) when it has finished doing whatever it was assigned to do. For example, the funtion sprite_add() will trigger a callback in the asynchronous Image Loaded event when the sprite has been loaded.">callback</a> that tells GameMaker Studio 2 the file has loaded. You can then use the data returned in this event to do other things, like change room, or purchase an item.</p>
    <p class="dropspot">Note that the above is simply an overview of how the Asynchronous Event works, but for full details on all the available sub-events, please see the following section:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="Async_Events.htm">Asynchronous Events List</a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>You should also note that you can name events, or at least give them a short descriptive text that will be shown beside them in the Event Editor. To do this, simply add the following into the very first line of the code editor for the event:</p>
  <p class="code">/// @description Your text here</p>
  <p>So, you could have something like this in - for example - an <strong>Alarm </strong>event</p>
  <p class="code">/// @description This is the AI Fight alarm</p>
  <p>And now in your Event Editor you'll see this:</p>
  <p><img alt="Object Editor Named Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_NamedEvents.png" style="width: 100%; max-width: 310px;" /></p>
  <p>For DnD™ users, adding a comment requires the use of the <strong>Execute Code</strong> action, which should be placed at the very top of the actions for the event, before everything else. When you add this action, you then give it the same line of code that is shown above to name the event, eg:</p>
  <p><img alt="Naming An Event In DnD" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_DnD_NamedEvents.png" style="width: 100%; max-width: 452px;" />For additional information on some of the above events and general event running order, please see the following sections:</p>
  <ul class="colour">
    <li><a href="Event_Order.htm">Event Order</a></li>
    <li><a href="Other_Events.htm">The Other Events</a></li>
    <li><a href="Draw_Events.htm">The Draw Events</a></li>
    <li><a href="Async_Events.htm">The Async Events</a></li>
    <li><a href="Gesture_Events.htm">The Gesture Events</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Objects.htm">The Object Editor</a></div>
        <div style="float:right">Next: Parent Objects</div>
      </div>
    </div>
    <h5>© Copyright YoYo Games Ltd. 2020 All Rights Reserved</h5>
  </div>
  <!-- KEYWORDS
Object Events
Named Events
-->
  <!-- TAGS
object_events
-->

</body></html>