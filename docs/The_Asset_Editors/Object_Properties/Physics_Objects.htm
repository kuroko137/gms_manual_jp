<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "5.2.1_2";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css" />
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <title>物理オブジェクト</title>
  <meta name="topic-status" content="Draft" />

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>物理オブジェクト</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing object physics" />
  <meta name="rh-index-keywords" content="Objects - Physics" />
  <meta name="search-keywords" content="Object Physics,Physics,fixtures,binding,physics shape editor,shape editor,physics properties" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
</head>

<body>
  <div class="topic-header rh-topicheader-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="物理オブジェクト">
        <span>物理オブジェクト</span>
      </div>
      <div class="gotohome" title="ページをすべて表示するにはここをクリック">
        <span>ページをすべて表示するにはここをクリック</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>物理オブジェクト</h1>
  <p>オブジェクトリソースを新しく作成すると、デフォルトでは<strong>物理を使用</strong>のチェックが外されています<em></em>。このオプションを選ぶと、ルームに配置されたインスタンスの挙動が根本的に変化します。その理由はオブジェクトの物理特性が有効となり、「従来」の移動、衝突機能がすべて無効となるためです（ただし物理ルームとしてチェックされているルームに配置した場合のみです。詳しくは<a href="../Room_Properties/Room_Properties.htm">ルームエディタのプロパティ</a>を参照してください）。チェックを入れると、オブジェクトリソースのウィンドウの隣にこのような物理エディタのウィンドウが開きます。</p>
  <p><img alt="オブジェクトエディタの物理" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Physics.png" style="width: 100%; max-width: 310px;" />物理挙動の数値を編集する前に、まずは<strong>コリジョン形状</strong>を設定するといいでしょう。「通常」のコリジョンシステムでは、オブジェクトに割り当てたスプライトのマスクからコリジョンが決まりますが、物理を有効にしている場合は<strong>そうではありません</strong>。オブジェクト側で<strong>コリジョン形状</strong>を割り当てる必要があり（正確には<strong>フィクスチャ</strong>といい、<a href="../../GameMaker_Language/GML_Reference/Physics/Physics.htm">物理の機能</a>で詳しく説明されています）、円形、長方形、多角形のうちから自分で形状を決めなくてはなりません。<strong>コリジョン形状を変更</strong>ボタンをクリックすると、エディタの隣に形状を編集するためのウィンドウが開きます。</p>
  <p><img alt="オブジェクトエディタの物理形状エディタ" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_PhysicsShape.png" style="width: 100%; max-width: 740px;" /><a href="../Paths.htm">パスエディタ</a>とよく似た見た目で、機能もほとんど同じです。ただし選んだマスクによっては、より大きな制限がかかります。</p>
  <ul class="colour">
    <li><strong>円形</strong>マスクにした場合は、パスのポイントを動かして円の直径を小さくしたり、大きくすることだけ可能となります。</li>
    <li><strong>長方形</strong>マスクにした場合は、四方向の角を動かすことができますが、それぞれの角は長方形を崩さないよう自動的に位置が調整されます。</li>
    <li><strong>カスタム</strong>（多角形）マスクにした場合は、3 から 8 までの数のポイントが使用でき、凸型を保たなくてはなりません（以下の画像を参照）。</li>
  </ul>
  <p><img alt="オブジェクトエディタの形状タイプ" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_PhysicsShape.png" style="width: 100%; max-width: 702px;" />形状を設定できたら、オブジェクトがもつ基本的な物理特性を決めなくてはなりません。以下のパラメーターを変更することで設定します。</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true">密度</span><span data-close-text="true">密度</span></a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">密度とは単位体積あたりの質量を定めるもので、物理世界の占有空間にどれだけの質量が詰まっているかを表しています。たとえば風船なら、小さい質量で広い面積を占めているため密度は低くなるでしょう。一方で鉄の棒なら、質量は大きいものの占める面積は狭いため、密度は高くなるはずです。GameMaker Studio 2 の 2D 物理世界では、密度として入力した値、およびフィクスチャに設定した形状の表面積をもとに質量が自動計算されます。密度はフィクスチャの慣性の大きさ、ならびに衝突や力にどう反応するかに直接影響します。たとえば小さい形状の密度を大きくすると、その質量は非常に大きくなりますが（鉄の棒のように）、大きい形状の密度を低くすると、質量は非常に小さくなります（風船のように）。</p>
    <p class="dropspot">なお、密度を 0 に設定した場合、実質的な密度は無限大となり、外からの力や衝突に影響されることがない「静的」なフィクスチャが生成されます。ただしインスタンスが<strong>キネマティック</strong>として生成された場合は影響を受けます（詳しくは下記を参照）。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true">反発</span><span data-close-text="true">反発</span></a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">物理学における反発とは「弾性変形した物体および系が元の状態に戻ること」として定義されていますが、GameMaker Studio 2 におけるフィクスチャは実際には剛体であり変形しないため、ここでの反発はフィクスチャの「弾み」の勢いをあらわす言葉となっています。反発の設定はオブジェクトが他のオブジェクトと衝突したときにどれだけ弾むかに影響し、重力や摩擦といったインスタンスに作用する他の力とも共存します。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true">コリジョングループ</span><span data-close-text="true">コリジョングループ</span></a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">By default, the collision group for all physics objects is 0, and this means that they will interact as normal, which in turn means they <strong>must have a collision event to interact</strong> (a simple comment will do to trigger the collision) otherwise no collision will be registered. However, you can also specify that an object should belong to a specific, numbered, <strong>collision group</strong>. By assigning objects to a <em>positive </em>collision group (ie: three objects are all in group " <strong>2</strong>") you are telling GameMaker Studio 2 that instances of these objects should <em>always </em>collide, even if they have nothing in their collision event, obeying the physical properties that you have assigned them and the room they are in. Conversely, if you have objects with a <em>negative </em>collision group (ie: four objects assigned "<strong>-1</strong>"), you are telling GameMaker Studio 2 that these should <em>never </em>collide, and any collision events between them will be ignored.</p>
    <p class="note"><strong>NOTE</strong>: Using collision groups dramatically increases the processing required by the physics system and should be used only when absolutely necessary, and you should have as few groups as possible.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span data-open-text="true">Linear Damping</span><span data-close-text="true">Linear Damping</span></a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">Damping is used to reduce the physics world velocity of an instance as it moves through the room. In principle this is like friction against a surface in the "real" world, but in the GameMaker Studio 2 physics system, friction is actually only applied when two instances with collision shapes (fixtures) are in contact. So, you can consider linear damping as more like "air friction" that gradually slows any moving physics instance over time, without the need for contact with any other physics instance.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#"><span data-open-text="true">Angular Damping</span><span data-close-text="true">Angular Damping</span></a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">If you think about any rotating object in the "real world", unless it has a motor or is in space, its rotation will slow down over time due to the influence of external forces (like mechanical friction or friction against the air or water surrounding it). We can use the angular damping option to simulate this effect and reduce the velocity of rotation of instances in the physics world, as without it, any rotating instance would continue to rotate infinitely.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#"><span data-open-text="true">Friction</span><span data-close-text="true">Friction</span></a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot">Friction is the force that resists the relative motion of material elements sliding against each other, which in the GameMaker Studio 2 physics world, translates as the loss of momentum caused by the collision of two instances with physics fixtures. So, when two instances collide, their motion is affected by this value, with a high friction causing a larger loss of momentum than a lower value.</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>Finally there are three extra options that can flagged as on or off for your fixture, <strong>Sensor</strong>, <strong>Start Awake</strong> and <strong>Kinematic</strong>. Each of these flags will change the behaviour of your fixture in the following ways:</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#"><span data-open-text="true">Sensor</span><span data-close-text="true">Sensor</span></a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot">By checking this box, you are telling GameMaker Studio 2 to basically "ignore" the physical properties of the object, but still return a collision event with the objects around it. In this way you can have an instance with no physical presence in the room, but which can react to the collision of another instance, like the player, and do something in turn, like open a door, or trigger some sort of action in another place in the room.</p>
    <p class="note"><strong>NOTE</strong>: A sensor fixture will fire off the collision event when the collision <strong>first occurs only</strong>, meaning you don't get a stream of collision events as the two bodies continue to overlap (which is what would traditionally occur). If they stop overlapping and overlap subsequently there will be another collision event triggered.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#"><span data-open-text="true">Start Awake</span><span data-close-text="true">Start Awake</span></a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">This is checked by default and represents the initial "state" of the fixture at the start of the room it has been placed in. Normally you want it to be awake (ie: participating in the physics world) right from the start, but sometimes this can lead to certain instabilities and unwanted effects due to the abrupt start of the physics simulation. To avoid these effects, you can un-check this flag and the instance will be created with the fixture asleep, and it will not participate in the physics simulation unless something acts upon it.</p>
    <p class="dropspot">Note that physics instances will be flagged as "asleep" when they are no longer under any movement or having interaction with any other physics instance, and an "asleep" instance is simply one that is not currently being fully processed by the physics simulation (which saves on <a class="tooltip" title="CPUオーバーヘッドは、コンピューターの中央処理装置（CPU）が実行できる処理量、および個々の演算タスクによって占有される最大使用率の割合をあらわす尺度です。">CPU overhead</a>).</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#"><span data-open-text="true">Kinematic</span><span data-close-text="true">Kinematic</span></a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot">There will be certain instances in a physics based game which you want to move around but do not wish to be acted on by forces such as gravity, nor forces incurred by collisions with dynamic objects (think of moving platforms in a platform game, for example). For such objects simply setting the density of the fixture to 0 will mean that the physics will assume that the object is intended to be <strong>static </strong>and it will not react at all to anything. However, checking this box will make a static object <strong>kinematic </strong>and although it will still be unaffected by collisions and forces like gravity, it can now be moved around or rotated using the appropriate variables (see <a href="../../GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_position_x.htm"><span class="inline">phy_position_x</span></a> and <a href="../../GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_position_y.htm"><span class="inline">phy_position_y</span></a>, for example).</p>
    <p> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Objects.htm">The Object Editor</a></div>
        <div style="float:right">Next: <a href="Object_Variables.htm">Object Variables</a></div>
      </div>
    </div>
    <h5>© Copyright YoYo Games Ltd. 2020 All Rights Reserved</h5>
  </div>
  <!-- KEYWORDS
Physics Objects
-->
  <!-- TAGS
objects_physics
-->

</body></html>