<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "5.2.1_2";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css" />
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <title>物理オブジェクト</title>
  <meta name="topic-status" content="Draft" />

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>物理オブジェクト</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing object physics" />
  <meta name="rh-index-keywords" content="Objects - Physics" />
  <meta name="search-keywords" content="Object Physics,Physics,fixtures,binding,physics shape editor,shape editor,physics properties" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
</head>

<body>
  <div class="topic-header rh-topicheader-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="物理オブジェクト">
        <span>物理オブジェクト</span>
      </div>
      <div class="gotohome" title="ページをすべて表示するにはここをクリック">
        <span>ページをすべて表示するにはここをクリック</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>物理オブジェクト</h1>
  <p>オブジェクトリソースを新しく作成すると、デフォルトでは<strong>物理を使用</strong>のチェックが外されています<em></em>。このオプションを選ぶと、ルームに配置されたインスタンスの挙動が根本的に変化します。その理由はオブジェクトの物理特性が有効となり、「従来」の移動、衝突機能がすべて無効となるためです（ただし物理ルームとしてチェックされているルームに配置した場合のみです。詳しくは<a href="../Room_Properties/Room_Properties.htm">ルームエディタのプロパティ</a>を参照してください）。チェックを入れると、オブジェクトリソースのウィンドウの隣にこのような物理エディタのウィンドウが開きます。</p>
  <p><img alt="オブジェクトエディタの物理" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Physics.png" style="width: 100%; max-width: 310px;" />物理挙動の数値を編集する前に、まずは<strong>コリジョン形状</strong>を設定するといいでしょう。「通常」のコリジョンシステムでは、オブジェクトに割り当てたスプライトのマスクからコリジョンが決まりますが、物理を有効にしている場合は<strong>そうではありません</strong>。オブジェクト側で<strong>コリジョン形状</strong>を割り当てる必要があり（正確には<strong>フィクスチャ</strong>といい、<a href="../../GameMaker_Language/GML_Reference/Physics/Physics.htm">物理の機能</a>で詳しく説明されています）、円形、長方形、多角形のうちから自分で形状を決めなくてはなりません。<strong>コリジョン形状を変更</strong>ボタンをクリックすると、エディタの隣に形状を編集するためのウィンドウが開きます。</p>
  <p><img alt="オブジェクトエディタの物理形状エディタ" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_PhysicsShape.png" style="width: 100%; max-width: 740px;" /><a href="../Paths.htm">パスエディタ</a>とよく似た見た目で、機能もほとんど同じです。ただし選んだマスクによっては、より大きな制限がかかります。</p>
  <ul class="colour">
    <li><strong>円形</strong>マスクにした場合は、パスのポイントを動かして円の直径を小さくしたり、大きくすることだけ可能となります。</li>
    <li><strong>長方形</strong>マスクにした場合は、四方向の角を動かすことができますが、それぞれの角は長方形を崩さないよう自動的に位置が調整されます。</li>
    <li><strong>カスタム</strong>（多角形）マスクにした場合は、3 から 8 までの数のポイントが使用でき、凸型を保たなくてはなりません（以下の画像を参照）。</li>
  </ul>
  <p><img alt="オブジェクトエディタの形状タイプ" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_PhysicsShape.png" style="width: 100%; max-width: 702px;" />形状を設定できたら、オブジェクトがもつ基本的な物理特性を決めなくてはなりません。以下のパラメーターを変更することで設定します。</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true">密度</span><span data-close-text="true">密度</span></a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">密度とは単位体積あたりの質量を定めるもので、物理世界の占有空間にどれだけの質量が詰まっているかを表しています。たとえば風船なら、小さい質量で広い面積を占めているため密度は低くなるでしょう。一方で鉄の棒なら、質量は大きいものの占める面積は狭いため、密度は高くなるはずです。GameMaker Studio 2 の 2D 物理世界では、密度として入力した値、およびフィクスチャに設定した形状の表面積をもとに質量が自動計算されます。密度はフィクスチャの慣性の大きさ、ならびに衝突や力にどう反応するかに直接影響します。たとえば小さい形状の密度を大きくすると、その質量は非常に大きくなりますが（鉄の棒のように）、大きい形状の密度を低くすると、質量は非常に小さくなります（風船のように）。</p>
    <p class="dropspot">なお、密度を 0 に設定した場合、実質的な密度は無限大となり、外からの力や衝突に影響されることがない「静的」なフィクスチャが生成されます。ただしインスタンスが<strong>キネマティック</strong>として生成された場合は影響を受けます（詳しくは下記を参照）。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true">反発</span><span data-close-text="true">反発</span></a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">物理学における反発とは「弾性変形した物体および系が元の状態に戻ること」として定義されていますが、GameMaker Studio 2 におけるフィクスチャは実際には剛体であり変形しないため、ここでの反発はフィクスチャの「弾み」の勢いをあらわす言葉となっています。反発の設定はオブジェクトが他のオブジェクトと衝突したときにどれだけ弾むかに影響し、重力や摩擦といったインスタンスに作用する他の力とも共存します。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true">コリジョングループ</span><span data-close-text="true">コリジョングループ</span></a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">デフォルトでは、すべての物理オブジェクトのコリジョングループは 0 に設定されています。そのためどのオブジェクトも普通に作用し合いますが、同時にそれは<strong>作用し合うには Collision イベントが必要</strong>となることを意味しており（簡単に言うと衝突によって作動するからです）、無ければ衝突が記録されないということになります。しかしながら、オブジェクトには特定の番号の<strong>コリジョングループ</strong>を指定することができます。オブジェクトを<em></em>正★のコリジョングループに割り当てると（たとえば 3 つのオブジェクトがグループ "<strong>2</strong>" に入っているとします）、GameMaker Studio 2 によってそれらのオブジェクトのインスタンスは<em></em>常にぶつかり合うようになり、Collision イベントを用意していない場合でも、割り当てたインスタンスおよび配置されたルームの物理特性に従って動きます。逆にオブジェクトを<em></em>負のコリジョングループにすると（たとえば 4 つのオブジェクトを "<strong>-1</strong>" に割り当てるとします）、<em></em>絶対にぶつかり合うことがなくなり、オブジェクトの Collision イベントはすべて無視されます。</p>
    <p class="note"><strong>注意</strong>: コリジョングループを利用すると物理システムに必要となるプロセス量が大幅に増加するため、どうしても必要な場面でのみ利用し、グループの規模はなるべく小さくしましょう。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span data-open-text="true">線形減衰</span><span data-close-text="true">線形減衰</span></a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">減衰はインスタンスが物理世界のルームを移動する速度を下げるためのものです。原理としては現実世界における面との摩擦のようなものですが、GameMaker Studio 2 の物理システムにおいては、摩擦とはコリジョン形状（フィクスチャ）をもつ 2 つのインスタンスが接触したときにだけ適用されるものです。つまり線形減衰とは、他のインスタンスと接触させなくとも物理インスタンスの動きを徐々に遅くできる「空気摩擦」のようなものだと考えて良いでしょう。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#"><span data-open-text="true">傾斜減衰</span><span data-close-text="true">傾斜減衰</span></a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">現実世界において回転する物体は、モーターが付いていたり宇宙空間でもない限り、外からの力（機械的な摩擦なり、空気や水との摩擦なり）を受けてだんだんと回転が遅くなるものです。傾斜減衰によってこうした効果を再現することが可能となり、物理世界におけるインスタンスの回転速度を減衰させることができます。傾斜減衰を設定しないと、インスタンスは無限に回転し続けることになるでしょう。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#"><span data-open-text="true">摩擦</span><span data-close-text="true">摩擦</span></a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot">摩擦とは物質的要素の互いに滑り合う相対運動を妨げる力のことですが、GameMaker Studio 2 の物理世界における摩擦は、物理フィクスチャをもつ 2 つのインスタンスの衝突によって生じる運動量を低下させるものとして言い換えられています。よって 2 つのインスタンスが衝突したとき、それによって生じる運動はこの値の影響を受けることとなり、摩擦を高くするほど運動量が低下することとなります。</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>一番下にあるのはオン / オフの切り替えが可能なフィクスチャの追加オプションで、<strong>センサー</strong>、<strong>覚醒状態で開始</strong>、<strong>キネマティック</strong>からなります。有効にすると、それぞれ次のようにフィクスチャの挙動を変化させます。</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#"><span data-open-text="true">センサー</span><span data-close-text="true">センサー</span></a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot">チェックするとオブジェクトの物理特性が「無視」されることになりますが、他のオブジェクトとの Collision イベントは返されます。これがあれば物理的に存在しないものの、他のインスタンスとの衝突には反応させられるインスタンスをルームに追加できます。たとえばプレイヤーのオブジェクトでチェックすれば、ドアを開けさせたり、ルームのある位置でアクションを引き起こすといったことが可能です。</p>
    <p class="note"><strong>NOTE</strong>: センサーのフィクスチャでは衝突が<strong>最初に起きたときだけ </strong>Collision イベントが発生します。よって 2 つの物体が重なり続けている場合、Collision イベントを連続して起こすことはできません（従来のイベントと同じです）。離れてからもう一度重なった場合であれば、新たに Collision イベントが作動します。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#"><span data-open-text="true">覚醒状態で開始</span><span data-close-text="true">覚醒状態で開始</span></a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">デフォルトでチェックされているオプションで、ルームに置かれたフィクスチャの初期「状態」を表しています。普通であれば最初から覚醒にしておくべきですが（物理世界に加えるのであれば）、物理シミュレーションをいきなり開始すると、不安定になったり、望ましくない影響が残ってしまう場合もあります。そうした影響を避けたいなら、チェックを外すことでインスタンス生成時にフィクスチャが休止するようになり、何らかの作用があるまで物理世界に加わらなくなります。</p>
    <p class="dropspot">なお、物理インスタンスは動きがなくなったり他の物理インスタンスと作用し合わなくなった場合、「休止中」としてフラグ付けされます。休止中のインスタンスとは、物理シミュレーションによって全面的に処理されない状態のインスタンスのことです（よって <a class="tooltip" title="CPUオーバーヘッドは、コンピューターの中央処理装置（CPU）が実行できる処理量、および個々の演算タスクによって占有される最大使用率の割合をあらわす尺度です。">CPU オーバーヘッド</a>を削減できます）。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#"><span data-open-text="true">キネマティック</span><span data-close-text="true">キネマティック</span></a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot">物理演算に基づいたゲームでも、重力のような力や、動的オブジェクトと衝突したときの力に影響されずに動かしたいインスタンスがいくつかあるはずです（横スクロールゲームの足場などを想像してみましょう）。そうしたオブジェクトに対しては、フィクスチャの密度を 0 に設定してしまえば物理演算において<strong>静的</strong>なオブジェクトであると見なされ、外部の影響を受けることは無くなります。ところがこのオプションをチェックすると、静的なオブジェクトを<strong>キネマティック</strong>（運動的）オブジェクトにすることができ、衝突や重力といった力の影響を及ぼすことなく、対応する変数（ <a href="../../GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_position_x.htm"><span class="inline">phy_position_x</span></a> や <a href="../../GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_position_y.htm"><span class="inline">phy_position_y</span></a> など）によって動かしたり回転させることが可能となります。</p>
    <p> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">戻る: <a href="../Objects.htm">オブジェクトエディタ</a></div>
        <div style="float:right">次へ: <a href="Object_Variables.htm">オブジェクト変数</a></div>
      </div>
    </div>
    <h5>© Copyright YoYo Games Ltd. 2020 All Rights Reserved</h5>
  </div>
  <!-- KEYWORDS
Physics Objects
-->
  <!-- TAGS
objects_physics
-->

</body></html>