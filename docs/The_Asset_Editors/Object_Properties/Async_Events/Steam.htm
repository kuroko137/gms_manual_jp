<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../..";
    gCommonRootRelPath = "../../..";
    gTopicId = "5.2.1.1.0_12";
  
//]]></script>

  <script type="text/javascript" src="../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css" />
  <link rel="stylesheet" type="text/css" href="../../../template/Charcoal_Grey/topicheader.css" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <title>Steam</title>
  <meta name="topic-status" content="Draft" />

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Steam</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing the Steam async event." />
  <meta name="rh-index-keywords" content="Objects - Async Steam Event" />
  <meta name="search-keywords" content="Steam,ev_web_steam,ugc_item_installed,ugc_item_subscribed,ugc_item_unsubscribed" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
</head>

<body>
  <div class="topic-header rh-topicheader-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Steam">
        <span>Steam</span>
      </div>
      <div class="gotohome" title="ページをすべて表示するにはここをクリック">
        <span>ページをすべて表示するにはここをクリック</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Steam</h1>
  <p><img alt="Steam イベント" class="center" src="../../../assets/Images/Asset_Editors/Async_Steam.png" style="width: 100%; max-width: 316px;" />一部の <a href="../../../GameMaker_Language/GML_Reference/Steam/Steam.htm">Steam API</a> 関数からの<a class="tooltip" title="コールバックとは、割り当てられている処理を終了してから別の関数（またはコードブロック）を作動させる関数のことです。たとえばsprite_add()関数なら、スプライトが読み込まれたときにasynchronous Image Loadedイベントでコールバックを作動させます。">コールバック</a><span class="glossextra"></span>によってのみ作動するイベントで、<a href="../../../GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"><span class="inline">async_load</span></a> 変数に格納される <a href="../../../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">DS マップ</a>が返されます。このマップには、イベントを作動させた関数のコールバックに応じたキー / 値ペアが含まれます。このうち "<span class="inline">event_type</span>" キーは必ず追加され、このキーを解析することでイベントを作動させた関数のタイプを特定し、それに合わせて必要コードを変更できます。</p>
  <p>イベントを作動させる関数が呼び出されると、変数に格納してチェックされる固有の非同期 ID が生成されます。async_load マップには必ず ID キーが追加されるため、このキーを解析すれば正しいイベントに応答できます。実際にはどの Steam 関数によって非同期応答が起きたかを問わず、DS マップには以下のキーが必ず含まれます。</p>
  <ul class="colour">
    <li>"<span class="inline">id</span>" - イベントを作動させた関数から返される非同期 ID です。</li>
    <li>"<span class="inline">result</span>" - 処理の結果となる実数値です。<span class="inline">ugc_result_success</span> GML 定数、あるいはそれ以外の実数となります。この定数と同じ値であることをチェックし、呼び出しに成功したかを確認してください。別の値が返された場合、何らかの理由で正しく動作していません。別の値はいずれも Steam の "<span class="inline">EResult</span>" 値の結果として示されており、SDK ヘッダーの <span class="inline">steamclientpublic.h</span> から確認できます。</li>
    <li>"<span class="inline">event_type</span>" - イベントのタイプを表す文字列です（詳しくは以下を参照）。</li>
  </ul>
  <p> </p>
  <h2>データのアップロード</h2>
  <p>Steam 関数によってリーダーボードをアップロードすると、DS マップには以下のキー / 値ペアが含まれます（ <a href="../../../GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_upload_score.htm"><span class="inline">steam_upload_score()</span></a>、<a href="../../../GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_upload_score_buffer.htm"><span class="inline">steam_upload_score_buffer()</span></a>のどれでも同様です）。</p>
  <ul class="colour">
    <li>"<span class="inline">event_type</span>" - "<span class="inline">leaderboard_upload</span>" という値を保持するキーです。</li>
    <li>"<span class="inline">post_id</span>" - アップロード関数の呼び出しによって返される ID 値と同一になります。</li>
    <li>"<span class="inline">lb_name</span>" - 投稿されたリーダーボードの名前を保持するキーです。</li>
    <li>"<span class="inline">success</span>" - 投稿に成功すれば 1 に、失敗すれば 0 になります。</li>
    <li>"<span class="inline">updated</span>" - リーダーボードのスコアが更新されていると（新しいスコアのほうが高いと）1 に、更新されていないと 0 になります。</li>
    <li>"<span class="inline">score</span>" - 投稿されたスコアを保持するキーです。</li>
  </ul>
  <p>キーの利用法については、スコアをアップロードする各関数のページから確認できます。</p>
  <p> </p>
  <h2>リーダーボードのダウンロード</h2>
  <p>Steam 関数によってリーダーボードをダウンロードすると、DS マップには以下のキー / 値ペアが含まれます（ <a href="../../../GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_download_scores.htm"><span class="inline">steam_download_scores()</span></a>、<a href="../../../GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_download_scores_around_user.htm"><span class="inline">steam_download_scores_around_user()</span></a>、<a href="../../../GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_download_friends_scores.htm"><span class="inline">steam_download_friends_scores()</span></a>のどれでも同様です）。</p>
  <ul class="colour">
    <li>"<span class="inline">event_type</span>" - "<span class="inline">leaderboard_download</span>" という値を保持するキーです。</li>
    <li>"<span class="inline">id</span>" - ダウンロード関数の呼び出しによって返される ID 値と同一になります。</li>
    <li>"<span class="inline">status</span>" - コールバックの状態です。失敗または結果が返されないと-1 になり、成功すると 0 になります。</li>
    <li>"<span class="inline">lb_name</span>" - 投稿されたリーダーボードの名前を保持するキーです。</li>
    <li>"<span class="inline">numEntries</span>" - 返されたリーダーボードデータの行数が入ります。</li>
    <li>"<span class="inline">entries</span>" - この JSON オブジェクト文字列には別の DS マップが存在し、"<span class="inline">default</span>" キー（結果がない場合）、または値を取得できる "<span class="inline">entries</span>" キーのどちらかが含まれており、"<span class="inline">entries</span>" に返される値はリーダーボードの順位を入れた <a href="../../../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm">DS リスト</a>となります。リスト内のエントリはそれぞれ別の DS マップを参照しており、このマップには "<span class="inline">name</span>" 、"<span class="inline">score</span>" 、"<span class="inline">rank</span>" キーに加え、アップロードした関数によっては追加で "<span class="inline">data</span>" キーが含まれます。</li>
  </ul>
  <p>スコアデータのダウンロード方法について例を紹介しましょう。ここでは指定したリーダーボードのランキングを上から 10 位までリクエストし、Steam Async イベントで結果を解析するという仕組みを取ります（アップロードの例については各関数のページを参照してください）。まずは以下のコードによって、スコアをリクエストしなくてはなりません。</p>
  <p class="code">score_get = steam_download_scores("Game Scores", 1, 10);</p>
  <p>これによって Steam のサーバーに "Game Scores" リーダーボードのスコアを求めるリクエストが送られ、リクエストの ID が "<span class="inline">score_get</span>" 変数に格納されます。この変数は、<strong>Steam Async イベント</strong>から次のように扱います。</p>
  <p class="code">var async_id = ds_map_find_value(async_load, "id");<br /> if async_id == score_get<br />    {<br />    var entries = ds_map_find_value(async_load, "entries");<br />    var map = json_decode(entries);<br />    if ds_map_exists(map, "default")<br />     {<br />       ds_map_destroy(map);<br />       exit;<br />       }<br />    else<br />       {<br />       var list = ds_map_find_value(map, "entries");<br />       var len = ds_list_size(list);<br />       var entry;<br />       for(var i = 0; i &lt; len; i++;)<br />          {<br />          entry = ds_list_find_value(list, i );<br />          steam_name[i] = ds_map_find_value(entry, "name");<br />          steam_score[i] = ds_map_find_value(entry, "score");<br />    steam_rank[i] = ds_map_find_value(entry, "rank");<br />          if (ds_map_exists(entry, "data"))<br />             {<br />             var data = ds_map_find_value(entry, "data");<br />             var buffId = buffer_base64_decode(data);<br />           var message = buffer_read(buffId, buffer_string);<br />             show_debug_message( " -- attached message: " + string(message));<br />             buffer_delete(buffId);<br />             }<br />          ds_map_destroy(entry);<br />        }<br />       ds_list_destroy(list)<br />       }<br />    ds_map_destroy(map)<br />    }</p>
  <p>What we do here is first check the "<span class="inline">id</span>" key of the special async_load map. If this value is the same as the value of the original callback function (stored in the "<span class="inline">score_get</span>" variable) we then continue to process the data. The first thing we do is parse the <span class="inline">async_load</span> DS Map for the key "<span class="inline">entries</span>" which will contain a JSON object containing the leaderboard data. This JSON object is then decoded (see <a href="../../../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm"><span class="inline">json_decode()</span></a>) as another DS Map, and this new map ID is stored in the variable "<span class="inline">map</span>".</p>
  <p>This map is checked for the key "<span class="inline">default</span>" and if that is found then the map is destroyed and the event is exited. If no "<span class="inline">default</span>" key is found, the code will then parse the map to extract the necessary information about the leaderboard, by first extracting a DS List from the "<span class="inline">entries</span>" key of the DS Map, and then looping through each entry of the list to get another DS Map with the <span class="inline">name</span>, <span class="inline">score</span> and <span class="inline">rank</span> of each entry. These values are then stored in arrays and then we check to see if there is an additional "<span class="inline">data</span>" key. If there is (ie: the score was uploaded with an additional data package) then we also parse that and send it to the compiler console for debugging, before destroying the buffer and then continuing on to destroy the map. Note that if the " <span class="inline">data</span>" key is included, it needs to be decoded using the <a href="../../../GameMaker_Language/GML_Reference/Buffers/buffer_base64_decode.htm"><span class="inline">buffer_base64_decode()</span></a> function before it can be correctly read.</p>
  <p>Once the loop has finished, the entries list is destroyed as is the map that it was taken from. There is no need to destroy the <span class="inline">async_load</span> DS Map as this is handled for you by GameMaker Studio 2.</p>
  <p> </p>
  <h2>Downloading UGC (user Generated Content)</h2>
  <p>When using the Steam functions for downloading <a href="../../../GameMaker_Language/GML_Reference/Steam/Steam_UGC/Steam_UGC.htm">User Generated Content (UGC)</a>, a number of them will trigger this event. However, each function will generate an <span class="inline">async_load</span> DS Map with differing key/value pairs (although they will always contain the general "<span class="inline">id</span>", "<span class="inline">result</span>" and "<span class="inline">event_type</span>" keys), so please see the page specific to the function being used for details and examples.</p>
  <p> </p>
  <h2>Unique UGC Events</h2>
  <p>The Steam Async Event can also be triggered when a user subscribes to an item outside of the game - for example, they tab away to a browser and subscribe to a new item then tab back to the game. In these cases the <span class="inline">async_load</span> map will only contain the following details (and none of the default values listed at the top of this page):</p>
  <ul class="colour">
    <li>"<span class="inline">event_type</span>" - This key will hold the constant <span class="inline">ugc_item_installed</span>.</li>
    <li>"<span class="inline">published_file_id</span>" - the ID of the newly installed UGC item (you can use the function <a href="../../../GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_get_item_update_info.htm"><span class="inline">steam_ugc_get_item_install_info()</span></a> to get the path to the installed item)</li>
  </ul>
  <p>The Steam Async event can also be triggered when a workshop item is subscribed to - either from within the app, or externally from a workshop browser - and in these cases the <span class="inline">async_load</span> map will contain the following key/value pairs:</p>
  <ul class="colour">
    <li>"<span class="inline">event_type</span>" - This key will hold the constant <span class="inline">ugc_item_subscribed</span>.</li>
    <li>"<span class="inline">published_file_id</span>" : This key has the published file ID of the newly subscribed item</li>
  </ul>
  <p>The event will be triggered should any item be un-subscribed too, with the DS map holding the following:</p>
  <ul class="colour">
    <li>"<span class="inline">event_type</span>" - This key will hold the constant <span class="inline">ugc_item_unsubscribed</span>.</li>
    <li>"<span class="inline">published_file_id</span>" : This key has the published file ID of the un-subscribed item</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Async_Events.htm">Async Events</a></div>
        <div style="float:right">Next: <a href="System.htm">System</a></div>
      </div>
    </div>
    <h5>© Copyright YoYo Games Ltd. 2020 All Rights Reserved</h5>
  </div>
  <!-- KEYWORDS
Asynchronous Steam Event
async_load
ugc_result_success
ugc_item_installed
ev_web_steam
ugc_item_subscribed
ugc_item_unsubscribed
-->
  <!-- TAGS
ev_web_steam
-->

</body></html>