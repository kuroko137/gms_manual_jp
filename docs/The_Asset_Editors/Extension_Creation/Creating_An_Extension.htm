<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "5.1.0_1";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css" />
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <title>拡張機能の作り方</title>
  <meta name="topic-status" content="Draft" />

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>拡張機能の作り方</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how to create a generic extension" />
  <meta name="rh-index-keywords" content="Extensions - Creating An Extension" />
  <meta name="search-keywords" content="creating extensions" />
</head>

<body>
  <div class="topic-header rh-topicheader-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="拡張機能の作り方">
        <span>拡張機能の作り方</span>
      </div>
      <div class="gotohome" title="ページをすべて表示するにはここをクリック">
        <span>ページをすべて表示するにはここをクリック</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>拡張機能の作り方</h1>
  <p>拡張機能を作成するには、まずアセットブラウザを右クリック<img_tag=RMB_Icon:0>して<strong>拡張機能を作成</strong>を選んでください。拡張機能のメインプロパティウィンドウが開きます。</p>
  <p><img alt="拡張機能のプロパティ" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions.png" style="width: 100%; max-width: 465px;" />これで必要なファイルと関数を追加できるようになりました。また、このウィンドウでは拡張機能の名前をつけたり（普段と同じように、英数字と "_" 記号のみを利用してください）、任意でバージョン番号を設定できます。</p>
  <p>拡張機能にファイルを追加するにはメニューアイコン<img_tag=Estension_Options_Icon:0>をクリックし、Placeholder ファイルまたはターゲットプラットフォームに必要なファイルを選んでください。</p>
  <p class="dropspot"><img alt="拡張機能にファイルを追加" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_Files.png" style="width: 100%; max-width: 480px;" /></p>
  <p>「一般的な」placeholder ファイルは、特定のプラットフォームで必要となる形式（ <span class="inline">DLL</span> や <span class="inline">SO</span> ファイルなど）でなければどのような形式のファイルでも問題なく、このファイルは指定した拡張機能の関数・定数に繋げるための「リンク」ファイルとしてのみ扱われます（基本的には iOS または Android の拡張機能でのみ利用するもので、以下のターゲットごとのセクションにおいてそれぞれ説明されています）。より具体的な用途であれば、"GML" と "JS" を追加できます。</p>
  <p>iOS または Android 用にビルドするのでなければ placeholder は基本不要ですので、「<em>ファイルを追加</em>」を選んでターゲットプラットフォームに応じたファイルを以下から追加しましょう。</p>
  <ul class="colour">
    <li class="dropspot"><span class="inline">.gml</span>: This is a file made only with the GameMaker Language and is compatible with all platforms.</li>
    <li class="dropspot"><span class="inline">.js</span>: This is a JavaScript extension format and is only compatible with the JS target modules (HTML5).</li>
    <li class="dropspot"><span class="inline">.dll</span>: This a dynamic-link library extension format and is only compatible with the Windows, UWP and Xbox One targets (each target will need a different <span class="inline">*.dll</span> file compatible with its specifications).</li>
    <li class="dropspot"><span class="inline">.dylib</span>: This is the Mac equivalent of a DLL and is only compatible with Mac target (not iOS).</li>
    <li class="dropspot"><span class="inline">.so</span>: This is the Linux equivalent of a DLL and is only compatible with the Ubuntu (Linux) target.</li>
    <li class="dropspot"><span class="inline">.prx</span>: This is a file format for adding functionality PS4 target (each target will need a different <span class="inline">*.prx</span> file compatible with its specifications).</li>
  </ul>
  <p>You'll notice that there is no file type for <strong>Android </strong>nor <strong>iOS</strong>, which is because their setup is slightly different. Further down you can find explanations on how to set them up but first let's look at creating a general GML extension for any of the target platforms, since the process is the same for all of them.</p>
  <p>To start with you need to create the file that is going to be used. For a GML extension, this would be a text file (saved with the <span class="inline">.gml</span> extension) and would be formatted something like this:</p>
  <p class="code">#define c_alice_blue<br /> return make_color_rgb(240,248,255);<br /> <br /> <br /> #define instance_create_colour<br /> var i = instance_create_layer(argument0, argument1, argument2);<br /> with (i)<br />     {<br />     image_blend = argument3;<br />     }<br /> return i;</p>
  <p>As you can see we start each section with a <span class="inline">#define</span> call, which in the example above is used to define two functions. You don't need to supply argument fields for the functions as this will be added later, simply use the define then the name of the function and go ahead and add the GML to match. If you were writing a DLL or JS extension, then the process would be similar but in the correct language for the extension file format.</p>
  <p>Once you have done that you need to add the file to the extension (explained above) which will chain a new window to the Extensions Properties for the File Properties:</p>
  <p class="dropspot"><img alt="File Property Window" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_FileProperties.png" style="width: 100%; max-width: 1050px;" /></p>
  <p>Here you would select the target platform for the extension (for GM you would select them all), as well as rename the extension file and set a few other details, which we'll cover in a moment. The Editor should be automatically populated with the functions included in our GML file, but if it isn't then you can add them by clicking the functions menu button <img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png" style="width: 100%; max-width: 16px;" /> and select what you require:</p>
  <p class="dropspot"><img alt="Add functions/Constants To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_AddFunctions.png" style="width: 100%; max-width: 324px;" /></p>
  <p>Selecting <em>Add Function</em> will then permit you to add a function to the extension which can then be called in GameMaker Studio 2 as you would any of the built in functions. <span>Once the function has been added, the following window will open for you to define the function properties in (or you can double-click the function to open it):</span></p>
  <p class="dropspot"><img alt="Function Editor" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_FunctionEditor.png" style="width: 100%; max-width: 440px;" /></p>
  <p>In the image above we have populated the function editor with the details for the function <span class="inline">instance_create_colour()</span> that we defined in our GML extension script (the function editor isn't just for defining GML functions and will be the same for any other extension type). You can see we have given the function a name, which is what you would call when using the function in your project, and this name doesn't have to match the one used in the extension - you can set it to anything you want and then use the <em>External Name</em> option to link it to the actual name defined in the extension. Below that you have a section for defining the <em>Help </em>text, which is the text that will be used in the code complete pop up and the helper text at the bottom of the code editor.</p>
  <p>Next you can define the <em>Return Type</em>, which can be a <strong>double </strong>(real number <a class="tooltip" title="Floating point numbers are numbers that contain floating decimal points. For example, the numbers 5.5, 0.001, and -2,345.6789 are floating point numbers. Numbers that do not have decimal places are called integers.">floating point</a> value) or a string - if there is nothing returned by the external function then this does not matter - and under that you define the arguments that the function will take.</p>
  <p>Arguments can be either <strong>doubles </strong>or <strong>strings</strong>, and you can add them by clicking the add button <img alt="Add Argument Icon" class="icon" src="../../assets/Images/Icons/Icon_AddArgument.png" style="width: 100%; max-width: 18px;" /> and remove them by clicking the remove button <img alt="Remove Argument Icon" class="icon" src="../../assets/Images/Icons/Icon_RemoveArgument.png" style="width: 100%; max-width: 18px;" />. If your function can take variable arguments, you should also make sure to check the <em>Variable Length Arguments</em> checkbox at the bottom.</p>
  <p class="note"><strong>NOTE</strong>: If you are creating a Windows <span class="inline">dll </span>file and it has more than four arguments, <strong>all arguments must be of the same type</strong>.</p>
  <p>Once you have done all that then the function is ready to be used in a project and it will show up in auto complete and be colour coded too. Defined functions can also be set as <strong>Init Functions</strong> or <strong>Final Functions</strong>, meaning that they will be called automatically when the game starts (Init) and when the game ends (Final).</p>
  <p class="note"><strong>IMPORTANT!</strong> All platforms support the Init function call, <strong>but not all platforms will perform the Final function call.</strong> This is because certain platforms will simply close the app without giving any notice or time for this function to be called. The platforms that are affected by this are: <strong>iOS</strong>, <strong>Android</strong>, <strong>HTML5</strong>, <strong>PlayStation </strong>and <strong>XboxOne</strong>.</p>
  <p>The other option you have is to create a <strong>Macro</strong>. A macro can be a <a class="tooltip" title="A constant is a term used to describe a named value that does not change throughout the execution of the program. GameMaker Studio 2 has a number of built-in constants - for example os_windows - but you can also create your own constant values for use in your projects (called Macros) and extensions.">constant</a> value or a single code snippet (for more information on macros, please see here). For example, we could remove the defined function from our example GML extension above for the colour c_alice_blue and make it a macro instead. To make a macro, simply click the Macros button in the Extension Properties window:</p>
  <p class="dropspot"><img alt="Macro Editor" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_MacroEditor.png" style="width: 100%; max-width: 440px;" /></p>
  <p>The editor here is pretty much self explanatory - you give the name of the macro/constant and the value, or a short line of code. Note that if the macro is a line of code <strong>it will be evaluated every time the macro is called</strong>.</p>
  <p>When working with multiple target platforms, it is worth noting that you can create a single extension with only one set of functions/macros which will work on <em>all </em>platforms. This is achieved by adding only one of the link libraries to your game as an extension and placing the other(s) into the list of <strong>Proxy Files</strong> from the <strong>Extension Properties</strong> window. For example, say you have a Windows extension with the <span class="inline"> <strong>dll </strong></span>" <span class="inline">Haggis.dll</span>". You would simply replicate this <span class="inline"> <strong>dll</strong></span> as a Mac <span class="inline"> <strong>DyLib</strong></span>, naming it " <span class="inline"> <strong>libHaggis.dylib</strong></span>" and making sure that the internal function names match those of the original Windows <span class="inline"> <strong>dll</strong></span>. This <strong> <span class="inline">DyLib</span> </strong>would then be added into the Proxy Files and set to export when the game is run on the Mac target, and GameMaker Studio 2 will automatically use it when the extension functions are called.</p>
  <p>To add a proxy file, simply click the <img alt="Add Argument Icon" class="icon" src="../../assets/Images/Icons/Icon_AddArgument.png" style="width: 100%; max-width: 18px;" /> button in the Extension Properties window for the extension and browse to the file location. Once it is added you may need to change the extension target to the appropriate module, and when you next run your game it will be included as a proxy for that platform. You can remove proxy files too by clicking the <img alt="Remove Argument Icon" class="icon" src="../../assets/Images/Icons/Icon_RemoveArgument.png" style="width: 100%; max-width: 18px;" /> button, which will remove the last one in the list each press.</p>
  <p>Once you have added your proxy files they will be stored in the project files of your game, in the Extensions folder (you can find them easily by right-clicking <img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" style="width: 100%; max-width: 21px;" /> on the extension and selecting <em>Open in Explorer</em>), so if you need to edit them, you should edit the copied files that are bundled with the game and not the originals, as GameMaker Studio 2 will be using the ones in the project for compiling.</p>
  <p>It is very important that your proxy files follow the naming conventions listed below, as GameMaker Studio 2 will parse these names and assign the target module for the file according to its extension and name and will automatically link the files for you. If you do not follow these conventions your game may not work at runtime, as GameMaker Studio 2 will not be able to work out which file to use or it will not load the file properly.</p>
  <p>The naming conventions for each target platform are given below:</p>
  <p class="dropspot">  </p>
  <table>
    <tbody>
      <tr>
        <th style="">Platform</th>
        <th style="">Names</th>
      </tr>
      <tr>
        <td style="">Windows 32bit Runtime</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.dll, lib&lt;<em>Name</em>&gt;.dll</span></td>
      </tr>
      <tr>
        <td style="">Windows 64bit Runtime</td>
        <td style=""><span class="inline">&lt;N<em>ame</em>&gt;_x64.dll, lib&lt;<em>Name</em>&gt;_x64.dll</span></td>
      </tr>
      <tr>
        <td style="">Ubuntu (Linux)</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.so, lib&lt;<em>Name</em>&gt;.so, &lt;<em>Name</em>&gt;_linux.so, lib&lt;<em>Name</em>&gt;_linux.so</span></td>
      </tr>
      <tr>
        <td style="">macOS</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.dylib, lib&lt;Name&gt;.dylib</span></td>
      </tr>
      <tr>
        <td style="">HTML5</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.js</span></td>
      </tr>
      <tr>
        <td style="">PS4</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt; <em>Name</em>&gt;.prx, &lt; <em>Name</em>&gt;_ps4.prx, lib&lt; <em>Name</em>&gt;_ps4.prx</span></td>
      </tr>
      <tr>
        <td style="">XBox One</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;_xboxone.dll</span></td>
      </tr>
    </tbody>
  </table>
  <p class="dropspot"> </p>
  <p>Using the conventions above, you would swap out the <span class="inline">&lt;<em>Name</em>&gt;</span> part for the name of the base file that you are adding the proxy files for.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Extensions.htm">The Extension Editor</a></div>
        <div style="float:right">Next: <a href="Android_Extensions.htm">Android Extensions</a></div>
      </div>
    </div>
    <h5>© Copyright YoYo Games Ltd. 2020 All Rights Reserved</h5>
  </div>
  <!-- KEYWORDS
Creating Extensions
-->
  <!-- TAGS
extensions_create
-->

</body></html>