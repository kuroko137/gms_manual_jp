<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "5.1.0_1";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css" />
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <title>拡張機能の作り方</title>
  <meta name="topic-status" content="Draft" />

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>拡張機能の作り方</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how to create a generic extension" />
  <meta name="rh-index-keywords" content="Extensions - Creating An Extension" />
  <meta name="search-keywords" content="creating extensions" />
</head>

<body>
  <div class="topic-header rh-topicheader-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="拡張機能の作り方">
        <span>拡張機能の作り方</span>
      </div>
      <div class="gotohome" title="ページをすべて表示するにはここをクリック">
        <span>ページをすべて表示するにはここをクリック</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>拡張機能の作り方</h1>
  <p>拡張機能を作成するには、アセットブラウザを右クリック<img alt="[右クリックアイコン]" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" style="width: 100%; max-width: 21px;" />して<strong>拡張機能を作成</strong>を選んでください。すると拡張機能のメインプロパティウィンドウが開きます。</p>
  <p><img alt="拡張機能のプロパティ" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions.png" style="width: 100%; max-width: 465px;" />これで必要なファイルと関数を追加できるようになりました。なお、このウィンドウでは拡張機能の名前をつけたり（通常と同じように英数字と "_" 記号のみを使用してください）、バージョン番号を設定することができます。</p>
  <p>拡張機能にファイルを追加するにはメニューアイコン<img alt="[拡張機能のオプションアイコン]" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png" style="width: 100%; max-width: 16px;" />をクリックし、プレースホルダまたは対象プラットフォーム用のファイルを選んでください。</p>
  <p class="dropspot"><img alt="拡張機能にファイルを追加" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_Files.png" style="width: 100%; max-width: 480px;" /></p>
  <p>汎用プレースホルダはファイルの形式を問いませんが、特定のプラットフォームで必要とされる形式（ <span class="inline">DLL</span> や <span class="inline">SO</span> ファイルなど）は避ける必要があります。このファイルは拡張機能の関数、定数を結びつけるためのリンカーファイルとしてのみ利用されます（基本的には下部のターゲット説明にあるように、iOS または Android の拡張機能でのみ必要となります）。用途が限定されている場合は GML 、JS のプレースホルダファイルも追加できます。</p>
  <p>プレースホルダは iOS または Android 用にビルドするのでなければ基本的に不要ですので、「<em>ファイルを追加</em>」を選んで以下のターゲットプラットフォームに応じたファイルを追加しましょう。</p>
  <ul class="colour">
    <li class="dropspot"><span class="inline">.gml</span>: GameMaker Language だけで作られているファイルで、あらゆるプラットフォームと互換性があります。</li>
    <li class="dropspot"><span class="inline">.js</span>: JavaScript の拡張形式であり、JS ターゲットモジュール （HTML5）とのみ互換性があります。</li>
    <li class="dropspot"><span class="inline">.dll</span>: 動的リンクライブラリの拡張形式であり、Windows 、UWP 、Xbox One ターゲットとのみ互換性があります（各ターゲットの仕様に準拠した<span class="inline">*.dll</span> が必要となります）。</li>
    <li class="dropspot"><span class="inline">.dylib</span>: Mac における DLL に相当し、Mac ターゲット （iOS 除く）とのみ互換性があります。</li>
    <li class="dropspot"><span class="inline">.so</span>: Linux における DLL に相当し、Ubuntu （ Linux）ターゲットとのみ互換性があります。</li>
    <li class="dropspot"><span class="inline">.prx</span>: PS4 ターゲットに機能を追加するファイル形式です（各ターゲットの仕様に準拠した<span class="inline">*.prx</span> ファイルが必要となります）。</li>
  </ul>
  <p><strong>Android</strong> 、<strong>iOS</strong> のファイル形式がここにないのはセットアップ方式が少し異なっているためです。それらについては以降で説明されていますが、まずは全てのターゲットプラットフォームで利用でき、手順もほかのプラットフォームと共通している汎用 GML 拡張機能の作り方を見てみましょう。</p>
  <p>最初に使用するファイルを作成しなくてはなりません。GML 拡張機能では、次のような書式のテキストファイル（<span class="inline">.gml</span> 拡張子で保存）が使用されます。</p>
  <p class="code">#define c_alice_blue<br /> return make_color_rgb(240,248,255);<br /> <br /> <br /> #define instance_create_colour<br /> var i = instance_create_layer(argument0, argument1, argument2);<br /> with (i)<br />     {<br />     image_blend = argument3;<br />     }<br /> return i;</p>
  <p>各セクションは<span class="inline">#define</span> の呼び出しで始まっており、上記の例ではそれによって 2 つの関数が定義されています。引数欄には後ほど値を指定できますので、ここでは #define で関数名を決め、対応する GML コードを順次追加していきましょう。DLL や JS の拡張機能を書くときも同様の手順となりますが、拡張機能のファイル形式と一致する言語で行うことになります。</p>
  <p>完了したら、前述したようにファイルを拡張機能に追加してください。ファイルを追加すると新しいウィンドウ（ファイルプロパティ）が拡張機能プロパティの横に開きます。</p>
  <p class="dropspot"><img alt="ファイルプロパティのウィンドウ" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_FileProperties.png" style="width: 100%; max-width: 1050px;" /></p>
  <p>ここでは拡張機能のターゲットプラットフォーム指定 （ GML ならすべて選択しましょう）、ファイル名の変更、詳細データの設定（後述）ができます。エディタには GML ファイルに含まれている関数が自動で追加されますが、もし追加されていない場合は関数メニューボタン<img alt="[拡張機能のオプションアイコン]" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png" style="width: 100%; max-width: 16px;" />をクリックして追加し、必要な関数を指定してください。</p>
  <p class="dropspot"><img alt="関数 / 定数を拡張機能に追加" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_AddFunctions.png" style="width: 100%; max-width: 324px;" /></p>
  <p>「<em>関数を追加</em>」から拡張機能に追加された関数は、GameMaker Studio 2 の組み込み関数と同じように呼び出すことができます。<span>関数が追加されると次のウィンドウが開き、関数のプロパティが設定可能となります（関数をダブルクリックしても開けます）。</span></p>
  <p class="dropspot"><img alt="関数エディタ" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_FunctionEditor.png" style="width: 100%; max-width: 440px;" /></p>
  <p>上の画像では関数エディタより、例とした GML 拡張スクリプトの関数 <span class="inline">instance_create_colour() </span>の詳細データを入力しています（関数エディタでは GML 関数だけでなく、他の形式の拡張も同じように定義します）。関数の名前はプロジェクトから呼び出すための参照名で、拡張機能内の名前と合わせる必要はなく、自由に名前を変更できます。ただしその場合は、実際の名前と結びつくよう「<em>外部名</em>」を拡張機能内の名前にしなければなりません。名前の下で定義できるのは<em>ヘルプ</em>テキストで、コード補間およびコードエディタ下部の補助テキストで利用されます。</p>
  <p>次は、<em>戻り値の型</em>を定義しましょう。型は <strong>double</strong> （<a class="tooltip" title="Floating point numbers are numbers that contain floating decimal points. For example, the numbers 5.5, 0.001, and -2,345.6789 are floating point numbers. Numbers that do not have decimal places are called integers.">浮動小数点</a>の実数）または string から選べますが、戻り値がない外部関数であれば無視してかまいません。型を選んだら、その下から関数が受け取る引数を定義しましょう。</p>
  <p>引数は <strong>double</strong> または <strong>string</strong> のいずれかとなり、追加ボタン<img alt="[引数を追加アイコン]" class="icon" src="../../assets/Images/Icons/Icon_AddArgument.png" style="width: 100%; max-width: 18px;" />をクリックすると追加、削除ボタン<img alt="[引数を削除アイコン]" class="icon" src="../../assets/Images/Icons/Icon_RemoveArgument.png" style="width: 100%; max-width: 18px;" />をクリックすると削除できます。関数が可変長の引数を受け取る場合、必ず下部の「<em>可変長の引数</em>」にチェックを入れるようにしてください。</p>
  <p class="note"><strong>注意</strong>: Windows の <span class="inline">dll</span> ファイルで引数が 4 つ以上の場合、<strong>引数の型をすべて同じにする</strong>必要があります。</p>
  <p>これで関数をプロジェクトで利用できるようになり、自動補完、色分け表示も反映されるようになりました。なお、関数は<strong>初期化関数</strong>・<strong>最終関数</strong>として設定することも可能で、その場合はゲームの開始時（初期化）、ゲームの終了時（最終）に自動で呼び出されます。</p>
  <p class="note"><strong>重要！</strong>初期化関数はすべてのプラットフォームで呼び出されますが、<strong>最終関数は一部のプラットフォームでは呼び出されません。</strong>そのようなプラットフォームでは関数を呼び出すための通知ないし時間が与えられないためです。該当するプラットフォームは <strong>iOS</strong> 、<strong>Android</strong> 、<strong>HTML5</strong> 、<strong>PlayStation </strong>、<strong>XboxOne</strong> です。</p>
  <p>もう一つのオプションは<strong>マクロ</strong>の作成です。マクロは<a class="tooltip" title="A constant is a term used to describe a named value that does not change throughout the execution of the program. GameMaker Studio 2 has a number of built-in constants - for example os_windows - but you can also create your own constant values for use in your projects (called Macros) and extensions.">定数</a>値、または単一のコードスニペットからなります（マクロについての詳細はこちらを参照してください）。たとえば上記の GML 拡張機能の例では、c_alice_blue 関数の定義を削除し、マクロに差し替えることができます。マクロを作成するには、拡張機能プロパティのウィンドウにある「マクロ」ボタンをクリックしてください。</p>
  <p class="dropspot"><img alt="マクロエディタ" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_MacroEditor.png" style="width: 100%; max-width: 440px;" /></p>
  <p>ご覧のように、このエディタではマクロ / 定数の名前、およびその値または短いコード行を設定できます。なお、マクロをコード行にした場合は<strong>マクロが呼び出されるたびに計算が行われます</strong>。</p>
  <p>複数のターゲットプラットフォームで制作している場合、1 つの拡張機能にある関数 / マクロを<em>すべて</em>のプラットフォームで動作させる方法があります。これはリンクライブラリのうちの 1 つだけをゲームに拡張機能として追加し、それ以外のリンクライブラリを<strong>拡張機能プロパティ</strong>のウィンドウから<strong>代用ファイル </strong>（Proxy Files）に追加することで実現できます。たとえば "<span class="inline">Haggis.dll</span>" という <span class="inline"><strong>dll</strong></span> がある Windows の拡張機能であれば、<span class="inline"><strong>dll</strong></span> を複製してから Mac の <span class="inline"><strong>DyLib</strong></span> になるよう名前を "<span class="inline"><strong>libHaggis.dylib</strong></span>" に変更し、あとは内部関数名を元となる Windows の <span class="inline"><strong>dll</strong></span> の関数名に合わせるだけです。この <strong><span class="inline">DyLib</span></strong> を代用ファイルとして追加すれば、ゲームを Mac ターゲットで実行したときに出力させ、外部関数の呼び出し時にこちらを自動で利用できるようになります。</p>
  <p>代用ファイルを追加するには、拡張機能プロパティのウィンドウにある<img alt="[引数を追加アイコン]" class="icon" src="../../assets/Images/Icons/Icon_AddArgument.png" style="width: 100%; max-width: 18px;" />ボタンをクリックし、ファイルの場所を指定してください。追加できたら拡張機能のターゲットを適切なモジュールに変更しておきましょう。ゲームを次に実行すると、そのプラットフォームに代用ファイルとして含まれるようになります。代用ファイルは<img alt="[引数を削除アイコン]" class="icon" src="../../assets/Images/Icons/Icon_RemoveArgument.png" style="width: 100%; max-width: 18px;" />ボタンをクリックすると削除でき、クリックするたびにリストの最後のファイルが削除されます。</p>
  <p>代用ファイルを追加すると、プロジェクトのファイルとして拡張機能のフォルダに保存されます（拡張機能を右クリック<img alt="[右クリックアイコン]" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" style="width: 100%; max-width: 21px;" />して「<em>エクスプローラーで開く</em>」を選ぶと実際の場所がわかります）。ファイルを編集する場合は、元のファイルではなくゲームにコピーされたファイルを編集しましょう（コンパイル時に含まれるのはプロジェクト内のファイルであるためです）。</p>
  <p>重要な点として、代用ファイルは以下の命名規則どおりの名前にしなくてはなりません。GameMaker Studio 2 では名前と拡張子からファイルのターゲットモジュールを割り当て、自動的にファイルをリンクさせるためです。命名規則を守らなければ GameMaker Studio 2 側でどのファイルを使用するべきか判断できなくなったり、ファイルを適切に読み込めなくなるため、実行したゲームが動作しなくなる恐れがあります。</p>
  <p>各ターゲットプラットフォームの命名規則は以下のとおりです。</p>
  <p class="dropspot">  </p>
  <table>
    <tbody>
      <tr>
        <th style="">プラットフォーム</th>
        <th style="">名前</th>
      </tr>
      <tr>
        <td style="">Windows 32bit ランタイム</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.dll, lib&lt;<em>Name</em>&gt;.dll</span></td>
      </tr>
      <tr>
        <td style="">Windows 64bit ランタイム</td>
        <td style=""><span class="inline">&lt;N<em>ame</em>&gt;_x64.dll, lib&lt;<em>Name</em>&gt;_x64.dll</span></td>
      </tr>
      <tr>
        <td style="">Ubuntu (Linux)</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.so, lib&lt;<em>Name</em>&gt;.so, &lt;<em>Name</em>&gt;_linux.so, lib&lt;<em>Name</em>&gt;_linux.so</span></td>
      </tr>
      <tr>
        <td style="">macOS</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.dylib, lib&lt;Name&gt;.dylib</span></td>
      </tr>
      <tr>
        <td style="">HTML5</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.js</span></td>
      </tr>
      <tr>
        <td style="">PS4</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt; <em>Name</em>&gt;.prx, &lt; <em>Name</em>&gt;_ps4.prx, lib&lt; <em>Name</em>&gt;_ps4.prx</span></td>
      </tr>
      <tr>
        <td style="">XBox One</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;_xboxone.dll</span></td>
      </tr>
    </tbody>
  </table>
  <p class="dropspot"> </p>
  <p>命名規則の<span class="inline">&lt;<em>Name</em>&gt;</span>部分は、代用ファイルの元ファイル名に置き換えてください。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">戻る: <a href="../Extensions.htm">拡張機能エディタ</a></div>
        <div style="float:right">次へ: <a href="Android_Extensions.htm">Android の拡張機能</a></div>
      </div>
    </div>
    <h5>© Copyright YoYo Games Ltd. 2020 All Rights Reserved</h5>
  </div>
  <!-- KEYWORDS
Creating Extensions
-->
  <!-- TAGS
extensions_create
-->

</body></html>