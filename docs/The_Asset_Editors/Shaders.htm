<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "..";
    gCommonRootRelPath = "..";
    gTopicId = "5.5_1";
  
//]]></script>

  <script type="text/javascript" src="../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css" />
  <link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <title>シェーダー</title>
  <meta name="topic-status" content="Draft" />

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>シェーダー</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how the shader editor works" />
  <meta name="rh-index-keywords" content="Shader Editor" />
  <meta name="search-keywords" content="shaders,shader,open GL,open GL ES" />
</head>

<body>
  <div class="topic-header rh-topicheader-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="シェーダー">
        <span>シェーダー</span>
      </div>
      <div class="gotohome" title="ページをすべて表示するにはここをクリック">
        <span>ページをすべて表示するにはここをクリック</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>シェーダーエディタ</h1>
  <p><img alt="シェーダーエディタ" class="center" src="../assets/Images/Asset_Editors/Editor_Shaders.png" style="width: 100%; max-width: 1310px;" />シェーダーとは、ゲームによって画面上にレンダリングされるグラフィックを処理するための強力なツールで、スプライトの色相をわずかに加算させるといったものから、ディストーションによって画面全体を歪ませるといったものまで、きわめて高速にエフェクトを適用させることができます。そんなシェーダですが、具体的にはどのようなものでしょうか？</p>
  <p>シェーダーは基本的に 2 つの部分に分かれたプログラムで、グラフィックカードから直接実行されます。GPU がすべての処理を行うために高速であり、さらにはゲームコードの CPU サイクルからも解放してくれます。シェーダー全体は、頂点シェーダープログラムと、フラグメントシェーダープログラム（ピクセルシェーダーとも）によって構成されています。2 つとも小さなプログラムで、グラフィックカードによって画面上にレンダリングされる対象を連動して処理します。そのため実際に<a class="tooltip" title="The display buffer is the 'canvas' where everything is finally drawn. Some events target this directly (like the Pre Draw event), while others will first draw to the application surface and then draw that to the display buffer.">ディスプレイバッファ</a>へ<a class="tooltip" title="GameMaker Studio 2におけるレンダリングとは、一般には「ディスプレイバッファに描画」または「サーフェスに描画」することを意味します。また、ベクターソース（フォントなど）をビットマップイメージに変換するプロセスのことを指している場合もあります。">レンダリング</a>される位置、色、アルファ値をリアルタイムで処理できるのです。</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true">頂点シェーダー</span><span data-close-text="true">頂点シェーダー</span></a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">The Vertex Shader is the programmable shader stage in the rendering pipeline that handles the processing of individual vertices (the points of the triangles used to render any image), and when you are rendering a geometry - like a sprite or a surface - GameMaker Studio 2 creates a stream of vertices - called a <strong>Vertex Buffer </strong>- that defines the geometry of these triangles. A sprite for example would have a geometry of two triangles (normally called <em>polygons</em>) rendered together to form a "quad". This vertex stream from the Vertex Buffer is fed as an input to the Vertex Shader, which can process the vertices data in a programmable way. The Vertex Shader output is used by the GPU to assemble triangles, which are then properly clipped and culled to the view port and view camera, and then sent on to the rasterizer block of the GPU which generates a new output stream, constituted by something called <strong>Fragments</strong>. These are tiny data structures, each of which is relative to a single pixel that appears on the screen.</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true">Fragment Shader</span><span data-close-text="true">Fragment Shader</span></a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">The Fragment Shader is the programmable shader stage in the rendering pipeline that deals with "fragments" - the interpolated pixels used to texture any given polygon - and they are responsible for outputting the final pixel colour of each rendered triangle pixel. Basically it works like this: the Fragment Shader receives as its input all those fragments (the individual pixels of the triangle being rendered) that have been passed along the pipeline by the Vertex Shader. It can then process these fragments to change the colour and alpha of the final destination pixel that will be drawn to the screen.</p>
  </div>
  <p> </p>
  <p>A complete overview of how shaders really work and what place they have in the graphics pipeline is outside the scope of this, but you can find a bried guide here:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="../Additional_Information/Guide_To_Using_Shaders.htm">Guide To Using Shaders</a></li>
  </ul>
  <p> </p>
  <p>And there are a number of articles on the YoYo Games Tech blog that go into a lot more detail, which you can access from the following links:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="https://www.yoyogames.com/blog/14/shaders-overview-part-1">Shaders Part 1</a></li>
    <li><a href="https://www.yoyogames.com/blog/16/shaders-overview-part-2">Shaders Part 2</a></li>
    <li><a href="https://www.yoyogames.com/blog/17/shaders-overview-part-3">Shaders Part 3</a></li>
    <li><a href="https://www.yoyogames.com/blog/18/shaders-overview-part-4">Shaders Part 4</a></li>
  </ul>
  <p> </p>
  <p>GameMaker Studio 2 supports the following shader languages:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Shader Language</th>
        <th>Target Platform</th>
      </tr>
      <tr>
        <td><strong>GLSL ES</strong></td>
        <td>All target platforms</td>
      </tr>
      <tr>
        <td><strong>GLSL</strong></td>
        <td>Mac and Ubuntu (Linux)</td>
      </tr>
      <tr>
        <td><strong>HLSL 11</strong></td>
        <td>Windows, UWP, XboxOne</td>
      </tr>
      <tr>
        <td><strong>PSSL</strong></td>
        <td>Playstation 4</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>To create a shader resource, simply right click <img alt="RMB Icon" class="icon" src="../assets/Images/Icons/Icon_RMB.png" style="width: 100%; max-width: 21px;" /> on <a href="../Introduction/The_Asset_Browser.htm">Asset Browser</a> and select <em>Create Shader</em>. Once you have created the base shader, you can then use the right mouse <img alt="RMB Icon" class="icon" src="../assets/Images/Icons/Icon_RMB.png" style="width: 100%; max-width: 21px;" /> menu on the new resource to select the shader type before continuing to edit the code:</p>
  <p><img alt="Shader Editor RMB Menu" class="center" src="../assets/Images/Asset_Editors/Editor_Shader_RMBMenu.png" style="width: 100%; max-width: 479px;" />The code editor itself is split into two the "programs" - Vertex and Fragment - when you create a new shader, with each one being available from tabs at the top of the editor. Both are created at once because you <em>cannot create a shader without both parts</em>. Even if you wish to only use the fragment shader you will have to have created a "pass through" vertex shader first, which is why by default any new shader being created will have a vertex and fragment pass through shader already coded for you (in the screen shot at the top of the page, you can see that we have used the code editor pane view to show the two side by side... useful when working on both the shader programs together).</p>
  <p>It is worth noting that you can use GLSL ES shaders on <em>all </em>target platforms, but for them to work on the <strong>HTML5 </strong>target platform you must have enabled WebGL in the <a href="../Settings/Game_Options/HTML5.htm">HTML5 Game Options</a> otherwise they will not work.</p>
  <p>For further details relating to shader functions and how they can be used in GameMaker Studio 2 please see the following pages:</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm">Shader Functions</a> - The GML reference section for shaders.</li>
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm">Shader Constants</a> - The constants built in to GameMaker Studio 2 that can be used when writing shaders.</li>
    <li><a href="http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf">GLSL ES Specifications</a> - PDF file of the Open GL ES Shader Language specifications that GameMaker Studio 2 uses.</li>
    <li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference">HLSL Language Reference</a> - The Microsoft refernce pages for using HLSL.</li>
    <li><a href="http://twvideo01.ubm-us.net/o1/vault/gdceurope2013/Presentations/825424RichardStenson.pdf">PSSL Language Presentation</a> - Overview of the PSSL language in presentation format.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="The_Asset_Editors.htm">The Asset Editors</a></div>
        <div style="float:right">Next: <a href="Sounds.htm">Sounds</a></div>
      </div>
    </div>
    <h5>© Copyright YoYo Games Ltd. 2020 All Rights Reserved</h5>
  </div>
  <!-- KEYWORDS
The Shader Editor
Shaders
OpenGL ES
HLSL
PSSL
-->
  <!-- TAGS
shader_editor
-->

</body></html>