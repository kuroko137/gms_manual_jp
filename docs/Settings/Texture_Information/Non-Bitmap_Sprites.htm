<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "6.1.0_2";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css" />
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <title>非ビットマップスプライト</title>
  <meta name="topic-status" content="Draft" />

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <title>非ビットマップスプライト</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Section explaining non-bitmap sprites in GameMaker" />
  <meta name="search-keywords" content="SWF,Spine,skeleton animation,vector sprites" />
  <meta name="rh-index-keywords" content="Texture Goups - Non-Bitmap Sprites,SWF,Spine" />
</head>

<body>
  <div class="topic-header rh-topicheader-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="非ビットマップスプライト">
        <span>非ビットマップスプライト</span>
      </div>
      <div class="gotohome" title="ページをすべて表示するにはここをクリック">
        <span>ページをすべて表示するにはここをクリック</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow"></div>



  <h1>非ビットマップスプライト</h1>
  <p>GameMaker Studio 2 は、<a class="tooltip" title="A vector is a mathematical construct that has a size, called the magnitude, and a direction. In GameMaker, a vector is usually used to show the distance and direction something moved in. A vector can also be used to define images and certain image formats like SWF use vector maths to define the images they contain.">ベクター</a>からなる <span class="inline">SWF</span> 形式ファイル、<strong>Spine スケルタルアニメーション</strong>形式ファイルといった、非<a class="tooltip" title="単一のデータ値であり、1か0（trueかfalse）になります。ビットを8つのブロックに入れて繋げたものがバイトです。map">ビットマップ</a>スプライトにも対応しています。どちらの形式にも長所と短所がありますが、ここでは<a href="../../The_Asset_Editors/Sprites.htm">スプライトエディタ</a>にインポートする方法を説明しながら、描画の流れについて軽く触れていきましょう。</p>
  <p> </p>
  <h2>スケルタルアニメーション・スプライト (Spine)</h2>
  <p>スケルタルアニメーション方式のスプライトとは、骨格となる「スケルトン」を作成し、キーフレームによってその構成パーツを時間とともにアニメーションさせるというものです。スケルトンのスキニング（画像との動きの関連付け）は<a class="tooltip" title="Another name for a texture page, which is simply a collection of images required by one or more sprites in your game, organised in an optimal way to use as little texture memory as possible.">テクスチャアトラス</a>から行われるため、1 つのアニメーションは複数種類のファイルに出力されます。GameMaker Studio 2 にスプライトとしてインポートするには、<span class="inline">*.json</span> 形式のファイルとして出力され、そのファイルが<em>同じディレクトリ内にある</em>テクスチャアトラスファイル（<span class="inline">*.atlas</span> ）、画像ファイル（<span class="inline">*.png</span> など）と正しく関連付けされている必要があります。</p>
  <p><img alt="Spine の UI" class="center" src="../../assets/Images/Settings/Spine_Example.png" style="width: 100%; max-width: 640px;" />現時点では、<strong><a href="http://esotericsoftware.com/">Spine</a> によって作成された JSON 形式ファイルのベクター画像のみインポート可能</strong>です。インポートするまでの手順は普通のビットマップ画像とほとんど変わりません。スケルタルアニメーションを追加するにはまず新しいスプライトを作成し、<strong>スプライト読み込み</strong>ダイアログが開いたら右下にある表示対象ファイルを<span class="inline">*.json</span> に切り替えてください。</p>
  <p><img alt="Spine スプライトのインポート" class="center" src="../../assets/Images/Settings/Spine_Import.png" style="width: 100%; max-width: 1010px;" /></p>
  <p>あとは「開く」ボタンを押せば、スプライトとして<a href="../../Introduction/The_Asset_Browser.htm">アセットブラウザ</a>に追加されます。読み込み中はプログレスバーが表示されますが、複雑なファイルのため少し時間がかかるかもしれません。読み込みが終わると、このようにスプライトプロパティのダイアログに戻ります。</p>
  <p><img alt="スプライトエディタで開かれた Spine スプライト" class="center" src="../../assets/Images/Settings/Spine_OptionsDisabled.png" style="width: 100%; max-width: 1038px;" />アニメーションのインポート後はコリジョンプロパティの設定を行えますが、利用できるのは精密 （Precise ）または境界ボックス （Bounding Box）のコリジョンのみであり、スケルタルアニメーションのコリジョンデータは与えられたデータから明示的に取得されます。インポートしたファイルにデータがなければコリジョンマスクは生成されないため、画像を作成したプログラム側で正しくマスクが設定されていないとコリジョンは機能しません。</p>
  <p class="note"><strong>注意</strong>: スケルタルアニメーションは複雑なため、スプライトエディタに表示されるプレビュー画像ではアニメーションを正確に再現せず、ルームエディタに表示されるものと同じ画像を表示します。</p>
  <p>ビットマップスプライトと異なり、インポートしたスケルタルアニメーション・スプライトは<strong>エディタでは編集できない</strong>ものの、GameMaker Language （ GML）の一部関数によってスキンの変更、プロパティの設定に加えて、アニメーションのその他の要素をコントロールできます。テクスチャオプションも設定不可となりますが、これはスプライトを生成したプログラムによって構築されたテクスチャアトラスが利用されるためです。</p>
  <p>スケルタルアニメーション・スプライトをインポートするにあたって注意しておきたい点はいくつかありますが、もっとも重要な点は、一部のスプライト描画、スプライト管理関数が技術的な理由によってサポートされていないということです。具体的にはスプライトの一部だけを描画したり、配置を歪ませる関数が利用できません（正確な詳細については各 <a href="../../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/Sprites_And_Tiles.htm"><span class="inline">draw_sprite_*()</span></a>関数のページを参照してください）。とはいえ基本的なスプライト描画関数、組み込みスプライト変数はすべてサポートされており、さらには専用の <span class="inline">skeleton_*</span>関数によってアニメーションのプロパティを変更可能です。この関数グループについては<a href="../../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Skeletal_Animation.htm">スケルタルアニメーション</a>のリファレンスで個別に説明されています。</p>
  <p> </p>
  <p> </p>
  <h2>Vector Sprites (SWF)</h2>
  <p>Generally all sprites in GameMaker use bitmaps which - while flexible in terms of content - place limitations on both the size and number of frames possible in a sprite before memory usage can become prohibitive. Vector sprites work around these limitations by storing and drawing their contents differently: instead of a grid of pixels, which can become blocky or fuzzy when scaled, they are drawn as triangles using vector maths and these can be scaled up (or down) without losing definition, as illustrated in the image below:</p>
  <p><img alt="Vector And Bitmap Sprite Comparison" class="center" src="../../assets/Images/Settings/Vector_Compare.png" style="width: 100%; max-width: 620px;" />To help you visualise how this is done, the image below is of the same vector Fireman sprite only now we can see the polygons that are used to make the image within GameMaker Studio 2:</p>
  <p><img alt="Polygons Of A Vector Sprite" class="center" src="../../assets/Images/Settings/Vector_Polys.png" style="width: 100%; max-width: 525px;" />However, nothing is ever for free when it comes to programming games, and the tradeoff here with vector sprites is that they are more CPU expensive to draw than bitmap sprites and this speed difference increases as the complexity of the animation being imported increases. Also, their memory usage is affected by their visual complexity, unlike bitmap sprites. Baring that in mind, they do make it possible to add large animated graphics in ways that would be impossible using traditional bitmapped sprites.</p>
  <p>On the flipside of the performance equation, because vector sprites only draw the pixels absolutely required (unlike bitmap sprites which also "draw" the empty space around the image) they can be cheaper from a GPU perspective. Also, in general vector sprites are much smaller than their bitmap equivalents - for the fireman example above the sizes of the various sprite types are as follows:</p>
  <p class="code">Bitmap at 70x68 = 4x70x68 bytes x 12 frames = 223k<br /> Vector = 54k</p>
  <p>If you quadruple the resolution of the sprite:</p>
  <p class="code">Bitmap at 280x272 = 4x280x272 bytes x 12 frames = 3570k<br /> Vector = 54k</p>
  <p>So, as you can see, a lot of memory can potentially be saved by using vector sprites, and we still have a lot of potential for future space savings.</p>
  <p>Currently GameMaker Studio 2 has <em>limited </em>support for vector sprites. and can only import vector images from <span class="inline">SWF</span> format files. The way of importing them into the program is almost identical to that for adding a normal bitmap image. To add a vector sprite, create a new sprite, which will bring up the standard Load Sprite dialogue, but make sure that you have selected <span class="inline">*.swf</span> from the file filter at the bottom.</p>
  <p><img alt="Import Vector Image" class="center" src="../../assets/Images/Settings/Import_Vector.png" style="cursor: nwse-resize; width: 100%; max-width: 1010px;" />Hitting the "load" button will add the vector image or animation to the <a href="../../Introduction/The_Asset_Browser.htm">Asset Browser</a>, with a progress bar being shown as the file is processed. Note that, depending on the complexity of the file, this can take a while (up to a minute for more complex animations). When processing has finished you'll be returned to the sprite properties dialogue, which will now look like this:</p>
  <p><img alt="Disabled Texture Settings" class="center" src="../../assets/Images/Settings/Vector_Spine_Disabled_Options.png" style="width: 100%; max-width: 1065px;" />The sprite editor won't have changed much, but now the <strong>Edit Image</strong> button has been greyed out and can't be clicked since there aren't any bitmaps to edit in this sort of sprite. Secondly, all the texture options have been greyed out too. SWF sprites are maths-based and as such don't usually have textures associated with them, so none of the available options are applicable for this kind of sprite.</p>
  <p class="note"><strong>NOTE</strong>: How the image looks in your chosen preview editor will not be the same as how it looks in your game, nor how it looks in the preview window of the sprite editor. The vector image will be imported at the size it was created at, which is not necessarily the size that the preview is shown at (browsers will normally scale the image to fit, for example).</p>
  <p>One addition to the Sprite Editor is that you can set the <em>quality </em>of the vector sprite when drawn using the <strong>SWF Precision</strong> slider at the top. This will simply reduce or increase the number of triangles used to generate the sprite - with a value of about 50% being sufficient normally for most games - however you should experiment with this value if you are using extreme scaling, or are having performance issues.</p>
  <p>There are a number of things that you should be aware of when importing vector sprites, with the most important being that some of the sprite drawing and sprite management functions are not supported for technical reasons, particularly those draw functions that draw only part of a sprite, or that "skew" the position in some way (see the individual <a href="../../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/Sprites_And_Tiles.htm"><span class="inline">draw_sprite_*()</span></a> functions for exact details of which). However the basic sprite drawing functions are fully supported as are the built in sprite variables. You can also set different <a class="tooltip" title="This is a technique used to smooth otherwise jagged lines or textures by blending the color of an edge with the color of the pixels around it. The result should be a more pleasing and realistic appearance, depending on the intensity of the effect.">anti-aliasing</a>(AA) values for the SWF sprites being drawn using the functions <span class="inline"><a href="../../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_enable_swf_aa.htm">draw_enable_swf_aa()</a></span>, <span class="inline"><a href="../../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_get_swf_aa_level.htm">draw_get_swf_aa_level()</a></span> or <span class="inline"><a href="../../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_set_swf_aa_level.htm">draw_set_swf_aa_level()</a></span>.</p>
  <p>You should also be aware of the following:</p>
  <ul class="colour">
    <li>When importing a <span class="inline">*.SWF</span> file, Actionscript is <em>not </em>supported, so if your SWF relies on it to work correctly then it probably won't turn out right. Similarly, any embedded movie clips that have their own timeline will only have their first frame shown throughout the animation - all animation must be on the main timeline.</li>
    <li>If your vector file has particularly fine detail you may occasionally find that holes or strange triangles will appear in the resulting sprites. This is because at small scales geometry can sometimes collapse together to create shapes that just don't triangulate well. In this case you have two options - you can scale up the contents of the vector file which will give the importer more room to play with, or you can try to reduce the level of detail in the object that is breaking.</li>
    <li>GameMaker Studio 2 uses the stage size of the SWF as the bounds of the resulting sprite. However, if you have anything on the stage outside these bounds it is still drawn. This means that you should either try to avoid putting anything outside your stage bounds if you don't want it to be shown, or use a mask layer to limit drawing to this area.</li>
    <li>The stage size also affects the size of any collision masks that are generated, therefore if you have a large stage size and a lot of frames in your animation you can potentially eat up a lot of memory. So, only use precise collision masks if you really need it.</li>
    <li>As a SWF file is created from multiple layers, some of which potentially overlap, alpha doesn't work quite the way it does with bitmap sprites - overlapping areas will not look as transparent as other parts of the sprite, as the pixels there are being drawn over multiple times.</li>
    <li>Bitmap fills <em>are </em>supported, though if you use tiled bitmap fills as part of your SWF file you need to make sure the bitmap is a power-of-two in size, otherwise it won't tile properly. Text rendering is also supported, but you need to embed the font in your SWF file for it to show up in the resulting sprite. Also, currently only left-aligned single line text is supported.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Texture_Groups.htm">Texture Groups</a></div>
        <div style="float:right">Next: <a href="Texture_Pages.htm">Texture Pages</a></div>
      </div>
    </div>
    <h5>© Copyright YoYo Games Ltd. 2020 All Rights Reserved</h5>
  </div>

</body></html>