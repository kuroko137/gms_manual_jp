rh._.exports({"0":["audio_emitter_get_listener_mask","audio_emitter_get_listener_mask"],"1":["audio_emitter_get_listener_mask"],"2":["audio_emitter_get_listener_mask"],"3":["\n  ","\n    ","\n    ","\n    ","\n      ","\n        ","audio_emitter_get_listener_mask","\n      ","\n      ","\n        ","Click here to see this page in full context","\n      ","\n    ","\n  ","\n  ","\n\n\n\n  ","\n  ","\n  ","This function will return the bit-mask data that defines which audio listeners an emitter should play sounds from. For more information see the section on ","Audio Listeners",".","\n  "," ","\n  ","\n  ","audio_emitter_get_listener_mask(emitterID);","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Description","\n      ","\n      ","\n        ","emitterID","\n        ","The unique ID of the emitter to get the mask of","\n      ","\n    ","\n  ","\n  "," ","\n  ","\n  ","Real","\n  "," ","\n  ","\n  ","s_emit = audio_emitter_create();"," if audio_emitter_get_listener_mask(s_emit) != global.PlayerMask","    {\n    ","    audio_emitter_set_listener_mask(snd, global.PlayerMask);","    }\n  ","\n  ","The above code creates an emitter then checks the listener mask data for it, and if it's not the same as that which is stored in a global variable, it sets the listener(s) to play from using the mask data stored in the global variable.","\n  "," ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Audio Emitters","\n        ","Next: ","audio_emitter_create","\n        "," ","\n      ","\n    ","\n    ","\n  ","\n  ","\n  ","\n\n"],"4":["audio_emitter_get_listener_mask"],"5":["© Copyright YoYo Games Ltd. 2020 All Rights Reserved"],"7":["Syntax:","Returns:","Example:"],"id":"387"})