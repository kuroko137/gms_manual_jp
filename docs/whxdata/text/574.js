rh._.exports({"0":["instance_place_list","instance_place_list"],"1":["instance_place_list"],"2":["instance_place_list"],"3":["\n  ","\n    ","\n    ","\n    ","\n      ","\n        ","instance_place_list","\n      ","\n      ","\n        ","Click here to see this page in full context","\n      ","\n    ","\n  ","\n  ","\n\n\n\n  ","\n  ","\n  ","With this function you can check a position for a collision with all instances of an object using the collision mask of the instance that runs the code for the check. When you use this you are effectively asking GameMaker Studio 2 to move the instance\n    to the new position, check for a collision, then move back and tell you if a collision was found or not. This will work for precise collisions, but only if both the instance and the instances of the object being checked for have precise collision\n    masks selected, otherwise only bounding box collisions are applied. The function will populate a (previously created) ","DS list"," with the unique ","id","    values of all instances of the object that are considered to be in collision with the calling instance, and you have the option to order the list based on the distance from the origin of the instance doing the checking to the origin of the instances\n    found to be in collision. Note that the function also accepts the special keyword ","all",", in which case all instances found to be in collision will be listed. The function returns\n    the number of instances found, or 0 if none are found.","\n  ","Note that the given x/y coordinates will be rounded to the nearest integer before the check is performed, so if this is ","not"," what you require (or you have been using a legacy GameMaker product), you should ","floor"," the coordinates in the\n    check:","\n  ","instance_place_list(floor(x), floor(y), obj_Enemy, list, true).","\n  "," ","\n  ","\n  ","instance_place_list(x, y, obj, list, ordered);","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Description","\n      ","\n      ","\n        ","x","\n        ","The x position to check for instances.","\n      ","\n      ","\n        ","y","\n        ","The y position to check for instances.","\n      ","\n      ","\n        ","obj","\n        ","The object to check for instances of.","\n      ","\n      ","\n        ","list","\n        ","The DS list to use to store the IDs of colliding instances.","\n      ","\n      ","\n        ","ordered","\n        ","Whether the list should be ordered by distance (","true",") or not (","false",").","\n      ","\n    ","\n  ","\n  "," ","\n  ","\n  ","Int (The number of instances found to be in collision)","\n  "," ","\n  ","\n  ","var _list = ds_list_create();"," var _num = instance_place_list(x, y, obj_Enemy, _list, false);"," if _num > 0","     {\n    ","     for (var i = 0; i < _num; ++i;)","         {\n    ","         instance_destroy(_list[| i]);","         }\n    ","     }\n    "," ds_list_destroy(_list);\n  ","\n  ","The above code will check for a collision with all instances found at the calling instances position. These will be added to a DS list, which is then looped through to destroy each of the instances in collision.","\n  "," ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Instances","\n        ","Next: ","instance_position","\n      ","\n    ","\n    ","\n  ","\n  ","\n  ","\n\n"],"4":["instance_place_list"],"5":["© Copyright YoYo Games Ltd. 2020 All Rights Reserved"],"7":["Syntax:","Returns:","Example:"],"id":"574"})