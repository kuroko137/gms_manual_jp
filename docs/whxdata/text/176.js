rh._.exports({"0":["switch","switch"],"1":["switch,case"],"2":["switch,default"],"3":["\n  ","\n    ","\n    ","\n    ","\n      ","\n        ","switch","\n      ","\n      ","\n        ","Click here to see this page in full context","\n      ","\n    ","\n  ","\n  ","\n\n\n\n  ","\n  ","\n  ","In a number of situations you want to let your instances complete different actions depending on a particular value. You can do this using a number of consecutive ","if / else"," statements, but\n    when the possible choices gets above two or three it is usually easier to use the ","switch"," statement. A ","switch"," statement has the following form:","\n  ","switch (<expression>)","     {\n    ","     case <constant1>: <statement1>; ... ; break;","     case <constant2>: <statement2>; ... ; break;","     ...\n    ","     default: <statement>;","     }\n  ","\n  ","This works as follows:","\n  ","\n    ","First the ","expression"," is executed.","\n    ","Next it is compared with the results of the different ","constants"," after each of the ","case"," ","statement","s",".\n      When we say \"constant\" what we mean is that the value in the case cannot be a variable expression and must be a fixed value of any ","data type",", like \"fight\" or 3 or the keyword ","noone",". ","\n    ","The execution continues after the first ","case"," statement with the correct value, ","until a ","break"," statement is encountered",".","\n    ","If no case statement has the right value, then the ","default"," statement will be executed (it is not required to have a ","default"," statement, and if none is supplied then no action will be taken).","\n  ","\n  ","A simple example of using a switch statement would be something like this:","\n  ","switch (global.state)","     {","     case \"alert\":","         if (instance_exists(obj_Player))","             {","             if (point_distance(x, y, obj_Player.x, obj_Player.y) < 100)","                 {","         \n    global.state = \"chase\";","                 }","             }","     break;","     case \"chase\":","         var _lost = false;","         if (instance_exists(obj_Player))","             {","             move_towards_point(obj_Player.x,\n    obj_Player.y, 2);","             if (point_distance(x, y, obj_Player.x, obj_Player.y) > 100)","                 {","                 _lost = true;","                 }","             }","         else _lost = true;","         if (_lost)","                {","             speed = 0;","             global.state = \"alert\";","             }","     break;","     }","\n  ","Here we have a global variable that holds a string value which is used to set the behaviour (state) of the instance. In this example the instance simply switches between two states, but it is extremely easy to expand this to include more states by adding\n    further ","case"," statements for additional state strings, like \"fight\" or \"die\", etc...","\n  ","Note that multiple ","case"," statements can be used to execute the same statement, as the ","break"," is not always required for each and every ","case",". If there is no ","break"," statement for a\n    particular ","case",", the execution simply continues with the code for the next case, eg:","\n  ","switch (keyboard_key)","     {\n    ","     case vk_left:","     case ord(\"A\"):","         x -= 4;","         break;\n    ","     case vk_right:","     case ord(\"D\"):","         x += 4;","         break;\n    ","     case vk_up:","     case ord(\"W\"):","         y -= 4;","         break;\n    ","     case vk_down:","     case ord(\"S\"):","         y += 4;","         break;\n    ","     }\n  ","\n  ","The above code uses ","switch"," to check for a keyboard event and then compares that to each ","case"," listed. If it meets any of the required values then the corresponding code is executed. Note how in the code we have used\n    the way that ","switch"," can check multiple ","cases"," and continue if no ","break"," is encountered to permit various keys to be used to get the same result. Note that each ","case","    can have it's own code, and so you can set up a sort of \"inheritance\" system where more than one ","case"," and it's code will run consecutively with the next until a break is reached depending on the value\n    of the initial ","switch"," expression.","\n  "," ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Language Features","\n        ","Next: ","break","\n      ","\n    ","\n    ","\n  ","\n  ","\n  ","\n\n"],"4":["switch"],"5":["© Copyright YoYo Games Ltd. 2020 All Rights Reserved"],"id":"176"})