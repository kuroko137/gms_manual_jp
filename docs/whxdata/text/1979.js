rh._.exports({"0":["weak_ref_alive","weak_ref_alive"],"1":["weak_ref_alive"],"2":["weak_ref_alive"],"3":["\n  ","\n    ","\n    ","\n    ","\n      ","\n        ","weak_ref_alive","\n      ","\n      ","\n        ","Click here to see this page in full context","\n      ","\n    ","\n  ","\n  ","\n\n\n\n  ","\n  ","\n  ","With this function you can check the ","weak reference"," to a struct to see if it is still \"alive\" or not. You supply the weak reference to check (as returned by the function\n    ","weak_ref_create()","), and the function will return ","true"," if the struct is still being referenced somewhere or ","false"," if it's not and has been garbage collected.\n      Note that if you supply a value that is not a weak reference, the function will return ","undefined",".","\n  "," ","\n  ","\n  ","weak_ref_alive(weak_ref);","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Description","\n      ","\n      ","\n        ","weak_ref","\n        ","The weak reference to the struct you want to check.","\n      ","\n    ","\n  ","\n  "," ","\n  ","\n  ","Boolean (or undefined)","\n  "," ","\n  ","\n  ","if weak_ref_alive(inventory_ref)","     {","     inventory = -1;","     }","\n  ","The above code checks a weak reference to a struct and if it is still alive the variable referencing it is set to -1, de-referencing the struct and enabling it to be garbage collected.","\n  "," ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Garbage Collection","\n        ","Next: ","weak_ref_any_alive","\n      ","\n    ","\n    ","\n  ","\n  ","\n  ","\n\n"],"4":["weak_ref_create"],"5":["© Copyright YoYo Games Ltd. 2020 All Rights Reserved"],"7":["Syntax:","Returns:","Example:"],"id":"1979"})