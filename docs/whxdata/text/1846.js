rh._.exports({"0":["buffer_save_async","buffer_save_async"],"1":["buffer_save_async"],"2":["buffer_save_async"],"3":["\n  ","\n    ","\n    ","\n    ","\n      ","\n        ","buffer_save_async","\n      ","\n      ","\n        ","Click here to see this page in full context","\n      ","\n    ","\n  ","\n  ","\n\n\n\n  ","\n  ","\n  ","With this function you can save part of the contents of a buffer to a file, ready to be read back into memory using the ","buffer_load()"," function (or any of the other functions for loading buffers). The \"offset\"\n    defines the start position within the buffer for saving (in bytes), and the \"size\" is the size of the buffer area to be saved from that offset onwards (also in bytes). This function works asynchronously, and so the game will continue running\n    while being saved, and all files saved using this function will be placed in a \"default\" folder. This folder does ","not"," need to be included in the filename as it is added automatically by GameMaker. For example the filename path \"","Data\\Player_Save.sav","\"\n    would actually be saved to \"","default\\Data\\Player_Save.sav","\". However, if you then load the file using the function ","buffer_load_async()",", you do not need to supply the \"default\"\n    part of the path either (but any other file function ","will"," require it, except on consoles Xbox One, PS4 and Nintendo Switch).","\n  ","The function will return a unique ID value and trigger an ","Asynchronous Save/Load Event"," where you can use the returned ID to check the ","async_load"," ID value,\n    as shown in the extended example below. The ","async_load"," map in the event will have the following two key/value pairs:","\n  ","\n    ","\"id\": ","the ID of the async function as returned by the save function.","\n    ","\"status\": ","will return ","true"," if the data was saved/loaded correctly, and ","false"," otherwise.","\n  ","\n  ","Note that you can save out multiple buffers in one by calling this function multiple times between calls to ","buffer_async_group_begin()"," and ","buffer_async_group_end()","    (see those functions for further information on this).","\n  "," ","\n  ","\n  ","buffer_save_async(buffer, filename, offset, size);","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Description","\n      ","\n      ","\n        ","buffer","\n        ","The index of the buffer to save.","\n      ","\n      ","\n        ","filename","\n        ","The name of the file to save as.","\n      ","\n      ","\n        ","offset","\n        ","The offset within the buffer to save from (in bytes).","\n      ","\n      ","\n        ","size","\n        ","The size of the buffer area to save (in bytes).","\n      ","\n    ","\n  ","\n  "," ","\n  ","\n  ","Real","\n  "," ","\n  ","\n  ","The ","buffer_save_async()"," function can be called from any event, and since it is asynchronous the callback can be almost instantaneous or could take several seconds. Calling the function is simple and would look something like this:","\n  ","saveid = buffer_save_async(buff, \"Player_Save.sav\", 0, 16384);","\n  ","The above code saves the contents of the buffer \"","buff","\" to the given save file, storing the ID of the function call in the variable \"","saveid","\". When the save is complete, the asynchronous Save/Load event will be triggered\n    and you can parse the ","async_load"," map for the correct ID of the function, like this:","\n  ","if ds_map_find_value(async_load, \"id\") == saveid","     {\n    ","     if ds_map_find_value(async_load, \"status\") == false","         {\n    ","         show_debug_message(\"Save failed!\");","         }\n    ","     }\n  ","\n  ","The above code will first check the id of the DS map that has been created, then check the status of the callback, posting a debug message if there has been any issues.","\n  "," ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Buffers","\n        ","Next: ","buffer_load","\n      ","\n    ","\n    ","\n  ","\n  ","\n  ","\n\n"],"4":["buffer_save_async"],"5":["© Copyright YoYo Games Ltd. 2020 All Rights Reserved"],"7":["Syntax:","Returns:","Extended Example:"],"id":"1846"})