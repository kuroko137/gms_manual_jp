rh._.exports({"0":["merge_colour","merge_colour"],"1":["merge_colour,merge_color"],"2":["merge_colour,merge_color"],"3":["\n  ","\n    ","\n    ","\n    ","\n      ","\n        ","merge_colour","\n      ","\n      ","\n        ","Click here to see this page in full context","\n      ","\n    ","\n  ","\n  ","\n\n\n\n  ","\n  ","\n  ","With this function you can take two colours and then merge them together to make a new colour. The amount of each of the component colours can be defined by changing the \"amount\" argument, where a value of 0 will return the first colour (col1),\n    a value of 1 will return the second colour (col2) and a value in between will return the corresponding mix. For example, a value of 0.5 will mix the two colours equally. The following image illustrates how this works by merging the colours red and\n    blue together:","\n  ","\n  ","\n  ","merge_colour(col1, col2, amount);","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Description","\n      ","\n      ","\n        ","col1","\n        ","The first colour to merge","\n      ","\n      ","\n        ","col2","\n        ","The second colour to merge","\n      ","\n      ","\n        ","amount","\n        ","How much of each colour should be merged. For example, 0 will return col1, 1 will return col2, and 0.5 would return a merge of both colours equally","\n      ","\n    ","\n  ","\n  "," ","\n  ","\n  ","Int","\n  "," ","\n  ","\n  ","col = merge_colour(c_lime, c_orange, 0.5);","\n  ","The above code uses the function to create a colour by merging lime and orange 50/50 and then stores its value in the variable \"col\" for later use.","\n  "," ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Colour And Alpha","\n        ","Next: ","draw_clear","\n      ","\n    ","\n    ","\n  ","\n  ","\n  ","\n\n"],"4":["merge_colour"],"5":["© Copyright YoYo Games Ltd. 2020 All Rights Reserved"],"7":["Syntax:","Returns:","Example:"],"id":"2116"})