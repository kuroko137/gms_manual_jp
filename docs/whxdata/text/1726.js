rh._.exports({"0":["steam_set_stat_avg_rate","steam_set_stat_avg_rate"],"1":["steam_set_stat_avg_rate"],"2":["steam_set_stat_avg_rate"],"3":["\n  ","\n    ","\n    ","\n    ","\n      ","\n        ","steam_set_stat_avg_rate","\n      ","\n      ","\n        ","Click here to see this page in full context","\n      ","\n    ","\n  ","\n  ","\n\n\n\n  ","\n  ","\n  ","This function permits you to set an average statistic type with a \"sliding window\" effect on the average. The \"session_count\" value is the current value that you wish to average out, while the \"session_length\" is the amount\n    of game time since the last call to the function. Please see the ","extended Example"," below for further details on how this can be used.","\n  "," ","\n  ","\n  ","steam_set_stat_avg_rate(stat_name, session_count, session_length);","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Description","\n      ","\n      ","\n        ","stat_name","\n        ","The name of the statistic to set (a string).","\n      ","\n      ","\n        ","session_count","\n        ","The value to get the average of (a real number)","\n      ","\n      ","\n        ","session_length","\n        ","The time that has been taken since the last time the stat was set (a real number).","\n      ","\n    ","\n  ","\n  "," ","\n  ","\n  ","N/A","\n  "," ","\n  ","\n  ","Since the average stat function can be complex to understand, we will illustrate its use with the following example. Consider the case where you'd like to track an average statistic, such as \"Points earned per hour\". One approach would\n    be to have two stats: an ","integer"," stat, \"TotalPoints\", and a ","float"," stat \"TotalPlayTimeHours\", and then divide the total points by the total time to get the \"Points per Hour\" value.","\n  ","However, once the player has accumulated a significant amount of playtime, the calculated average will change extremely slowly, and the more the user plays the game, the less responsive that average will be. If the user has spent 100 hours playing the\n    game, the calculated average will \"lag\" by about 50 hours of that, and if they increase their skill, they will not see the increase in \"Points Per Hour\" that they expect. To get around that we can use a \"sliding window\"\n    to only calculate the \"Points per hour\" for the last 10 hours played.","\n  ","So, to use this function, we would need to create a Steam stat (in the control panel for the game on the Workshop) called \"AvgPointsPerHour\" and set its ","Window"," property to 10. Now in your game you would have to add some global variables\n    into an instance at the start:","\n  ","global.Points = 0;"," global.Time = 0;","\n  ","You would then have some controller object to count up the global \"Time\" variable in an alarm (for example) every second, while your game-play would affect the global \"Points\" variable. At regular intervals while playing (again,\n    in a controller object, perhaps in an Alarm, or at intervals from polling the \"Time\" value) you would set the stat like this:","\n  ","steam_set_stat_avg_rate(\"AvgPointsPerHour\", global.Points, (global.Time / 3600));"," global.Points = 0;"," global.Time = 0;","\n  ","Note that we divide time by 3600 since we want the time in ","hours"," and not in seconds, and afterward we reset the global \"Points\" variable and the global \"Time\" variable to 0 so that the next time the function is called, we\n    get a new average for the statistic. Now, what Steam will do is take this value that you have sent and create an average value over the time that was set for our \"window\".","\n  "," ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Achievements And Statistics","\n        ","Next: ","steam_get_stat_int","\n      ","\n    ","\n    ","\n  ","\n  ","\n  ","\n\n"],"4":["steam_set_stat_avg_rate"],"5":["© Copyright YoYo Games Ltd. 2020 All Rights Reserved"],"7":["Syntax:","Returns:","Extended Example:"],"id":"1726"})