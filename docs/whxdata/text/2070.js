rh._.exports({"0":["audio_falloff_set_model","audio_falloff_set_model"],"1":["audio_falloff_set_model,audio_falloff_exponent_distance,audio_falloff_exponent_distance_clamped,audio_falloff_inverse_distance,audio_falloff_inverse_distance_clamped,audio_falloff_linear_distance,audio_falloff_linear_distance_clamped,audio_falloff_none"],"2":["audio_falloff_set_model,audio_falloff_exponent_distance,audio_falloff_exponent_distance_clamped,audio_falloff_inverse_distance,audio_falloff_inverse_distance_clamped,audio_falloff_linear_distance,audio_falloff_linear_distance_clamped,audio_falloff_none"],"3":["\n  ","\n    ","\n    ","\n    ","\n      ","\n        ","audio_falloff_set_model","\n      ","\n      ","\n        ","Click here to see this page in full context","\n      ","\n    ","\n  ","\n  ","\n\n\n\n  ","\n  ","\n  ","To add more versatility to the audio engine, GameMaker Studio 2 permits you to select the falloff model that suits your game. This model will be used for ","all"," the audio functions in the game or app, and so you should make sure that the model you\n    choose is the correct one, as each one will affect how the listener perceives the sounds you play through emitters or with the function ","audio_play_sound_at",".","\n  ","When setting falloff in your game with the appropriate functions there are three arguments that you will need to set, and each one is appropriate to a specific, model and will affect the way the final sound is \"heard\" by the player depending\n    on the distance that the listener is from the source. The three arguments are:","\n  ","\n    ","reference distance"," - this is the distance from the listener the distance under which the volume for the sound playing would normally drop by half before being influenced by roll-off factor or the specified maximum distance.","\n    ","maximum distance"," - this sets the distance where there will no longer be any attenuation of the source sound. This can be the point at which the sound is no longer heard ","or"," the point at which the sound volume no longer decreases below\n      the minimum threshold defined by the model chosen.","\n    ","falloff factor"," - The falloff factor is used in distance attenuation based on the inverse distance model and sets the final minimum threshold for a sound with falloff.","\n  ","\n  ","The falloff models that are affected by these arguments are represented in GameMaker Studio 2 by the following constants (the table shows the exact calculations used too):","\n  "," ","\n  ","\n    ","\n      ","\n        ","Constant","\n        ","Function","\n      ","\n      ","\n        ","audio_falloff_exponent_distance","\n        "," gain = (listener_distance / reference_distance) ^ (-falloff_factor)","\n      ","\n      ","\n        ","audio_falloff_exponent_distance_clamped","\n        "," distance = clamp(listener_distance, reference_distance, maximum_distance)"," gain = (distance / reference_distance) ^ (-falloff_factor)","\n      ","\n      ","\n        ","audio_falloff_inverse_distance","\n        "," gain = reference_distance / (reference_distance + falloff_factor * (listener_distance - reference_distance))","\n      ","\n      ","\n        ","audio_falloff_inverse_distance_clamped","\n        "," distance = clamp(listener_distance, reference_distance, maximum_distance)"," gain = reference_distance / (reference_distance + falloff_factor * (distance - reference_distance))","\n      ","\n      ","\n        ","audio_falloff_linear_distance","\n        "," distance = min(distance, maximum_distance)"," gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance))","\n      ","\n      ","\n        ","audio_falloff_linear_distance_clamped","\n        "," distance = clamp(listener_distance, reference_distance, maximum_distance)"," gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance))","\n      ","\n      ","\n        ","audio_falloff_none","\n        "," gain = 1","\n      ","\n    ","\n  ","\n  "," The following graphs are visual representations of how the above constants work and affect the sound being played:","\n  ","\n  "," ","\n  ","\n  ","audio_falloff_set_model(model);","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Description","\n      ","\n      ","\n        ","model","\n        ","The ","constant"," used to set the falloff model.","\n      ","\n    ","\n  ","\n  "," ","\n  ","\n  ","N/A","\n  "," ","\n  ","\n  ","audio_falloff_set_model(audio_falloff_exponent_distance_clamped);"," audio_play_sound_at(snd_Waterfall, x, y, 0, 100, 300, 1, true, 1);","\n  ","The above code sets the falloff model and then plays the sound indexed in the variable \"snd_Waterfall\", which will be looped at its room position, with a fall-off reference of 100, a falloff distance of 300, a falloff factor of 1 and a low\n    priority.","\n  "," ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Audio","\n        ","Next: ","audio_sound_gain","\n        "," ","\n      ","\n    ","\n    ","\n  ","\n  ","\n  ","\n\n"],"4":["audio_falloff_set_model"],"5":["© Copyright YoYo Games Ltd. 2020 All Rights Reserved"],"7":["Syntax:","Returns:","Example:"],"id":"2070"})