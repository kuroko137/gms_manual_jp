rh._.exports({"0":["physics_particle_draw_ext","physics_particle_draw_ext"],"1":["physics_particle_draw_ext"],"2":["physics_particle_draw_ext"],"3":["\n  ","\n    ","\n    ","\n    ","\n      ","\n        ","physics_particle_draw_ext","\n      ","\n      ","\n        ","Click here to see this page in full context","\n      ","\n    ","\n  ","\n  ","\n\n\n\n  ","\n  ","\n  ","This function will draw a sprite at the position of all the particles that share the same user defined category value, and that have flags which coincide with those set for the mask. The mask value is defined in the same way as you would define the\n    flags when creating the particles (see the functions ","physics_particle_create()"," for an example), ie: using the ","bitwise ","or","    \"|\" to mask off the appropriate bits for each flag.","\n  ","NOTE",": This function will draw ","all"," particles in the physics simulation with flags that coincide with those of the mask, whether they are individual particles or groups, if the user category is the same.","\n  ","The drawn particle will ignore the colour and alpha values set when you created it, and will instead be drawn using the scale, angle, colour and alpha parameters given in this function. Note that this is purely for drawing a sprite at the particle position\n    and in no way affects the behaviour of the particle.","\n  "," ","\n  ","\n  ","physics_particle_draw_ext(typemask, category, sprite, subimg, xscale, yscale, ang, col, alpha)","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Description","\n      ","\n      ","\n        ","typemask","\n        ","The mask to compare the particles flags with.","\n      ","\n      ","\n        ","category","\n        ","The user defined category to draw (use 0 to draw all categories).","\n      ","\n      ","\n        ","sprite","\n        ","The sprite to use for each particle.","\n      ","\n      ","\n        ","subimg","\n        ","The ","image_index"," of the sprite to draw.","\n      ","\n      ","\n        ","xscale","\n        ","The scale factor to apply to the sprite along the x axis.","\n      ","\n      ","\n        ","yscale","\n        ","The scale factor to apply to the sprite along the y axis.","\n      ","\n      ","\n        ","ang","\n        ","The angle (in degrees) to draw the sprite at.","\n      ","\n      ","\n        ","col","\n        ","The colour to blend with the sprite (default is ","c_white",").","\n      ","\n      ","\n        ","alpha","\n        ","The alpha value to use when drawing (0 - 1).","\n      ","\n    ","\n  ","\n  "," ","\n  ","\n  ","N/A","\n  "," ","\n  ","\n  ","var flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile;"," physics_particle_draw_ext(flags, 2, sprBlob, 0, 2, 2, 0, c_white, 0.5);","\n  ","The above code will draw a sprite for all the particles in the user defined category \"2\" which have the same flags as the given mask, scaled by 2 along both axis and with an alpha of 0.5.","\n  "," ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Soft Body Particles","\n        ","Next: ","physics_particle_count","\n      ","\n    ","\n    ","\n  ","\n  ","\n  ","\n\n"],"4":["physics_particle_draw_ext"],"5":["© Copyright YoYo Games Ltd. 2020 All Rights Reserved"],"7":["Syntax:","Returns:","Example:"],"id":"1595"})