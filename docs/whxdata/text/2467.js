rh._.exports({"0":["Set Audio Pitch","Set Audio Pitch"],"1":["DnD™ Action - Set Audio Pitch"],"2":["Set Audio Pitch"],"3":["\n  ","\n    ","\n    ","\n    ","\n      ","\n        ","Set Audio Pitch","\n      ","\n      ","\n        ","Click here to see this page in full context","\n      ","\n    ","\n  ","\n  ","\n\n\n\n  ","\n  ","\n  ","This action can be used to set the pitch of a sound. You supply the sound asset from the Asset Browser, and then give the desired pitch to change it to, and all further instances of that sound which you play will have their pitch changed. This action\n    will not change the pitch of any sound currently playing, however, and should be used before you use the ","Play Audio"," action for the sound.","\n  ","The pitch value is a pitch ","multiplier",", in that the input value multiplies the current pitch by that amount, so the default value of 1 is no pitch change, while a value of less than 1 will lower the pitch and greater than 1 will raise the pitch.\n    It is best to use small increments for this function as any value under 0 or over 5 may not be audible anyway. It is worth noting that the total pitch change permitted is clamped to (1/256) - 256 octaves, so any value over or under this will not be\n    registered.","\n  ","NOTE",": The clamped value given above is what GameMaker Studio 2 attempts to clamp the range to, but this value is not guaranteed on all target platforms. iOS, for example, clamps to (1/256) - 8, so you may need to experiment on each target platform\n    and have different versions of a sound resource, each one pre-shifted, should you require higher or lower octave values.","\n  "," ","\n  ","\n  ","\n  ","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Description","\n      ","\n      ","\n        ","Sound","\n        ","The sound resource to set the pitch of","\n      ","\n      ","\n        ","pitch","\n        ","The pitch to set the sound to (default is 1)","\n      ","\n    ","\n  ","\n  "," ","\n  ","\n  ","The above action block code first gets the pitch for the given sound and stores it in a temporary\n    local variable. It then checks for a key press, and if one is detected, the value of the pitch is checked to see if it is less than 2. If it is, then the sound is stopped, the pitch variable has 0.1 added to it, and then this variable is used to set\n    the pitch of the sound again before it is played.","\n  "," ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Audio Actions","\n        ","Next: ","Get Audio Pitch","\n      ","\n    ","\n    ","\n  ","\n  ","\n  ","\n\n"],"4":[" Set Audio Pitch"],"5":["© Copyright YoYo Games Ltd. 2020 All Rights Reserved"],"7":["Action Syntax:","Arguments:","Example:"],"id":"2467"})