rh._.exports({"0":["Skeletal Animation","Skeletal Animation"],"2":["Skeletal Animation,gm_SpineTintBlackColour,tint black,Spine"],"3":["\n  ","\n    ","\n    ","\n    ","\n      ","\n        ","Skeletal Animation","\n      ","\n      ","\n        ","Click here to see this page in full context","\n      ","\n    ","\n  ","\n  ","\n\n\n\n  ","\n  ","\n  ","The functions found in this section are ","only"," for use with sprites that have been imported from a skeletal animation file (specifically, the JSON files that ","Spine"," exports)\n    and can be used to get information about an animation asset in your game, as well as for setting certain properties within an animation. These functions can to be used along with the regular sprite functions and variables, permitting you to (for example)\n    mix two skeleton animations using these special functions while setting the image scale using the normal sprite instance variables (for more information on the sprite instance variables see ","here",").","\n  ","NOTE",": For further information on importing skeletal animation sprites made with Spine, please see the section ","Importing Non-Bitmap Sprites",".","\n  ","You can find out more about the functions for these kinds of sprites from the sections below:","\n  "," ","\n  ","\n    ","Animation","\n    ","Skins","\n    ","Attachments","\n    ","Bones","\n    ","Slots","\n    ","Drawing and Miscellaneous","\n  ","\n  "," ","\n  "," ","\n  ","\n  ","This feature allows the dark areas of Spine sprite slots to be tinted differently to the light areas (this is a Spine IDE feature, see the ","Tint black"," section ","here"," more details). Currently, in order to make use of this feature in GameMaker Studio 2, you are required to use a custom ","shader"," when\n    drawing a Spine sprite that uses it. This shader contains a global uniform variable called \"","gm_SpineTintBlackColour","\" which the runner fills with the current tint-black colour, retrieved from the Spine data automatically. The shader\n    required is shown below:","\n  ","The Vertex Shader (this is the same as the default passthrough vertex shader)","\n  ","attribute vec3 in_Position; // (x,y,z)"," attribute vec4 in_Colour; // (r,g,b,a)"," attribute vec2 in_TextureCoord; // (u,v)","\n    "," varying vec2 v_vTexcoord;"," varying vec4 v_vColour;","\n    "," void main()"," {\n    "," vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);"," gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;"," v_vColour = in_Colour;"," v_vTexcoord = in_TextureCoord;"," }\n  ","\n  ","The Fragment Shader:","\n  ","varying vec2 v_vTexcoord;"," varying vec4 v_vColour;","\n    "," uniform vec4 gm_SpineTintBlackColour; // This is the uniform containing the tint-black colour","\n    "," void main()"," {\n    "," vec4 tb = gm_SpineTintBlackColour;"," vec4 texcol = texture2D( gm_BaseTexture, v_vTexcoord );"," vec4 outcol;"," outcol.rgb = v_vColour.rgb * texcol.rgb;"," outcol.rgb += tb.rgb * ((tb.a * (texcol.a - 1.0)) + (1.0 - texcol.rgb)); //\n    This line performs the tint-black blending logic"," outcol.a = v_vColour.a * texcol.a;"," gl_FragColor = outcol;"," }\n  ","\n  ","You would use this by first calling the shader, then drawing the sprite, then resetting the shader, something like this:","\n  ","shader_set(shd_spine_tint_black);"," draw_self();\n    "," shader_reset();\n  ","\n  "," ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Sprites","\n        ","Next: ","Sprite Information","\n      ","\n    ","\n    ","\n  ","\n  ","\n  ","\n\n"],"4":["Skeletal Animation Sprites"],"5":["© Copyright YoYo Games Ltd. 2020 All Rights Reserved"],"6":["Tint Black Support"],"id":"28"})