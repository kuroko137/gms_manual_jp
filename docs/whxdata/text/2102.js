rh._.exports({"0":["collision_line","collision_line"],"1":["collision_line"],"2":["collision_line"],"3":["\n  ","\n    ","\n    ","\n    ","\n      ","\n        ","collision_line","\n      ","\n      ","\n        ","Click here to see this page in full context","\n      ","\n    ","\n  ","\n  ","\n\n\n\n  ","\n  ","\n  ","Collision_line"," checks along a line from point x1,y1 to point x2,y2 for a collision with ","any"," instance of the object specified by the argument \"obj\". this check can be either precise or not, but for precise\n    collisions to be enabled, the object or instance that you are checking for ","must"," also have precise collisions enabled for their sprite. If not, the default check is based on bounding boxes. The following image illustrates how this works:","\n  ","Remember, for precise collisions to be considered ","both"," the object sprite\n    and the collision function must have precise marked as on. It should also be noted that the return value of the function can be the id of ","any one"," of the instances considered to be in collision along the line, so if three instance overlap the\n    defined line, any one of their ids could be the return value of the function.","\n  ","Note that instead of an object index you can supply an instance ","id"," to check for a specific instance, or the ","instance keywords","    ","all",", or ","other"," (depending on the event and current code scope).","\n  "," ","\n  ","\n  ","collision_line(x1, y1, x2, y2, obj, prec, notme);","\n  ","\n    ","\n      ","\n        ","Argument","\n        ","Description","\n      ","\n      ","\n        ","x1","\n        ","The x coordinate of the start of the line.","\n      ","\n      ","\n        ","y1","\n        ","The y coordinate of the start of the line.","\n      ","\n      ","\n        ","x2","\n        ","The x coordinate of the end of the line.","\n      ","\n      ","\n        ","y2","\n        ","The y coordinate of the end of the line.","\n      ","\n      ","\n        ","obj","\n        ","The object to check for instance collisions.","\n      ","\n      ","\n        ","prec","\n        ","Whether the check is based on precise collisions (","true",", which is slower) or its bounding box in general (","false",", faster).","\n      ","\n      ","\n        ","notme","\n        ","Whether the calling instance, if relevant, should be excluded (","true",") or not (","false",").","\n      ","\n    ","\n  ","\n  "," ","\n  ","\n  ","Instance id or noone","\n  "," ","\n  ","\n  ","with (obj_Enemy)","    {\n    ","    if collision_line(100, 400, 100, 600, id, false, false) instance_destroy();","    }\n  ","\n  ","This code gets all instances of \"obj_Enemy\" to check along a line from 100x, 400y to 100x, 600y for a collision with themselves, and if there is one then they are destroyed.","\n  "," ","\n  "," ","\n  "," ","\n  ","\n    ","\n      ","\n        ","Back: ","Collisions","\n        ","Next: ","collision_line_list","\n      ","\n    ","\n    ","\n  ","\n  ","\n  ","\n\n"],"4":["collision_line"],"5":["© Copyright YoYo Games Ltd. 2020 All Rights Reserved"],"7":["Syntax:","Returns:","Example:"],"id":"2102"})