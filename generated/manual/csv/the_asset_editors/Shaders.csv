Shaders.htm+html.head.title:55-3,Shaders,シェーダー
Shaders.htm+html.head.title:59-3,Shaders,シェーダー
Shaders.htm+html.body.div.div.div[title]:73-7,Shaders,シェーダー
Shaders.htm+html.body.div.div.div:73-7,Shaders,シェーダー
Shaders.htm+html.body.h1:86-3,The Shader Editor,シェーダーエディタ
Shaders.htm+html.body.p.img[alt]:87-6,{IMG_TXT} Shader Editor,{IMG_TXT} シェーダーエディタ
Shaders.htm+html.body.p:87-3,"Shaders are a very powerful tool that can be used to manipulate the graphics that your game renders to the screen, permitting incredibly fast effects that can range from, for example, adding a subtle colour hue to a sprite, right up to full screen distortion effects. But what is a shader?",シェーダーとは、ゲームによって画面上にレンダリングされるグラフィックを加工できる非常に強力なツールで、スプライトの色相をわずかに加算させるといったものから、ディストーションによって画面全体を歪ませるといったものまで、きわめて高速にエフェクトを適用可能です。そんなシェーダーですが、具体的にはどういったものなのでしょうか？
Shaders.htm+html.body.p:89-3,"A shader is basically a two-part program that runs directly on the graphics card itself, making it very fast since the GPU is doing all the work and freeing up CPU cycles for your game code. The full shader is comprised of a vertex shader program, and a fragment shader program (also known as a pixel shader). Both of these tiny programs work together in order to manipulate what the graphics card renders to the screen. This then permits you to manipulate in real time, the position, colour and alpha values that are actually <a class=""tooltip"" title=""TITLE_KEY::rendered"">rendered</a> onto the <a class=""tooltip"" title=""TITLE_KEY::display_buffer"">display buffer</a>.","簡単に言うと、シェーダーとはグラフィックカードから直接実行される2つで一組のプログラムです。GPUがすべての処理を行うため非常に高速であり、ゲームコードによるCPUサイクルも解消できます。1つのシェーダーは、頂点シェーダープログラム、フラグメントシェーダープログラム（ピクセルシェーダーとも）という2つのプログラムによって構成されています。グラフィックカードから画面上にレンダリングされる対象をこれらの小さなプログラムに共同処理させることで、<a class=""tooltip"" title=""TITLE_KEY::display_buffer"">表示バッファ</a>に<a class=""tooltip"" title=""TITLE_KEY::rendered"">レンダリング</a>される実際の位置、色、アルファ値をリアルタイムで加工できるのです。"
Shaders.htm+html.body.p:92-3,"<span data-open-text=""true"">Vertex Shader</span><span data-close-text=""true"">Vertex Shader</span>","<span data-open-text=""true"">頂点シェーダー</span><span data-close-text=""true"">頂点シェーダー</span>"
Shaders.htm+html.body.div.p:94-5,"The Vertex Shader is the programmable shader stage in the rendering pipeline that handles the processing of individual vertices (the points of the triangles used to render any image), and when you are rendering a geometry - like a sprite or a surface - GameMaker Studio 2 creates a stream of vertices - called a <strong>Vertex Buffer </strong>- that defines the geometry of these triangles. A sprite for example would have a geometry of two triangles (normally called <em>polygons</em>) rendered together to form a ""quad"". This vertex stream from the Vertex Buffer is fed as an input to the Vertex Shader, which can process the vertices data in a programmable way. The Vertex Shader output is used by the GPU to assemble triangles, which are then properly clipped and culled to the view port and view camera, and then sent on to the rasterizer block of the GPU which generates a new output stream, constituted by something called <strong>Fragments</strong>. These are tiny data structures, each of which is relative to a single pixel that appears on the screen.",頂点シェーダーは、頂点（画像をレンダリングする三角形内にある3つの点）を扱うレンダリングパイプラインにおけるプログラマブル・シェーダーステージです。スプライトやサーフェスといったジオメトリ（形状）をレンダリングする際、GameMaker Studio 2によって<strong>頂点バッファ</strong>という、三角形それぞれのジオメトリを定義する頂点ストリームが生成されます。たとえばスプライトには2つの三角形からなるジオメトリ（一般的には<em>ポリゴン</em>と呼ぶ）があり、三角形を合わせるようにレンダリングすることで「四角形」を成します。こうした頂点バッファのストリームは頂点シェーダーに入力として送られ、頂点データをプログラミングして処理できるようにします。頂点シェーダーの出力をもとにGPU側ですべての三角形が組み立てられ、ビューポートおよびビューカメラに収まるよう適切にクリップ&カリングされたのち、GPUのラスタライザーブロックに送信されます。そしてこのラスタライズブロックから、<strong>フラグメント</strong>で構成された新しい出力ストリームが生成されます。フラグメントとはとても小さなデータ構造で、画面上に表示される一つ一つのピクセルに対応しています。
Shaders.htm+html.body.p:100-3,"<span data-open-text=""true"">Fragment Shader</span><span data-close-text=""true"">Fragment Shader</span>","<span data-open-text=""true"">フラグメントシェーダー</span><span data-close-text=""true"">フラグメントシェーダー</span>"
Shaders.htm+html.body.div.p:102-5,"The Fragment Shader is the programmable shader stage in the rendering pipeline that deals with ""fragments"" - the interpolated pixels used to texture any given polygon - and they are responsible for outputting the final pixel colour of each rendered triangle pixel. Basically it works like this: the Fragment Shader receives as its input all those fragments (the individual pixels of the triangle being rendered) that have been passed along the pipeline by the Vertex Shader. It can then process these fragments to change the colour and alpha of the final destination pixel that will be drawn to the screen.",フラグメントシェーダーは、「フラグメント」を処理するレンダリングパイプラインにおけるプログラマブル・シェーダーステージです。フラグメントとは小片を意味する言葉で、各ポリゴンのテクスチャに使われている補間されたピクセル群のことを指します。これらのフラグメントには、レンダリングされた三角形ピクセルの最終的なピクセルカラーを出力する役割があります。フラグメントシェーダーの仕組みを簡単に説明すると、頂点シェーダーのパイプラインを経たすべてのフラグメント（レンダリングされた三角形の各ピクセル）を入力として受け取り、最終的に画面上へ描画されるピクセルの色やアルファを変更するというものです。
Shaders.htm+html.body.p:107-3,"A complete overview of how shaders really work and what place they have in the graphics pipeline is outside the scope of this, but you can find a bried guide here:",シェーダーの具体的な動作や、グラフィックパイプラインにおける役割はここでは扱いませんが、以下に簡単なガイドがあります。
Shaders.htm+html.body.ul.li:110-5,Guide To Using Shaders,シェーダーの利用ガイド
Shaders.htm+html.body.p:113-3,"And there are a number of articles on the YoYo Games Tech blog that go into a lot more detail, which you can access from the following links:",また、次のリンクからアクセスできる YoYo Games Tech ブログの記事において、より詳しく掘り下げられています。
Shaders.htm+html.body.ul.li:116-5,Shaders Part 1,シェーダーその1（Shaders Part 1）
Shaders.htm+html.body.ul.li:117-5,Shaders Part 2,シェーダーその2（Shaders Part 2）
Shaders.htm+html.body.ul.li:118-5,Shaders Part 3,シェーダーその3（Shaders Part 3）
Shaders.htm+html.body.ul.li:119-5,Shaders Part 4,シェーダーその4（Shaders Part 4）
Shaders.htm+html.body.p:122-3,GameMaker Studio 2 supports the following shader languages:,GameMaker Studio 2でサポートされているシェーダー言語は以下のとおりです。
Shaders.htm+html.body.table.tbody.tr.th:127-9,Shader Language,シェーダー言語
Shaders.htm+html.body.table.tbody.tr.th:128-9,Target Platform,ターゲットプラットフォーム
Shaders.htm+html.body.table.tbody.tr.td:131-9,GLSL ES,GLSL ES
Shaders.htm+html.body.table.tbody.tr.td:132-9,All target platforms,すべてのターゲットプラットフォーム
Shaders.htm+html.body.table.tbody.tr.td:135-9,GLSL,GLSL
Shaders.htm+html.body.table.tbody.tr.td:136-9,Mac and Ubuntu (Linux),"Mac, Ubuntu (Linux)"
Shaders.htm+html.body.table.tbody.tr.td:139-9,HLSL 11,HLSL 11
Shaders.htm+html.body.table.tbody.tr.td:140-9,"Windows, UWP, XboxOne","Windows, UWP, XboxOne"
Shaders.htm+html.body.table.tbody.tr.td:143-9,PSSL,PSSL
Shaders.htm+html.body.table.tbody.tr.td:144-9,Playstation 4,Playstation 4
Shaders.htm+html.body.p:149-3,"To create a shader resource, simply right click <img_tag=RMB_Icon:0> on <a href=""../Introduction/The_Asset_Browser.htm"">Asset Browser</a> and select <em>Create Shader</em>. Once you have created the base shader, you can then use the right mouse <img_tag=RMB_Icon:1> menu on the new resource to select the shader type before continuing to edit the code:","シェーダーリソースを作成するには、<a href=""../Introduction/The_Asset_Browser.htm"">アセットブラウザ</a>を右クリック<img_tag=RMB_Icon:0>して「<em>シェーダーを作成</em>」を選んでください。作成できたらコードの編集を始める前にリソースを右クリック<img_tag=RMB_Icon:1>してメニューを開き、シェーダータイプを選択しましょう。"
Shaders.htm+html.body.p.img[alt]:151-6,{IMG_TXT} Shader Editor RMB Menu,{IMG_TXT} シェーダーエディタの右クリックメニュー
Shaders.htm+html.body.p:151-3,"The code editor itself is split into two the ""programs"" - Vertex and Fragment - when you create a new shader, with each one being available from tabs at the top of the editor. Both are created at once because you <em>cannot create a shader without both parts</em>. Even if you wish to only use the fragment shader you will have to have created a ""pass through"" vertex shader first, which is why by default any new shader being created will have a vertex and fragment pass through shader already coded for you (in the screen shot at the top of the page, you can see that we have used the code editor pane view to show the two side by side... useful when working on both the shader programs together).",シェーダーを作成すると頂点・フラグメントという 2 つのプログラムで分割されたコードエディタが開きますが、上部にあるタブ一覧から片方のプログラムに切り替えることができます。これらのプログラムは同時に作成され、<em>1つしかプログラムがないシェーダーは作成できません</em>。仮にフラグメントシェーダーだけを使う場合でも、まず通過点となる頂点シェーダーを作成しなくてはならず、そのためシェーダーを新規作成するとデフォルトでコードに頂点・フラグメントのパススルーシェーダーが組み込まれます（なお、ページ上部のスクリーンショットを見てわかるように、コードエディタのペインには 2 つのプログラムが並べて表示されます。同時に編集したい場合は便利でしょう…）。
Shaders.htm+html.body.p:155-3,"It is worth noting that you can use GLSL ES shaders on <em>all </em>target platforms, but for them to work on the <strong>HTML5 </strong>target platform you must have enabled WebGL in the <a href=""../Settings/Game_Options/HTML5.htm"">HTML5 Game Options</a> otherwise they will not work.","注意点として、GLSL ESシェーダーは<em>すべて</em>のターゲットプラットフォームで利用できますが、<strong>HTML5</strong> ターゲットプラットフォームで機能させるには <a href=""../Settings/Game_Options/HTML5.htm"">HTML5ゲーム設定</a>からWebGLを有効にしなくてはなりません。"
Shaders.htm+html.body.p:157-3,For further details relating to shader functions and how they can be used in GameMaker Studio 2 please see the following pages:,シェーダーと関わりのある関数および詳しい使い方については、次のページを参照してください。
Shaders.htm+html.body.ul.li:159-5,"<a href=""../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm"">Shader Functions</a> - The GML reference section for shaders.","<a href=""../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm"">シェーダー関数</a> - シェーダーのGMLリファレンスセクションです。"
Shaders.htm+html.body.ul.li:160-5,"<a href=""../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm"">Shader Constants</a> - The constants built in to GameMaker Studio 2 that can be used when writing shaders.","<a href=""../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm"">シェーダー定数</a> - シェーダーを書くときに利用できるGameMaker Studio 2の組み込み定数です。"
Shaders.htm+html.body.ul.li:161-5,"<a href=""http://www{-dot-}khronos{-dot-}org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf"">GLSL ES Specifications</a> - PDF file of the Open GL ES Shader Language specifications that GameMaker Studio 2 uses.","<a href=""http://www{-dot-}khronos{-dot-}org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf"">GLSL ESの仕様書</a> - GameMaker Studio 2でも使われている、Open GL ESシェーダー言語の仕様が記されたPDFファイルです。"
Shaders.htm+html.body.ul.li:162-5,"<a href=""https://docs{-dot-}microsoft{-dot-}com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference"">HLSL Language Reference</a> - The Microsoft refernce pages for using HLSL.","<a href=""https://docs{-dot-}microsoft{-dot-}com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference"">HLSL言語リファレンス</a> - HLSLの使い方に関するMicrosoftのリファレンスページです。"
Shaders.htm+html.body.ul.li:163-5,"<a href=""http://twvideo01{-dot-}ubm-us{-dot-}net/o1/vault/gdceurope2013/Presentations/825424RichardStenson.pdf"">PSSL Language Presentation</a> - Overview of the PSSL language in presentation format.","<a href=""https://ubm-twvideo01{-dot-}s3{-dot-}amazonaws{-dot-}com/o1/vault/gdceurope2013/Presentations/825424RichardStenson{-dot-}pdf"">PSSL言語プレゼンテーション</a> - プレゼンテーション形式で記されたPSSL言語の概要です。"
Shaders.htm+html.body.div.div.div.div:171-9,"Back: <a href=""The_Asset_Editors.htm"">The Asset Editors</a>","戻る: <a href=""The_Asset_Editors.htm"">アセットエディタ</a>"
Shaders.htm+html.body.div.div.div.div:172-9,"Next: <a href=""Sounds.htm"">Sounds</a>","次へ: <a href=""Sounds.htm"">サウンド</a>"
Shaders.htm+html.body.p:188-1,{SEARCH_RESULT} Page detailing how the shader editor works,{SEARCH_RESULT} シェーダーエディタの詳しい仕組みについてのページ
Shaders.htm+html.body.p:188-66,{INDEX_KEYWORD} Shader Editor,{INDEX_KEYWORD} シェーダーエディタ
Shaders.htm.img_tag+RMB_Icon:0,{IMG_TXT} RMB Icon,{IMG_TXT} 右クリックアイコン
Shaders.htm.img_tag+RMB_Icon:1,{IMG_TXT} RMB Icon,{IMG_TXT} 右クリックアイコン
