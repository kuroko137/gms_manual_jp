Creating_An_Extension.htm+html.head.title:55-3,Creating An Extension,拡張機能の作り方
Creating_An_Extension.htm+html.head.title:59-3,Creating An Extension,拡張機能の作り方
Creating_An_Extension.htm+html.body.div.div.div[title]:73-7,Creating An Extension,拡張機能の作り方
Creating_An_Extension.htm+html.body.div.div.div:73-7,Creating An Extension,拡張機能の作り方
Creating_An_Extension.htm+html.body.h1:86-3,Creating An Extension,拡張機能の作り方
Creating_An_Extension.htm+html.body.p:87-3,To create an extension you first need to right click <img_tag=RMB_Icon:0> on the Asset Browser and select <strong>Create Extension</strong>. That will open the main extension properties window:,拡張機能を作成するには、アセットブラウザを右クリック<img_tag=RMB_Icon:0>して<strong>拡張機能を作成</strong>を選んでください。すると拡張機能のメインプロパティウィンドウが開きます。
Creating_An_Extension.htm+html.body.p.img[alt]:88-6,{IMG_TXT} Extension Properties,{IMG_TXT} 拡張機能のプロパティ
Creating_An_Extension.htm+html.body.p:88-3,"This is now ready for you to add the required files and functions, and you can also give the extension a name here (following the usual convention of only letters/numbers and no special symbols except the underbar ""_""). You can also set the version number for the extension should you wish to.","これで必要なファイルと関数を追加できるようになりました。なお、このウィンドウでは拡張機能の名前をつけたり（通常と同じように英数字と""_""記号のみを使用してください）、バージョン番号を設定することができます。"
Creating_An_Extension.htm+html.body.p:90-3,To add a file to the new extension you need to click the menu icon <img_tag=Estension_Options_Icon:0> and select either a placeholder file or the actual file that is required for the target platform:,拡張機能にファイルを追加するにはメニューアイコン<img_tag=Estension_Options_Icon:0>をクリックし、プレースホルダまたは対象プラットフォーム用のファイルを選んでください。
Creating_An_Extension.htm+html.body.p.img[alt]:92-23,{IMG_TXT} Add Files To An Extension,{IMG_TXT} 拡張機能にファイルを追加
Creating_An_Extension.htm+html.body.p:93-3,"A ""Generic"" placeholder is a file that can be of any type, except those required by the specific platforms (so no <span class=""inline"">DLL</span> or <span class=""inline"">SO </span>files, for example), and it will not be used except as a ""linker"" file to connect a set of functions or constants with the given extension (generally it is only for use with iOS and Android extensions, which is explained in the sections below for those targets). You can also add ""GML"" and ""JS"" placeholder files for more specific use.","汎用プレースホルダはファイルの形式を問いませんが、特定のプラットフォームで必要とされる形式（<span class=""inline"">DLL</span>や<span class=""inline"">SO</span>ファイルなど）は避ける必要があります。このファイルは拡張機能の関数、定数を結びつけるためのリンカーファイルとしてのみ利用されます（基本的には下部のターゲット説明にあるように、iOSまたはAndroidの拡張機能でのみ必要となります）。用途が限定されている場合はGML、JSのプレースホルダファイルも追加できます。"
Creating_An_Extension.htm+html.body.p:96-3,"Normally you won't need to use placeholders unless building for iOS and Android, so you would choose the <em>Add Files</em> option to add any one of the following files depending on the target platform they are for:",プレースホルダはiOSまたはAndroid用にビルドするのでなければ基本的に不要ですので、「<em>ファイルを追加</em>」を選んで以下のターゲットプラットフォームに応じたファイルを追加しましょう。
Creating_An_Extension.htm+html.body.ul.li:98-5,"<span class=""inline"">.gml</span>: This is a file made only with the GameMaker Language and is compatible with all platforms.","<span class=""inline"">.gml</span>: GameMaker Language だけで作られているファイルで、あらゆるプラットフォームと互換性があります。"
Creating_An_Extension.htm+html.body.ul.li:99-5,"<span class=""inline"">.js</span>: This is a JavaScript extension format and is only compatible with the JS target modules (HTML5).","<span class=""inline"">.js</span>: JavaScriptの拡張形式であり、JSターゲットモジュール（HTML5）とのみ互換性があります。"
Creating_An_Extension.htm+html.body.ul.li:100-5,"<span class=""inline"">.dll</span>: This a dynamic-link library extension format and is only compatible with the Windows, UWP and Xbox One targets (each target will need a different <span class=""inline"">*.dll</span> file compatible with its specifications).","<span class=""inline"">.dll</span>: 動的リンクライブラリの拡張形式であり、Windows、UWP、Xbox Oneターゲットとのみ互換性があります（各ターゲットの仕様に準拠した<span class=""inline"">*.dll</span>が必要となります）。"
Creating_An_Extension.htm+html.body.ul.li:101-5,"<span class=""inline"">.dylib</span>: This is the Mac equivalent of a DLL and is only compatible with Mac target (not iOS).","<span class=""inline"">.dylib</span>: MacにおけるDLLに相当し、Macターゲット（iOS除く）とのみ互換性があります。"
Creating_An_Extension.htm+html.body.ul.li:102-5,"<span class=""inline"">.so</span>: This is the Linux equivalent of a DLL and is only compatible with the Ubuntu (Linux) target.","<span class=""inline"">.so</span>: LinuxにおけるDLLに相当し、Ubuntu（Linux）ターゲットとのみ互換性があります。"
Creating_An_Extension.htm+html.body.ul.li:103-5,"<span class=""inline"">.prx</span>: This is a file format for adding functionality PS4 target (each target will need a different <span class=""inline"">*.prx</span> file compatible with its specifications).","<span class=""inline"">.prx</span>: PS4ターゲットに機能を追加するファイル形式です（各ターゲットの仕様に準拠した<span class=""inline"">*.prx</span>ファイルが必要となります）。"
Creating_An_Extension.htm+html.body.p:105-3,"You'll notice that there is no file type for <strong>Android </strong>nor <strong>iOS</strong>, which is because their setup is slightly different. Further down you can find explanations on how to set them up but first let's look at creating a general GML extension for any of the target platforms, since the process is the same for all of them.",<strong>Android</strong>、<strong>iOS</strong>のファイル形式がここにないのはセットアップ方式が少し異なっているためです。それらについては以降で説明されていますが、まずは全てのターゲットプラットフォームで利用でき、手順もほかのプラットフォームと共通している汎用GML拡張機能の作り方を見てみましょう。
Creating_An_Extension.htm+html.body.p:107-3,"To start with you need to create the file that is going to be used. For a GML extension, this would be a text file (saved with the <span class=""inline"">.gml</span> extension) and would be formatted something like this:","最初に使用するファイルを作成しなくてはなりません。GML拡張機能では、次のような書式のテキストファイル（<span class=""inline"">.gml</span>拡張子で保存）が使用されます。"
Creating_An_Extension.htm+html.body.p:108-3,"{ANY_CODE} #define c_alice_blue<br /> return make_color_rgb(240,248,255);<br /> <br /> <br /> #define instance_create_colour<br /> var i = instance_create_layer(argument0, argument1, argument2);<br /> with (i)<br /> {nbsp_x1} {nbsp_x1} {<br /> {nbsp_x1} {nbsp_x1} image_blend = argument3;<br /> {nbsp_x1} {nbsp_x1} }<br /> return i;","{ANY_CODE} #define c_alice_blue<br /> return make_color_rgb(240,248,255);<br /> <br /> <br /> #define instance_create_colour<br /> var i = instance_create_layer(argument0, argument1, argument2);<br /> with (i)<br /> {nbsp_x1} {nbsp_x1} {<br /> {nbsp_x1} {nbsp_x1} image_blend = argument3;<br /> {nbsp_x1} {nbsp_x1} }<br /> return i;"
Creating_An_Extension.htm+html.body.p:111-3,"As you can see we start each section with a <span class=""inline"">#define</span> call, which in the example above is used to define two functions. You don't need to supply argument fields for the functions as this will be added later, simply use the define then the name of the function and go ahead and add the GML to match. If you were writing a DLL or JS extension, then the process would be similar but in the correct language for the extension file format.","各セクションは<span class=""inline"">#define</span>の呼び出しで始まっており、上記の例ではそれによって2つの関数が定義されています。引数欄には後ほど値を指定できますので、ここでは #defineで関数名を決め、対応するGMLコードを順次追加していきましょう。DLLやJSの拡張機能を書くときも同様の手順となりますが、拡張機能のファイル形式と一致する言語で行うことになります。"
Creating_An_Extension.htm+html.body.p:113-3,Once you have done that you need to add the file to the extension (explained above) which will chain a new window to the Extensions Properties for the File Properties:,完了したら、前述したようにファイルを拡張機能に追加してください。ファイルを追加すると新しいウィンドウ（ファイルプロパティ）が拡張機能プロパティの横に開きます。
Creating_An_Extension.htm+html.body.p.img[alt]:114-23,{IMG_TXT} File Property Window,{IMG_TXT} ファイルプロパティのウィンドウ
Creating_An_Extension.htm+html.body.p:115-3,"Here you would select the target platform for the extension (for GM you would select them all), as well as rename the extension file and set a few other details, which we'll cover in a moment. The Editor should be automatically populated with the functions included in our GML file, but if it isn't then you can add them by clicking the functions menu button <img_tag=Estension_Options_Icon:0> and select what you require:",ここでは拡張機能のターゲットプラットフォーム指定 （GMLならすべて選択しましょう）、ファイル名の変更、詳細データの設定（後述）ができます。エディタにはGMLファイルに含まれている関数が自動で追加されますが、もし追加されていない場合は関数メニューボタン<img_tag=Estension_Options_Icon:0>をクリックして追加し、必要な関数を指定してください。
Creating_An_Extension.htm+html.body.p.img[alt]:117-23,{IMG_TXT} Add functions/Constants To An Extension,{IMG_TXT} 関数/定数を拡張機能に追加
Creating_An_Extension.htm+html.body.p:118-3,"Selecting <em>Add Function</em> will then permit you to add a function to the extension which can then be called in GameMaker Studio 2 as you would any of the built in functions. <span>Once the function has been added, the following window will open for you to define the function properties in (or you can double-click the function to open it):</span>",「<em>関数を追加</em>」から拡張機能に追加された関数は、GameMaker Studio 2の組み込み関数と同じように呼び出すことができます。<span>関数が追加されると次のウィンドウが開き、関数のプロパティが設定可能となります（関数をダブルクリックしても開けます）。</span>
Creating_An_Extension.htm+html.body.p.img[alt]:119-23,{IMG_TXT} Function Editor,{IMG_TXT} 関数エディタ
Creating_An_Extension.htm+html.body.p:120-3,"In the image above we have populated the function editor with the details for the function <span class=""inline"">instance_create_colour()</span> that we defined in our GML extension script (the function editor isn't just for defining GML functions and will be the same for any other extension type). You can see we have given the function a name, which is what you would call when using the function in your project, and this name doesn't have to match the one used in the extension - you can set it to anything you want and then use the <em>External Name</em> option to link it to the actual name defined in the extension. Below that you have a section for defining the <em>Help </em>text, which is the text that will be used in the code complete pop up and the helper text at the bottom of the code editor.","上の画像では関数エディタより、例としたGML拡張スクリプトの関数<span class=""inline"">instance_create_colour() </span>の詳細データを入力しています（関数エディタではGML関数だけでなく、他の形式の拡張も同じように定義します）。関数の名前はプロジェクトから呼び出すための参照名で、拡張機能内の名前と合わせる必要はなく、自由に名前を変更できます。ただしその場合は、実際の名前と結びつくよう「<em>外部名</em>」を拡張機能内の名前にしなければなりません。名前の下で定義できるのは<em>ヘルプ</em>テキストで、コード補間およびコードエディタ下部の補助テキストで利用されます。"
Creating_An_Extension.htm+html.body.p:124-3,"Next you can define the <em>Return Type</em>, which can be a <strong>double </strong>(real number <a class=""tooltip"" title=""TITLE_KEY::floating_point"">floating point</a> value) or a string - if there is nothing returned by the external function then this does not matter - and under that you define the arguments that the function will take.","次は、<em>戻り値の型</em>を定義しましょう。型は<strong>double</strong>（<a class=""tooltip"" title=""TITLE_KEY::floating_point"">浮動小数点</a>の実数）またはstringから選べますが、戻り値がない外部関数であれば無視してかまいません。型を選んだら、その下から関数が受け取る引数を定義しましょう。"
Creating_An_Extension.htm+html.body.p:126-3,"Arguments can be either <strong>doubles </strong>or <strong>strings</strong>, and you can add them by clicking the add button <img_tag=Add_Argument_Icon:0> and remove them by clicking the remove button <img_tag=Remove_Argument_Icon:0>. If your function can take variable arguments, you should also make sure to check the <em>Variable Length Arguments</em> checkbox at the bottom.",引数は<strong>double</strong>または<strong>string</strong>のいずれかとなり、追加ボタン<img_tag=Add_Argument_Icon:0>をクリックすると追加、削除ボタン<img_tag=Remove_Argument_Icon:0>をクリックすると削除できます。関数が可変長の引数を受け取る場合、必ず下部の「<em>可変長の引数</em>」にチェックを入れるようにしてください。
Creating_An_Extension.htm+html.body.p:128-3,"<strong>NOTE</strong>: If you are creating a Windows <span class=""inline"">dll </span>file and it has more than four arguments, <strong>all arguments must be of the same type</strong>.","<strong>注意</strong>: Windowsの<span class=""inline"">dll</span>ファイルで引数が4つ以上の場合、<strong>引数の型をすべて同じにする</strong>必要があります。"
Creating_An_Extension.htm+html.body.p:129-3,"Once you have done all that then the function is ready to be used in a project and it will show up in auto complete and be colour coded too. Defined functions can also be set as <strong>Init Functions</strong> or <strong>Final Functions</strong>, meaning that they will be called automatically when the game starts (Init) and when the game ends (Final).",これで関数をプロジェクトで利用できるようになり、自動補完、色分け表示も反映されるようになりました。なお、関数は<strong>初期化関数</strong>・<strong>最終関数</strong>として設定することも可能で、その場合はゲームの開始時（初期化）、ゲームの終了時（最終）に自動で呼び出されます。
Creating_An_Extension.htm+html.body.p:131-3,"<strong>IMPORTANT!</strong> All platforms support the Init function call, <strong>but not all platforms will perform the Final function call.</strong> This is because certain platforms will simply close the app without giving any notice or time for this function to be called. The platforms that are affected by this are: <strong>iOS</strong>, <strong>Android</strong>, <strong>HTML5</strong>, <strong>PlayStation </strong>and <strong>XboxOne</strong>.",<strong>重要！</strong>初期化関数はすべてのプラットフォームで呼び出されますが、<strong>最終関数は一部のプラットフォームでは呼び出されません。</strong>そのようなプラットフォームでは関数を呼び出すための通知ないし時間が与えられないためです。該当するプラットフォームは<strong>iOS</strong>、<strong>Android</strong>、<strong>HTML5</strong>、<strong>PlayStation </strong>、<strong>XboxOne</strong>です。
Creating_An_Extension.htm+html.body.p:133-3,"The other option you have is to create a <strong>Macro</strong>. A macro can be a <a class=""tooltip"" title=""TITLE_KEY::constant"">constant</a> value or a single code snippet (for more information on macros, please see here). For example, we could remove the defined function from our example GML extension above for the colour c_alice_blue and make it a macro instead. To make a macro, simply click the Macros button in the Extension Properties window:","もう一つのオプションは<strong>マクロ</strong>の作成です。マクロは<a class=""tooltip"" title=""TITLE_KEY::constant"">定数</a>値、または単一のコードスニペットからなります（マクロについての詳細はこちらを参照してください）。たとえば上記のGML拡張機能の例では、c_alice_blue関数の定義を削除し、マクロに差し替えることができます。マクロを作成するには、拡張機能プロパティのウィンドウにある「マクロ」ボタンをクリックしてください。"
Creating_An_Extension.htm+html.body.p.img[alt]:135-23,{IMG_TXT} Macro Editor,{IMG_TXT} マクロエディタ
Creating_An_Extension.htm+html.body.p:136-3,"The editor here is pretty much self explanatory - you give the name of the macro/constant and the value, or a short line of code. Note that if the macro is a line of code <strong>it will be evaluated every time the macro is called</strong>.",ご覧のように、このエディタではマクロ / 定数の名前、およびその値または短いコード行を設定できます。なお、マクロをコード行にした場合は<strong>マクロが呼び出されるたびに計算が行われます</strong>。
Creating_An_Extension.htm+html.body.p:137-3,"When working with multiple target platforms, it is worth noting that you can create a single extension with only one set of functions/macros which will work on <em>all </em>platforms. This is achieved by adding only one of the link libraries to your game as an extension and placing the other(s) into the list of <strong>Proxy Files</strong> from the <strong>Extension Properties</strong> window. For example, say you have a Windows extension with the <span class=""inline""> <strong>dll </strong></span>"" <span class=""inline"">Haggis.dll</span>"". You would simply replicate this <span class=""inline""> <strong>dll</strong></span> as a Mac <span class=""inline""> <strong>DyLib</strong></span>, naming it "" <span class=""inline""> <strong>libHaggis.dylib</strong></span>"" and making sure that the internal function names match those of the original Windows <span class=""inline""> <strong>dll</strong></span>. This <strong> <span class=""inline"">DyLib</span> </strong>would then be added into the Proxy Files and set to export when the game is run on the Mac target, and GameMaker Studio 2 will automatically use it when the extension functions are called.","複数のターゲットプラットフォームで制作している場合、1つの拡張機能にある関数 / マクロを<em>すべて</em>のプラットフォームで動作させる方法があります。これはリンクライブラリのうちの1つだけをゲームに拡張機能として追加し、それ以外のリンクライブラリを<strong>拡張機能プロパティ</strong>のウィンドウから<strong>代用ファイル</strong>（Proxy Files）に追加することで実現できます。たとえば""<span class=""inline"">Haggis.dll</span>""という<span class=""inline""><strong>dll</strong></span>があるWindowsの拡張機能であれば、<span class=""inline""><strong>dll</strong></span>を複製してからMacの<span class=""inline""><strong>DyLib</strong></span>になるよう名前を""<span class=""inline""><strong>libHaggis.dylib</strong></span>""に変更し、あとは内部関数名を元となるWindowsの<span class=""inline""><strong>dll</strong></span>の関数名に合わせるだけです。この<strong><span class=""inline"">DyLib</span></strong>を代用ファイルとして追加すれば、ゲームをMacターゲットで実行したときに出力させ、外部関数の呼び出し時にこちらを自動で利用できるようになります。"
Creating_An_Extension.htm+html.body.p:142-3,"To add a proxy file, simply click the <img_tag=Add_Argument_Icon:0> button in the Extension Properties window for the extension and browse to the file location. Once it is added you may need to change the extension target to the appropriate module, and when you next run your game it will be included as a proxy for that platform. You can remove proxy files too by clicking the <img_tag=Remove_Argument_Icon:0> button, which will remove the last one in the list each press.",代用ファイルを追加するには、拡張機能プロパティのウィンドウにある<img_tag=Add_Argument_Icon:0>ボタンをクリックし、ファイルの場所を指定してください。追加できたら拡張機能のターゲットを適切なモジュールに変更しておきましょう。ゲームを次に実行すると、そのプラットフォームに代用ファイルとして含まれるようになります。代用ファイルは<img_tag=Remove_Argument_Icon:0>ボタンをクリックすると削除でき、クリックするたびにリストの最後のファイルが削除されます。
Creating_An_Extension.htm+html.body.p:144-3,"Once you have added your proxy files they will be stored in the project files of your game, in the Extensions folder (you can find them easily by right-clicking <img_tag=RMB_Icon:0> on the extension and selecting <em>Open in Explorer</em>), so if you need to edit them, you should edit the copied files that are bundled with the game and not the originals, as GameMaker Studio 2 will be using the ones in the project for compiling.",代用ファイルを追加すると、プロジェクトのファイルとして拡張機能のフォルダに保存されます（拡張機能を右クリック<img_tag=RMB_Icon:0>して「<em>エクスプローラーで開く</em>」を選ぶと実際の場所がわかります）。ファイルを編集する場合は、元のファイルではなくゲームにコピーされたファイルを編集しましょう（コンパイル時に含まれるのはプロジェクト内のファイルであるためです）。
Creating_An_Extension.htm+html.body.p:146-3,"It is very important that your proxy files follow the naming conventions listed below, as GameMaker Studio 2 will parse these names and assign the target module for the file according to its extension and name and will automatically link the files for you. If you do not follow these conventions your game may not work at runtime, as GameMaker Studio 2 will not be able to work out which file to use or it will not load the file properly.",重要な点として、代用ファイルは以下の命名規則どおりの名前にしなくてはなりません。GameMaker Studio 2では名前と拡張子からファイルのターゲットモジュールを割り当て、自動的にファイルをリンクさせるためです。命名規則を守らなければGameMaker Studio 2側でどのファイルを使用するべきか判断できなくなったり、ファイルを適切に読み込めなくなるため、実行したゲームが動作しなくなる恐れがあります。
Creating_An_Extension.htm+html.body.p:148-3,The naming conventions for each target platform are given below:,各ターゲットプラットフォームの命名規則は以下のとおりです。
Creating_An_Extension.htm+html.body.table.tbody.tr.th:153-9,Platform,プラットフォーム
Creating_An_Extension.htm+html.body.table.tbody.tr.th:154-9,Names,名前
Creating_An_Extension.htm+html.body.table.tbody.tr.td:157-9,Windows 32bit Runtime,Windows 32bitランタイム
Creating_An_Extension.htm+html.body.table.tbody.tr.td:158-9,"&lt;<em>Name</em>&gt;.dll, lib&lt;<em>Name</em>&gt;.dll","&lt;<em>Name</em>&gt;.dll, lib&lt;<em>Name</em>&gt;.dll"
Creating_An_Extension.htm+html.body.table.tbody.tr.td:161-9,Windows 64bit Runtime,Windows 64bitランタイム
Creating_An_Extension.htm+html.body.table.tbody.tr.td:162-9,"&lt;N<em>ame</em>&gt;_x64.dll, lib&lt;<em>Name</em>&gt;_x64.dll","&lt;N<em>ame</em>&gt;_x64.dll, lib&lt;<em>Name</em>&gt;_x64.dll"
Creating_An_Extension.htm+html.body.table.tbody.tr.td:165-9,Ubuntu (Linux),Ubuntu (Linux)
Creating_An_Extension.htm+html.body.table.tbody.tr.td:166-9,"&lt;<em>Name</em>&gt;.so, lib&lt;<em>Name</em>&gt;.so, &lt;<em>Name</em>&gt;_linux.so, lib&lt;<em>Name</em>&gt;_linux.so","&lt;<em>Name</em>&gt;.so, lib&lt;<em>Name</em>&gt;.so, &lt;<em>Name</em>&gt;_linux.so, lib&lt;<em>Name</em>&gt;_linux.so"
Creating_An_Extension.htm+html.body.table.tbody.tr.td:169-9,macOS,macOS
Creating_An_Extension.htm+html.body.table.tbody.tr.td:170-9,"&lt;<em>Name</em>&gt;.dylib, lib&lt;Name&gt;.dylib","&lt;<em>Name</em>&gt;.dylib, lib&lt;Name&gt;.dylib"
Creating_An_Extension.htm+html.body.table.tbody.tr.td:173-9,HTML5,HTML5
Creating_An_Extension.htm+html.body.table.tbody.tr.td:174-9,&lt;<em>Name</em>&gt;.js,&lt;<em>Name</em>&gt;.js
Creating_An_Extension.htm+html.body.table.tbody.tr.td:177-9,PS4,PS4
Creating_An_Extension.htm+html.body.table.tbody.tr.td:178-9,"&lt;<em>Name</em>&gt;.prx, lib&lt; <em>Name</em>&gt;.prx, &lt; <em>Name</em>&gt;_ps4.prx, lib&lt; <em>Name</em>&gt;_ps4.prx","&lt;<em>Name</em>&gt;.prx, lib&lt; <em>Name</em>&gt;.prx, &lt; <em>Name</em>&gt;_ps4.prx, lib&lt; <em>Name</em>&gt;_ps4.prx"
Creating_An_Extension.htm+html.body.table.tbody.tr.td:181-9,XBox One,XBox One
Creating_An_Extension.htm+html.body.table.tbody.tr.td:182-9,&lt;<em>Name</em>&gt;_xboxone.dll,&lt;<em>Name</em>&gt;_xboxone.dll
Creating_An_Extension.htm+html.body.p:187-3,"Using the conventions above, you would swap out the <span class=""inline"">&lt;<em>Name</em>&gt;</span> part for the name of the base file that you are adding the proxy files for.","命名規則の<span class=""inline"">&lt;<em>Name</em>&gt;</span>部分は、代用ファイルの元ファイル名に置き換えてください。"
Creating_An_Extension.htm+html.body.div.div.div.div:194-9,"Back: <a href=""../Extensions.htm"">The Extension Editor</a>","戻る: <a href=""../Extensions.htm"">拡張機能エディタ</a>"
Creating_An_Extension.htm+html.body.div.div.div.div:195-9,"Next: <a href=""Android_Extensions.htm"">Android Extensions</a>","次へ: <a href=""Android_Extensions.htm"">Android拡張機能</a>"
Creating_An_Extension.htm+html.body.p:207-1,{SEARCH_RESULT} Page detailing how to create a generic extension,{SEARCH_RESULT} 一般的な拡張機能の作り方についてのページ
Creating_An_Extension.htm+html.body.p:207-72,{INDEX_KEYWORD} Extensions - Creating An Extension,{INDEX_KEYWORD} 拡張機能 - 拡張機能の作り方
Creating_An_Extension.htm.img_tag+Add_Argument_Icon:0,{IMG_TXT} Add Argument Icon,{IMG_TXT} 引数を追加アイコン
Creating_An_Extension.htm.img_tag+Estension_Options_Icon:0,{IMG_TXT} Estension Options Icon,{IMG_TXT} 拡張機能のオプションアイコン
Creating_An_Extension.htm.img_tag+RMB_Icon:0,{IMG_TXT} RMB Icon,{IMG_TXT} 右クリックアイコン
Creating_An_Extension.htm.img_tag+Remove_Argument_Icon:0,{IMG_TXT} Remove Argument Icon,{IMG_TXT} 引数を削除アイコン
