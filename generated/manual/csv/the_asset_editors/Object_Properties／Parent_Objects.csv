Parent_Objects.htm+html.head.title:55-3,Parent Objects,親オブジェクト
Parent_Objects.htm+html.head.title:59-3,Parent Objects,親オブジェクト
Parent_Objects.htm+html.body.div.div.div[title]:73-7,Parent Objects,親オブジェクト
Parent_Objects.htm+html.body.div.div.div:73-7,Parent Objects,親オブジェクト
Parent_Objects.htm+html.body.h1:86-3,Parent Objects,親オブジェクト
Parent_Objects.htm+html.body.p:87-3,"When working with objects in the GameMaker Studio 2 IDE, you can set up <strong>Parent </strong>/ Child hierarchies. This is done by clicking the ""Parent"" button in the object editor and then choosing another object from the Asset Browser to be the ""parent"" of the one being edited:",GameMaker Studio 2のIDEでは、オブジェクトに<strong>親</strong>と子からなる階層を設定することが可能です。このようにオブジェクトエディタの「親」ボタンをクリックし、アセットブラウザから別のオブジェクトを指定すれば、編集しているオブジェクトの親にできます。
Parent_Objects.htm+html.body.p.img[alt]:89-6,{IMG_TXT} Adding A Parent,{IMG_TXT} 親を追加
Parent_Objects.htm+html.body.p:89-3,"So, every object in your game project can have a parent object, but what does this mean? Well, when an object has a parent assigned it can share code, actions and events with that parent. This sharing is called ""inheritance"" and an object that has a parent is called a ""child"" object. Not only can a child share code with its parent, but you can do checks and run code on parent objects and it will automatically include the child objects too, which saves a lot of time and energy.",プロジェクトのあらゆるオブジェクトを親にできますが、具体的にはどのような意味があるのでしょうか？実はオブジェクトに親を割り当てると、コードやアクション、イベントを親と共有できるようになるのです。そうして共有することを「継承」といい、親が与えられたオブジェクトを「子」オブジェクトと呼びます。子は親とコードを共有できるだけでなく、親オブジェクトの確認をしたりコードを実行できるほか、親のコードは子のオブジェクトに自動で追加されるため、手間を大きく減らすことができます。
Parent_Objects.htm+html.body.p:92-3,"If that sounds complicated, then another way to look at a parent object is as a way to ""group"" objects together under the same umbrella and have them share certain things without losing their own unique identity. Maybe that still doesn't clarify things too much, so let's give some examples...",少しややこしいので、言い方を変えてみましょう。親オブジェクトとは、同じ傘に入れられたオブジェクトを1つのグループとしてまとめ、それぞれの独自機能を失うことなく特定の機能を共有するためのものなのです。まだ分かりにくいかもしれませんね、ちょっとした例を出しましょう…
Parent_Objects.htm+html.body.p:94-3,"Say you have a ""player"" object and four different ""enemy"" objects. Now, you want the player to die if he touches any of these four objects and this would normally entail four different collision events with four different sets of actions or code, one for each of the enemy objects. BUT if we make a parent object for all the enemies, then we can create one collision event with the parent object only and it will trigger no matter which one of the four ""child"" enemy objects touch the player. Handy stuff! In the actual GameMaker Studio 2 object you would see something like this:",「プレイヤー」のオブジェクトが1つ、「敵」のオブジェクトが4つあり、プレイヤーが4つの敵オブジェクトのいずれかに触れたら負けにしたいとします。本来なら、プレイヤーのオブジェクトに敵オブジェクトへのCollisionイベントを4つ用意し、それぞれにアクションやコードを追加しなければなりません。ですが敵オブジェクトに親が割り当てられていれば、その親とのCollisionイベントを用意するだけでよく、プレイヤーに触れた敵の「子」オブジェクトが4つのうちのどれであろうとイベントを作動できます。とても便利でしょう！実際のIDEでは、このようにオブジェクトが表示されます。
Parent_Objects.htm+html.body.p.img[alt]:97-6,{IMG_TXT} Parenting For Collisions,{IMG_TXT} 衝突のための親付け
Parent_Objects.htm+html.body.p:97-3,"On the left we have four separate collision events and on the right we have a single collision event, as we have created a ""parent"" object and assigned all the enemy objects to it. Note that a parent object doesn't have to have any events or code in it...",左はCollisionイベントが4つに分けられていますが、右のCollisionイベントは1つだけで、すべての敵オブジェクトには「親」オブジェクトが割り当てられています。なお、親オブジェクトには必ずしもイベント、コードを用意する必要はありません。
Parent_Objects.htm+html.body.p:99-3,"Another example of parenting would be if you have a game where you want to create 10 different looking objects and have them all behave in the same way. For that you would create one parent object and in that have all your behaviour actions or code in the required events, and then you would create your ten objects with no actions or code, but different sprites, and assign them your parent object. Now, when you place these instances in a room they will all behave the same, but look different, since they will ""inherit"" the events of the parent.",さらに親付けの例として、見た目が異なる10のオブジェクトに同じ動作をさせるとしましょう。まず親オブジェクトを用意し、必要なイベントに動作用のアクション、コードを追加します。それから新しくオブジェクトを10作成し、アクションないしコードは追加せず、スプライトだけ別々にしてから親オブジェクトを割り当てます。そうしてインスタンスをルームに置くと、親のイベントを「継承」したことによって同じ動作を、見た目が異なるオブジェクトに取らせることができます。
Parent_Objects.htm+html.body.p:102-3,"Finally you can use parenting to ""mix and match"" events and behaviours. We'll illustrate this with one final example... Say you want two monsters: one that moves up and down, while another that moves left and right, but you also want the two of them to have the same health, shoot at the player and hurt the player if they collide with them. In this case you can see that almost all events should have the same actions except for one or two that govern movement. So, again, we can make one object the parent of the other, but in this case we also define certain events for the child object. These events ""override"" the parent events, meaning that whenever an event for the child object contains actions, these are executed instead of the actions contained in the event of the parent. If you also want to execute the parent event you can call the so-called ""inherited"" event using the function <a href=""../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm""><span class=""inline"">event_inherited()</span></a>, or the DnD™ action <a href=""../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm"">Call Parent Event</a>.","最後に、イベントと動作をうまく組み合わせつつ親付けしてみましょう。以下の画像を例とします。2匹のモンスターを用意し、そのうちの1匹は上下に、もう1匹は左右に移動するものの、ヘルス（体力）は同じで、当たるとダメージを受ける弾をプレイヤーに対して発射するとしましょう。この場合、移動を制御するいくつかのイベントを除き、ほとんどのイベントのアクションは同じということになります。今回も親となるオブジェクトを用意すればいいのですが、それに加えて子オブジェクトのイベントを設定しなければなりません。新しく設定したイベントは親のイベントをオーバーライド（上書き）し、子オブジェクトのイベントにアクションが含まれている場合、親オブジェクトに含まれているアクションではなくそちらが実行されます。親オブジェクトのイベントも実行したい場合は<a href=""../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm""><span class=""inline"">event_inherited()</span></a>関数や、DnD™ アクションの<a href=""../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm"">Call Parent Event</a>によって「継承イベント」を呼び出しましょう。"
Parent_Objects.htm+html.body.p.img[alt]:107-6,{IMG_TXT} Inheriting Events,{IMG_TXT} イベントの継承
Parent_Objects.htm+html.body.p:107-3,"On the left above is the parent object with 5 events in it, and on the right you can see the ""child"" object. The child object also has 5 events in it, but two of them override the inherited events from the parent (the <strong>Step </strong>and <strong>Draw </strong>events) and the other three are greyed out as they are the events inherited from the parent. Inherited events will also have the ""parent override"" icon beside them in the Event Editor:",画像の左はイベントが5つある親オブジェクトで、右はその子オブジェクトです。子オブジェクトにもイベントが5つありますが、親から継承されたイベントのうち2つ（<strong>Step</strong>と<strong>Draw</strong>イベント）はオーバーライドされており、残りの3つはそのまま継承されたイベントのため薄く表示されます。なおイベントエディタでは以下のように、イベントの横に「親をオーバーライド」アイコンがつきます。
Parent_Objects.htm+html.body.p.img[alt]:110-6,{IMG_TXT} Parent Override,{IMG_TXT} 親をオーバーライド
Parent_Objects.htm+html.body.p:110-3,"When you click <img_tag=LMB_Icon:0> on an event that has been inherited, it will open the code editor to show the inherited parent code, but you will not be able to edit this code as you can only edit it in the parent object itself. You can click the right mouse button <img_tag=RMB_Icon:0> on any of the parent events to open the following menu of options:",継承されたイベントを左クリック<img_tag=LMB_Icon:0>すると親のコードをコードエディタで表示できますが、親のオブジェクトから開かないと編集は行えません。イベントを右クリック<img_tag=RMB_Icon:0>した場合は、このようなメニュー項目が表示されます。
Parent_Objects.htm+html.body.p.img[alt]:112-6,{IMG_TXT} Parent Event RMB Menu,{IMG_TXT} 親イベントの右クリックメニュー
Parent_Objects.htm+html.body.p:112-3,"Here you can choose two <strong>Open </strong>the parent event to inspect the code, or you can choose to <strong>Inherit </strong>the event or <strong>Override </strong>the event. If you choose <strong>Inherit </strong>then the code editor will open with the function <a href=""../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm""><span class=""inline"">event_inherited()</span></a> already added to it (or the <a href=""../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm"">Call Parent Event</a> action if using DnD™). Any further code you place in this event will now be run as well as the code that the parent object has. If you choose to <strong>Override </strong>the event, then the code window will also open, only now the <span class=""inline"">event_inherited()</span> function won't be called, so anything you add here will be run <em>instead </em>of the code in the parent object.","<strong>親イベントを開く</strong>を選ぶとコードを確認できるほか、<strong>イベントの継承</strong>、<strong>イベントのオーバーライド</strong>という項目があります。<strong>イベントの継承</strong>を選んだ場合はコードエディタが開き、<a href=""../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm""><span class=""inline"">event_inherited()</span></a>関数 （DnD™ を使用している場合は<a href=""../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm"">Call Parent Event</a>アクション）があらかじめ追加されます。ここでイベントに追記したコードは、親オブジェクトのコードとともに実行可能です。<strong>イベントのオーバーライド</strong>を選んだ場合も同じようにコードウィンドウが開きますが、<span class=""inline"">event_inherited()</span>関数が追加されることはないため、<em></em>追記したコードだけを実行できます。"
Parent_Objects.htm+html.body.p:117-3,"<strong>NOTE</strong>: From the code editor you can quickly navigate to the parent object by clicking the right mouse button <img_tag=RMB_Icon:0> and selecting <strong>Go To Object</strong> from the pop-up menu, or (if the event has been overridden) you can select <strong>Open Inherited Event</strong> to go directly to a code editor with the parent event code in it.",<strong>メモ</strong>: コードエディタを右クリック<img_tag=RMB_Icon:0>してメニューから<strong>オブジェクトに移動</strong>を選ぶと、すぐに親オブジェクトまで移動できます。またイベントがオーバーライドされている場合は<strong>継承したイベントを開く</strong>を選ぶと、親イベントのコードを直接コードエディタで開くことができます。
Parent_Objects.htm+html.body.p:118-3,"Whenever you target a parent object in code, the code will also apply to the ""children"" of the parent object too. This happens when, in an action, you indicate that the action must be applied to instances of a certain object, and in code it happens when you use the <a href=""../../GameMaker_Language/GML_Overview/Language_Features/with.htm""><span class=""inline"">with()</span></a> statement. It will work like this too when you call code functions, like <a href=""../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_position.htm""><span class=""inline"">instance_position()</span></a>, <a href=""../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm""><span class=""inline"">instance_number()</span></a>, etc... where - if you supply a parent object - all instances of the parent <em>and </em>child instances will be included in the checks. Finally, parenting works when you refer to variables in other objects too, like in the above monster example if I set the enemy 1 speed to 10, then the enemy 2 speed will also go to ten as it is a child object of enemy 1.","コードにおいて親オブジェクトを対象とした場合、そのコードは「子」オブジェクトにも適用されます。これはアクションにおいて特定オブジェクトのインスタンスに適用されるよう指示した場合、あるいはコードにおいて<a href=""../../GameMaker_Language/GML_Overview/Language_Features/with.htm""><span class=""inline"">with()</span></a>文を使用した場合でも同じです。また、<a href=""../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_position.htm""><span class=""inline"">instance_position()</span></a>、<a href=""../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm""><span class=""inline"">instance_number()</span></a>といったコード関数を呼び出すとき、親オブジェクトが指定されている場合もこのように動作し、親オブジェクト<em></em>およびすべての子オブジェクトがチェックされます。なお、他のオブジェクトの変数を参照するときにも親付けは有効となり、たとえば上記の例ではEnemy_1の速度を10に設定した場合、その子オブジェクトであるEnemy_2の速度も10となります。"
Parent_Objects.htm+html.body.p:123-3,"It is generally considered good practice in most cases to create one base parent object and have this base object contain all the default behaviour but never use an instance of it in the game. Rather use all child objects and only use the parent in situations like those I have outlined above, for collisions, for referencing variables, etc... You should also realise that parents can have parents too! Obviously you can't create a cycle of ""parent 1 is child of parent 2 is child of parent 1"" but you can create what is called ""object hierarchy"" where ""<em>parent3 </em>is child of <em>parent2 </em>is child of <em>parent1</em>"". This is extremely useful to keep your game structured and you are strongly advised to learn to use this mechanism.",ほとんどの場合では、基本的な動作をすべて含めた親オブジェクトをひな形として利用しつつ、インスタンスとしては扱わないという手法が望ましいとされています。なるべく子オブジェクトだけを利用し、コリジョンの設定や変数の参照など、上述したような場面でのみ親オブジェクトを利用するといいでしょう。さらには覚えておきたい点として、親オブジェクトにも親を割り当てることができます！「親1を親2の子にし、親2を親1の子にする」といったループはもちろん無理ですが、「<em></em>親3を<em></em>親2の子にし、親2を<em></em>親1の子にする」といったオブジェクトの階層化は可能です。ゲームの構造を多層的なものにする上でとても便利ですので、ぜひとも仕組みを覚えてください。
Parent_Objects.htm+html.body.div.div.div.div:133-9,"Back: <a href=""../Objects.htm"">The Object Editor</a>","戻る: <a href=""../Objects.htm"">オブジェクトエディタ</a>"
Parent_Objects.htm+html.body.div.div.div.div:134-9,"Next: <a href=""Physics_Objects.htm"">Physics Objects</a>","次へ: <a href=""Physics_Objects.htm"">物理オブジェクト</a>"
Parent_Objects.htm+html.body.p:150-1,{SEARCH_RESULT} Page detailing object parenting,{SEARCH_RESULT} オブジェクトの親付けの詳細ページ
Parent_Objects.htm+html.body.p:150-55,{INDEX_KEYWORD} Objects - Parents,{INDEX_KEYWORD} オブジェクト - 親
Parent_Objects.htm.img_tag+LMB_Icon:0,{IMG_TXT} LMB Icon,{IMG_TXT} 左クリックアイコン
Parent_Objects.htm.img_tag+RMB_Icon:0,{IMG_TXT} RMB Icon,{IMG_TXT} 右クリックアイコン
