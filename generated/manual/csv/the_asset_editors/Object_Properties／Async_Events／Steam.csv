Steam.htm+html.head.title:55-3,Steam,Steam
Steam.htm+html.head.title:59-3,Steam,Steam
Steam.htm+html.body.div.div.div[title]:73-7,Steam,Steam
Steam.htm+html.body.div.div.div:73-7,Steam,Steam
Steam.htm+html.body.h1:86-3,Steam,Steam
Steam.htm+html.body.p.img[alt]:87-6,{IMG_TXT} Steam Event,{IMG_TXT} Steamイベント
Steam.htm+html.body.p:87-3,"This event can only be triggered by <a class=""tooltip"" title=""TITLE_KEY::callback"">callback</a><span class=""glossextra""></span> from some of the <a href=""../../../GameMaker_Language/GML_Reference/Steam/Steam.htm"">Steam API</a> functions and will return a <a href=""../../../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm"">DS Map</a> stored in the variable <a href=""../../../GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/async_load.htm""><span class=""inline"">async_load</span></a>, containing different key/value pairs depending on the call-back from the function that has triggered the event. The map will always contain the key ""<span class=""inline"">event_type</span>"" which can then be parsed to find the type of function that triggered the event and change the code required to suit.","一部の<a href=""../../../GameMaker_Language/GML_Reference/Steam/Steam.htm"">Steam API</a>関数からの<a class=""tooltip"" title=""TITLE_KEY::callback"">コールバック</a><span class=""glossextra""></span>によってのみ作動するイベントで、<a href=""../../../GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/async_load.htm""><span class=""inline"">async_load</span></a>変数に保存される<a href=""../../../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm"">DSマップ</a>が返されます。このマップには、イベントを作動させた関数のコールバックに応じたキー/値ペアが含まれます。また、イベントを作動させた関数のタイプを解析し、必要に応じてコードを変更させるための""<span class=""inline"">event_type</span>""キーは必ず追加されます。"
Steam.htm+html.body.p:91-3,"When calling any function that triggers this event, it will generate a unique async ID value which should be stored in a variable and checked, as the async_load map will always contain an ID key which you can then parse and ensure that you are responding to the correct event. In fact, the map will always hold the following keys, regardless of the Steam function used to generate the async response:",イベントを作動させる関数が呼び出されると、変数に保存してチェックされる固有の非同期IDが生成されます。async_loadマップには必ずIDキーが追加されるため、このキーを解析すれば適切なイベントに応答することができます。さらに、このマップにはどのSteam関数によって非同期応答が生じたかを問わず、以下のキーも必ず保持されます。
Steam.htm+html.body.ul.li:94-5,"""<span class=""inline"">id</span>"" - The async ID returned by the function that triggered the event","""<span class=""inline"">id</span>"" - イベントを作動させた関数から返される非同期IDです。"
Steam.htm+html.body.ul.li:95-5,"""<span class=""inline"">result</span>"" - The result of the operation (a real value). This will either be the GML constant <span class=""inline"">ugc_result_success</span> or some other real number. You should check for this constant to ensure that the call was successful, and if another value is returned something has not worked correctly. The rest of the possible values returned are shown as the result of the Steam ""<span class=""inline"">EResult</span>"" value and you should see <span class=""inline"">steamclientpublic.h</span> in the SDK headers for all possible values.","""<span class=""inline"">result</span>"" - 処理の結果となる実数値です。<span class=""inline"">ugc_result_success<span class=""inline""> GML定数、あるいはそれ以外の実数となります。この定数をチェックし、呼び出しに成功したかを確認しなければなりません。異なる値が返された場合は正常に動作していません。それ以外に返される値はSteamの""<span class=""inline"">EResult</span>""値の結果として表示されているため、SDKヘッダーの<span class=""inline"">steamclientpublic.h</span>からそれぞれの値を確認しておいてください。"
Steam.htm+html.body.ul.li:98-5,"""<span class=""inline"">event_type</span>"" - A string denoting the type of event (see below for the details)","""<span class=""inline"">event_type</span>"" - イベントのタイプを示す文字列です（詳しくは以下を参照）。"
Steam.htm+html.body.h2:101-3,Uploading Data
Steam.htm+html.body.p:102-3,"When using the Steam functions for uploading a leaderboard (either <a href=""../../../GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_upload_score.htm""><span class=""inline"">steam_upload_score()</span></a> or <a href=""../../../GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_upload_score_buffer.htm""><span class=""inline"">steam_upload_score_buffer()</span></a>) the returned DS map will have the following key/value pairs:"
Steam.htm+html.body.ul.li:105-5,"""<span class=""inline"">event_type</span>"" - This key will hold the value ""<span class=""inline"">leaderboard_upload</span>"""
Steam.htm+html.body.ul.li:106-5,"""<span class=""inline"">post_id</span>"" - This key should match the ID value returned by the upload calling function"
Steam.htm+html.body.ul.li:107-5,"""<span class=""inline"">lb_name</span>"" - This key holds the name of the leaderboard which was posted to"
Steam.htm+html.body.ul.li:108-5,"""<span class=""inline"">success</span>"" - Will be 1 if the post succeeded, 0 failed"
Steam.htm+html.body.ul.li:109-5,"""<span class=""inline"">updated</span>"" - Will be 1 if the leaderboard score was actually updated (ie: the new score was better) or 0 otherwise"
Steam.htm+html.body.ul.li:110-5,"""<span class=""inline"">score</span>"" - This key holds the score which was posted"
Steam.htm+html.body.p:112-3,You can see examples of this on the pages for the score upload functions.
Steam.htm+html.body.h2:114-3,Downloading Leaderboards
Steam.htm+html.body.p:115-3,"When using the Steam functions for downloading a leaderboard (<a href=""../../../GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_download_scores.htm""><span class=""inline"">steam_download_scores()</span></a>, <a href=""../../../GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_download_scores_around_user.htm""><span class=""inline"">steam_download_scores_around_user()</span></a> or <a href=""../../../GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_download_friends_scores.htm""><span class=""inline"">steam_download_friends_scores()</span></a>) the returned DS map will have the following key/value pairs:"
Steam.htm+html.body.ul.li:118-5,"""<span class=""inline"">event_type</span>"" - This key will hold the value ""<span class=""inline"">leaderboard_download</span>"""
Steam.htm+html.body.ul.li:119-5,"""<span class=""inline"">id</span>"" - This key should match the ID value returned by the download calling function"
Steam.htm+html.body.ul.li:120-5,"""<span class=""inline"">status</span>"" - The status of the callback, where -1 equals a failure or that no results were returned, and 0 equals a success."
Steam.htm+html.body.ul.li:121-5,"""<span class=""inline"">lb_name</span>"" - This key holds the name of the leaderboard which was posted to"
Steam.htm+html.body.ul.li:122-5,"""<span class=""inline"">numEntries</span>"" - The number of ""rows"" of leaderboard data that is being returned."
Steam.htm+html.body.ul.li:123-5,"""<span class=""inline"">entries</span>"" - A JSON object string that contains another DS map, which will either contain the key ""<span class=""inline"">default</span>"" (signifying that no results are contained within) or the key "" <span class=""inline"">entries</span>"", which you can then get the value of. This returned value for ""<span class=""inline"">entries</span>"" will be a <a href=""../../../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm"">DS list</a> containing each of the ranks from the leaderboard, where each entry in the list will itself reference another DS Map which will contain the keys ""<span class=""inline"">name</span>"", ""<span class=""inline"">score</span>"" and "" <span class=""inline"">rank</span>"", and it may also contain a ""<span class=""inline"">data</span>"" key depending on the function used to upload."
Steam.htm+html.body.p:127-3,"We will show an example of how downloading score data works by requesting the top ten ranking for the given leaderboard and parsing its results in the Steam Async Event (for uploading examples, please see the appropriate function pages). To start with we need to request the scores with the following code:"
Steam.htm+html.body.p:129-3,"{ANY_CODE} score_get = steam_download_scores(""Game Scores"", 1, 10);"
Steam.htm+html.body.p:130-3,"This will send off a request to the Steam Server for the scores from the leaderboard ""Game Scores"", storing the async ID of the request in the variable ""<span class=""inline"">score_get</span>"". This will then be handled in the <strong>Steam Async Event</strong> in the following way:"
Steam.htm+html.body.p:131-3,"{ANY_CODE} var async_id = ds_map_find_value(async_load, ""id"");<br /> if async_id == score_get<br /> {nbsp_x1} {nbsp_x1}{<br /> {nbsp_x1} {nbsp_x1}var entries = ds_map_find_value(async_load, ""entries"");<br /> {nbsp_x1} {nbsp_x1}var map = json_decode(entries);<br /> {nbsp_x1} {nbsp_x1}if ds_map_exists(map, ""default"")<br /> {nbsp_x1} {nbsp_x1} {<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} ds_map_destroy(map);<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} exit;<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} }<br /> {nbsp_x1} {nbsp_x1}else<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} var list = ds_map_find_value(map, ""entries"");<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} var len = ds_list_size(list);<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} var entry;<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} for(var i = 0; i &lt; len; i++;)<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1}{<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1}entry = ds_list_find_value(list, i );<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1}steam_name[i] = ds_map_find_value(entry, ""name"");<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1}steam_score[i] = ds_map_find_value(entry, ""score"");<br /> {nbsp_x1} {nbsp_x1}steam_rank[i] = ds_map_find_value(entry, ""rank"");<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1}if (ds_map_exists(entry, ""data""))<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} var data = ds_map_find_value(entry, ""data"");<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} var buffId = buffer_base64_decode(data);<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} var message = buffer_read(buffId, buffer_string);<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} show_debug_message( "" -- attached message: "" + string(message));<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} buffer_delete(buffId);<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} }<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1}ds_map_destroy(entry);<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1}}<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} ds_list_destroy(list)<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} }<br /> {nbsp_x1} {nbsp_x1}ds_map_destroy(map)<br /> {nbsp_x1} {nbsp_x1}}"
Steam.htm+html.body.p:134-3,"What we do here is first check the ""<span class=""inline"">id</span>"" key of the special async_load map. If this value is the same as the value of the original callback function (stored in the ""<span class=""inline"">score_get</span>"" variable) we then continue to process the data. The first thing we do is parse the <span class=""inline"">async_load</span> DS Map for the key ""<span class=""inline"">entries</span>"" which will contain a JSON object containing the leaderboard data. This JSON object is then decoded (see <a href=""../../../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm""><span class=""inline"">json_decode()</span></a>) as another DS Map, and this new map ID is stored in the variable ""<span class=""inline"">map</span>""."
Steam.htm+html.body.p:138-3,"This map is checked for the key ""<span class=""inline"">default</span>"" and if that is found then the map is destroyed and the event is exited. If no ""<span class=""inline"">default</span>"" key is found, the code will then parse the map to extract the necessary information about the leaderboard, by first extracting a DS List from the ""<span class=""inline"">entries</span>"" key of the DS Map, and then looping through each entry of the list to get another DS Map with the <span class=""inline"">name</span>, <span class=""inline"">score</span> and <span class=""inline"">rank</span> of each entry. These values are then stored in arrays and then we check to see if there is an additional ""<span class=""inline"">data</span>"" key. If there is (ie: the score was uploaded with an additional data package) then we also parse that and send it to the compiler console for debugging, before destroying the buffer and then continuing on to destroy the map. Note that if the "" <span class=""inline"">data</span>"" key is included, it needs to be decoded using the <a href=""../../../GameMaker_Language/GML_Reference/Buffers/buffer_base64_decode.htm""><span class=""inline"">buffer_base64_decode()</span></a> function before it can be correctly read."
Steam.htm+html.body.p:144-3,"Once the loop has finished, the entries list is destroyed as is the map that it was taken from. There is no need to destroy the <span class=""inline"">async_load</span> DS Map as this is handled for you by GameMaker Studio 2."
Steam.htm+html.body.h2:146-3,Downloading UGC (user Generated Content)
Steam.htm+html.body.p:147-3,"When using the Steam functions for downloading <a href=""../../../GameMaker_Language/GML_Reference/Steam/Steam_UGC/Steam_UGC.htm"">User Generated Content (UGC)</a>, a number of them will trigger this event. However, each function will generate an <span class=""inline"">async_load</span> DS Map with differing key/value pairs (although they will always contain the general ""<span class=""inline"">id</span>"", ""<span class=""inline"">result</span>"" and ""<span class=""inline"">event_type</span>"" keys), so please see the page specific to the function being used for details and examples."
Steam.htm+html.body.h2:151-3,Unique UGC Events
Steam.htm+html.body.p:152-3,"The Steam Async Event can also be triggered when a user subscribes to an item outside of the game - for example, they tab away to a browser and subscribe to a new item then tab back to the game. In these cases the <span class=""inline"">async_load</span> map will only contain the following details (and none of the default values listed at the top of this page):"
Steam.htm+html.body.ul.li:154-5,"""<span class=""inline"">event_type</span>"" - This key will hold the constant <span class=""inline"">ugc_item_installed</span>."
Steam.htm+html.body.ul.li:155-5,"""<span class=""inline"">published_file_id</span>"" - the ID of the newly installed UGC item (you can use the function <a href=""../../../GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_get_item_update_info.htm""><span class=""inline"">steam_ugc_get_item_install_info()</span></a> to get the path to the installed item)"
Steam.htm+html.body.p:158-3,"The Steam Async event can also be triggered when a workshop item is subscribed to - either from within the app, or externally from a workshop browser - and in these cases the <span class=""inline"">async_load</span> map will contain the following key/value pairs:"
Steam.htm+html.body.ul.li:161-5,"""<span class=""inline"">event_type</span>"" - This key will hold the constant <span class=""inline"">ugc_item_subscribed</span>."
Steam.htm+html.body.ul.li:162-5,"""<span class=""inline"">published_file_id</span>"" : This key has the published file ID of the newly subscribed item"
Steam.htm+html.body.p:164-3,"The event will be triggered should any item be un-subscribed too, with the DS map holding the following:"
Steam.htm+html.body.ul.li:166-5,"""<span class=""inline"">event_type</span>"" - This key will hold the constant <span class=""inline"">ugc_item_unsubscribed</span>."
Steam.htm+html.body.ul.li:167-5,"""<span class=""inline"">published_file_id</span>"" : This key has the published file ID of the un-subscribed item"
Steam.htm+html.body.div.div.div.div:175-9,"Back: <a href=""../Async_Events.htm"">Async Events</a>"
Steam.htm+html.body.div.div.div.div:176-9,"Next: <a href=""System.htm"">System</a>"
Steam.htm+html.body.p:194-1,{SEARCH_RESULT} Page detailing the Steam async event.
Steam.htm+html.body.p:194-61,{INDEX_KEYWORD} Objects - Async Steam Event
