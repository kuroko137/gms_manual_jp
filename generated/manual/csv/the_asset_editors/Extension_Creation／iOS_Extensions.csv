iOS_Extensions.htm+html.head.title:55-3,iOS Extensions
iOS_Extensions.htm+html.head.title:59-3,iOS Extensions
iOS_Extensions.htm+html.body.div.div.div[title]:73-7,iOS Extensions
iOS_Extensions.htm+html.body.div.div.div:73-7,iOS Extensions
iOS_Extensions.htm+html.body.h1:86-3,iOS / tvOS Extensions
iOS_Extensions.htm+html.body.p:87-3,"To create an extension for iOS or tvOS you have to do it in two parts. The first part would be to add the extension itself, along with the required files etc... and the second is to create the functions and macros/constants that the extension requires. The functions and constants are added using <strong>placeholder </strong>files to group them together, so you'd add a placeholder and then define the functions and macros as explained in the section <a href=""Creating_An_Extension.htm"">here</a>. To add the rest of the files though you need to first tick the <em>iOS </em>and/or the <em>tvOS </em>check-box in the <strong>Additional Features</strong> section of the editor to open up the relevant <strong>Extension Properties</strong> window (the image below shows the iOS properties window, but the tvOS window is exactly the same):"
iOS_Extensions.htm+html.body.p.img[alt]:91-23,{IMG_TXT} iOS Editor
iOS_Extensions.htm+html.body.p:92-3,Here you give the following details:
iOS_Extensions.htm+html.body.ul.li:94-5,<strong>Linker Flags / Compiler Flags</strong>: Some frameworks and third party SDKs require the addition of extra linker flags and compiler flags to work which can be specified here (see the documentation that accompanies the SDK or framework in question for details).
iOS_Extensions.htm+html.body.ul.li:96-5,"<strong>Class Name</strong>: Your extension can have multiple classes, with each class having its own functions and constants, so you should give it a name that reflects its purpose"
iOS_Extensions.htm+html.body.ul.li:97-5,<strong>App Delegate Class Name</strong>: The name of your custom app delegate class. Setting this allows the extension to override/extend core app functionality. To use this feature you need to do the following:
iOS_Extensions.htm+html.body.ul.li.ol.li:99-9,"Ensure that the delegate source files have the same name as the delegate class (e.g. <span class=""inline"">@interface MyCustomAppDelegate</span> should be defined in "" <span class=""inline"">MyCustomAppDelegate.h</span>"")"
iOS_Extensions.htm+html.body.ul.li.ol.li:100-9,"Add the <span class=""inline"">${YYExtAppDelegateIncludes}</span> environment variable at the top of your app delegate header file. This will be replaced at compile-time with the relevant include files for the parent delegate class."
iOS_Extensions.htm+html.body.ul.li.ol.li:101-9,"Use the <span class=""inline"">${YYExtAppDelegateBaseClass}</span> environment variable as the base class for your custom app delegate. This will be replaced at compile-time with the correct base delegate class.<br /> <br /> To ensure your extension works with any other extensions that use custom app delegates, you should call any base class methods from overridden methods in your child class. Before calling the superclass method, you need to make sure it is implemented in the class hierarchy to avoid errors, for e.g.:"
iOS_Extensions.htm+html.body.ul.li.p:105-7,{ANY_CODE} - (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions<br /> { <br /> {nbsp_x1} {nbsp_x1} // Check if any superclasses implement this method and call it<br /> {nbsp_x1} {nbsp_x1} if([[self superclass] instancesRespondToSelector:@selector(application:willFinishLaunchingWithOptions:)])<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} return [super application:application willFinishLaunchingWithOptions:launchOptions];<br /> {nbsp_x1} {nbsp_x1} else<br /> {nbsp_x1} {nbsp_x1} {nbsp_x1} {nbsp_x1} return TRUE;<br /> }
iOS_Extensions.htm+html.body.ul.li:109-5,"<strong>System Frameworks</strong>: Here you can add in any iOS system <a class=""tooltip"" title=""TITLE_KEY::framework"">framework</a><span class=""glossextra""></span> to your extension. These are added by clicking the <img_tag=Add_Argument_Icon:0> button which will add a placeholder framework, which you can then edit by slow clicking <img_tag=LMB_Icon:0> on it. You can find out more about available system frameworks <a href=""https://developer{-dot-}apple{-dot-}com/documentation/"">here</a>. To remove a system framework, simply select it and then click the <img_tag=Remove_Argument_Icon:0> button."
iOS_Extensions.htm+html.body.ul.li:110-5,"<strong>Inject to Info.plist</strong>: Here you can add any code to be a injected into the <span class=""inline"">info.plist</span> file."
iOS_Extensions.htm+html.body.ul.li:111-5,"<strong>3rd Party Frameworks and Bundles</strong>: This section is for adding third party and SDK bundles. As with system frame works you click the <img_tag=Add_Argument_Icon:1> button to add them and then slow click <img_tag=LMB_Icon:1> to edit, and selecting them then clicking <img_tag=Remove_Argument_Icon:1> will remove them (see the documentation that came with your chosen SDK for info on the framework name). If the framework/SDK bundle is on your development Mac then you need to add the path into "" <em>Enter framework path on Mac</em>"" and click the <img_tag=Add_Argument_Icon:2> button, or if the SDK or source code is on your PC use the <em>Add Source</em> button."
iOS_Extensions.htm+html.body.ul.li:113-5,"<strong>CocoaPods</strong>: Here you can give the name of any CocoaPods that the extension is going to use instead of (or as well as) any SDKs and frameworks that have been added. Note that there is a Game Option <a href=""../../Settings/Game_Options/iOS.htm"">for iOS</a> and <a href=""../../Settings/Game_Options/tvOS.htm"">for tvOS</a> to add a Podfile to GameMaker Studio2 which is required if you are adding CocoaPods in this secton."
iOS_Extensions.htm+html.body.ul.li:114-5,"<strong>CocoaPods Dependencies</strong>: This section is where you can list the different dependencies required by the CocoaPods added in the previous section. Note that there is a Game Option <a href=""../../Settings/Game_Options/iOS.htm"">for iOS</a> and <a href=""../../Settings/Game_Options/tvOS.htm"">for tvOS</a> to add a Podfile.lock to GameMaker Studio2 which is required if you are adding CocoaPod Dependencies in this secton."
iOS_Extensions.htm+html.body.p:116-3,"If your extension has had any System Frameworks or 3rd Party Frameworks added, these will now be listed in the <strong>Extension Properties </strong>window, with each one having a check-box beside it. If you mark the check-box, you are enabling weak linking, which is useful should you need to ""over-ride"" any symbol from the included library with your own value, but it should be noted that doing so will slow linking down."
iOS_Extensions.htm+html.body.p:118-3,"For more information on creating iOS and tvOS extensions, please see the <a href=""https://help{-dot-}yoyogames{-dot-}com/hc/en-us/articles/360012504971-iOS-and-Android-Creating-A-Simple-Extension"">YoYo Games Knowledge Base</a>, and for information on using CocoaPods in extensions, please see the following guide:"
iOS_Extensions.htm+html.body.ul.li:121-5,iOS and tvOS: Using Cocoa Pods
iOS_Extensions.htm+html.body.div.div.div.div:129-9,"Back: <a href=""../Extensions.htm"">The Extension Editor</a>"
iOS_Extensions.htm+html.body.div.div.div.div:130-9,"Next: <a href=""Creating_An_Extension.htm"">Creating An Extension</a>"
iOS_Extensions.htm+html.body.p:143-1,{SEARCH_RESULT} Page detailing how iOS extensions work
iOS_Extensions.htm+html.body.p:143-62,{INDEX_KEYWORD} Extensions - Creating iOS / tvOS Extensions
iOS_Extensions.htm.img_tag+Add_Argument_Icon:0,{IMG_TXT} Add Argument Icon
iOS_Extensions.htm.img_tag+Add_Argument_Icon:1,{IMG_TXT} Add Argument Icon
iOS_Extensions.htm.img_tag+Add_Argument_Icon:2,{IMG_TXT} Add Argument Icon
iOS_Extensions.htm.img_tag+LMB_Icon:0,{IMG_TXT} LMB Icon
iOS_Extensions.htm.img_tag+LMB_Icon:1,{IMG_TXT} LMB Icon
iOS_Extensions.htm.img_tag+Remove_Argument_Icon:0,{IMG_TXT} Remove Argument Icon
iOS_Extensions.htm.img_tag+Remove_Argument_Icon:1,{IMG_TXT} Remove Argument Icon
