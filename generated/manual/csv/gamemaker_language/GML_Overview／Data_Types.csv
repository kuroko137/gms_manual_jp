Data_Types.htm+html.head.title:55-3,Data Types
Data_Types.htm+html.head.title:59-3,Data Types
Data_Types.htm+html.body.div.div.div[title]:73-7,Data Types
Data_Types.htm+html.body.div.div.div:73-7,Data Types
Data_Types.htm+html.body.h1:86-3,Data Types
Data_Types.htm+html.body.p:87-3,"In previous sections we have covered <a href=""Variables_And_Variable_Scope.htm"">variables and their scoping rules</a> but little has been said about the different <b>data types</b> that a variable can store. Therefore this section explains the different types and what they can be used for."
Data_Types.htm+html.body.p:89-3,"Before continuing, let's just briefly explain what we mean by ""data types"". When you create a variable it can be used to hold information, and when you call a function, it can also stored returned information. However this information can come in various ""flavours"" - for example, it can be a <em>real number</em> or it can be a <em>string</em>. These different types of values being used are called <b>data types</b> and when using <i>the </i>GameMaker Language they can be any of the following:"
Data_Types.htm+html.body.p:93-3,"<span data-open-text=""true"">Strings</span><span data-close-text=""true"">Strings</span>"
Data_Types.htm+html.body.div.p:95-5,"A string is simply any text that has been placed in quotation marks ""..."". You can perform certain operations on strings, like add two strings together to create a longer string (concatenation) and you can also change the string properties and even extract real numbers from it. For more information on strings and the string functions see: <a href=""../GML_Reference/Strings/Strings.htm"">GML Reference - Strings</a>."
Data_Types.htm+html.body.p:98-3,"<span data-open-text=""true"">Real Numbers</span><span data-close-text=""true"">Real Numbers</span>"
Data_Types.htm+html.body.div.p:100-5,"Real numbers are any value that is not a string, nor any of the other possible data types. So, 124, 45639.566546456, 0, -45.5 etc... are all examples of real numbers. All real numbers are stored as double-precision floating point values or integer values (either 32 bit integers - <span class=""inline"">int32</span> - or 64 bit integers - <span class=""inline"">int64</span>), and the compiler will optimise where possible (for example, 0.0 will be optimised to the integer value of 0). When dealing with any value that is not an integer, you may experience slight rounding errors due to the nature of floating point maths. For more information on this and other number related functions, please see: <a href=""../GML_Reference/Maths_And_Numbers/Number_Functions/Number_Functions.htm"">GML Reference - Number Functions</a>."
Data_Types.htm+html.body.div.p:103-5,"<b>NOTE</b>: On the <b>HTML5</b> target, all real numbers are doubles."
Data_Types.htm+html.body.div.p:104-5,"Note that while created variables in GameMaker Studio 2 are all stored as double-precision floating point numbers or integers, you can still use other formats when dealing with extensions. These can be passed into GameMaker Studio 2 from an extension and then checked using the appropriate <tt>is_*()</tt> function, a list of which can be found <a href=""../GML_Reference/Variable_Functions/Variable_Functions.htm"">here</a>."
Data_Types.htm+html.body.p:108-3,"<span data-open-text=""true"">Arrays</span><span data-close-text=""true"">Arrays</span>"
Data_Types.htm+html.body.div.p:110-5,"An array is a special data type that can be used to hold multiple values. You assign the array to a variable, and then ""fill in"" different indices of the array with values. This array can then be passed through to scripts and functions on a pass-by-reference basis, however should you modify the passed array, it will then become a copy of the original array and so will need to be returned back to the original variable for the array to be updated. For more information on arrays, please see: <a href=""Arrays.htm"">GML Overview - Arrays</a>."
Data_Types.htm+html.body.p:113-3,"<span data-open-text=""true"">Structs</span><span data-close-text=""true"">Structs</span>"
Data_Types.htm+html.body.div.p:115-5,"A struct (sometimes called a ""lightweight object"") is a raw data structure that acts as a container for variables of all data types. You assign a struct to a variable and in the struct you can then define further variables and these can then be read from or written to as required. For more detailed information on structs, please see the section <a href=""Structs.htm"">GML Overview - Structs</a>."
Data_Types.htm+html.body.p:118-3,"<span data-open-text=""true"">Method Variables</span><span data-close-text=""true"">Method Variables</span>"
Data_Types.htm+html.body.div.p:120-5,"A method variable is a variable that has been assigned a function and it can be used exactly the same as you would use a GML runtime function. For more detailed information, please see the section <a href=""Method_Variables.htm"">Method Variables</a>."
Data_Types.htm+html.body.p:123-3,"<span data-open-text=""true"">Hexadecimal Values</span><span data-close-text=""true"">Hexadecimal Values</span>"
Data_Types.htm+html.body.div.p:125-5,"GameMaker Studio 2 will can accept <b>hexadecimal literals</b> as legitimate values. Hexadecimal values are especially common when working with colours, but can be used anywhere a positive integer value is required. Note that hexadecimal values can be formatted in either of the following two ways, where <span class=""inline"">&lt;<em>abcd</em>&gt;</span> would be the actual hex value:"
Data_Types.htm+html.body.div.p:127-5,"{ANY_CODE} <span style=""background-color: transparent;"">$&lt;<em>abcd</em>&gt;</span><span style=""background-color: transparent;""></span><br /> 0x&lt; <em>abcd</em>&gt;"
Data_Types.htm+html.body.div.p:129-5,"For example, the following values can be expressed as hexadecimal as shown:"
Data_Types.htm+html.body.div.p:130-5,{ANY_CODE} 11406 = $2c8e = 0x2c8e<br /> 16777215 = $ffffff = 0xffffff
Data_Types.htm+html.body.p:133-3,"<span data-open-text=""true"">Boolean</span><span data-close-text=""true"">Boolean</span>"
Data_Types.htm+html.body.div.p:135-5,"A boolean is simply a value that can either be <tt>true</tt> or <tt>false</tt>. Note that currently GameMaker Studio 2 will interpret a real number equal to or below 0.5 as a <tt>false</tt> value, and any real number greater than 0.5 as being <tt>true</tt>. This does <i>not</i> mean however that you should be checking 1 and 0 (or any other real number) for true and false, as you are also provided with the <b>constants</b> <tt>true</tt> and <tt>false</tt> which should always be used in your code to prevent any issues should real boolean data types be added in a future update."
Data_Types.htm+html.body.div.p:138-5,You can convert any real number into an implicitly boolean value using the following function:
Data_Types.htm+html.body.div.ul.li:140-7,bool
Data_Types.htm+html.body.p:144-3,"<span data-open-text=""true"">Pointer</span><span data-close-text=""true"">Pointer</span>"
Data_Types.htm+html.body.div.p:146-5,"A pointer is a data type that ""points"" to a memory location. You cannot do operations on a pointer and it is used only for some very specific functions, like getting a texture or buffer address from memory for another function. For examples of functions that return a pointer you can see <a href=""../GML_Reference/Buffers/buffer_get_address.htm""><tt>buffer_get_address()</tt></a> or <a href=""../GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_texture.htm""><tt>sprite_get_texture()</tt></a>."
Data_Types.htm+html.body.div.p:148-5,"There is also a function to check if a value is a pointer (see ""<b>Checking Data Types</b>"", below) and a function to convert a value into a pointer:"
Data_Types.htm+html.body.div.ul.li:150-7,ptr
Data_Types.htm+html.body.div.p:152-5,You may also use (and get returned) the following built in constants when using pointers:
Data_Types.htm+html.body.div.table.tbody.tr.th:157-11,Constant
Data_Types.htm+html.body.div.table.tbody.tr.th:158-11,Description
Data_Types.htm+html.body.div.table.tbody.tr.td:161-11,pointer_null
Data_Types.htm+html.body.div.table.tbody.tr.td:162-11,This constant indicates that the pointer is not pointing to anything meaningful (the same as <tt>NULL</tt> in C++ or null in C#)
Data_Types.htm+html.body.div.table.tbody.tr.td:165-11,pointer_invalid
Data_Types.htm+html.body.div.table.tbody.tr.td:166-11,This constant simply means that the value is not a valid pointer
Data_Types.htm+html.body.p:172-3,"<span data-open-text=""true"">Enum</span><span data-close-text=""true"">Enum</span>"
Data_Types.htm+html.body.div.p:174-5,"An enum is an ""enumerator"", and it essentially permits you to create your own limited data type with a list of constant values. Enums are explained in depth on the page for <a href=""Variables/Constants.htm"">Constants</a>."
Data_Types.htm+html.body.p:177-3,"<span data-open-text=""true"">Undefined</span><span data-close-text=""true"">Undefined</span>"
Data_Types.htm+html.body.div.p:179-5,"An undefined value (also known as a ""null"" value) is one where an expression doesn't have a correct value, although it is syntactically correct, and so must return <i>something</i>. For example, say you have a <a href=""../GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm"">DS map</a> and use the function <a href=""../GML_Reference/Data_Structures/DS_Maps/ds_map_find_value.htm""><tt>ds_map_find_value()</tt></a>. Now, what happens when the map does not have the value being looked for? Well, since the function is correctly formatted, and the issue is that the no such value exists, then it would return the <b>constant</b> <tt>undefined</tt>, and you can check for this constant as you would check for <tt>true</tt> or any other value."
Data_Types.htm+html.body.p:182-3,"<span data-open-text=""true"">NaN</span><span data-close-text=""true"">NaN</span>"
Data_Types.htm+html.body.div.p:184-5,"<tt>NaN</tt> stands for ""not a number"", and is a constant that can be returned when the compiler cannot evaluate the results of an operation as a number. For example, 0/0 cannot be defined as a real number, and is therefore represented by <tt>NaN</tt>, or the square root of a negative number - which is considered an ""imaginary"" number - cannot be represented as a real number, and so is represented by <tt>NaN</tt>."
Data_Types.htm+html.body.p:187-3,"<span data-open-text=""true"">Infinity</span><span data-close-text=""true"">Infinity</span>"
Data_Types.htm+html.body.div.p:189-5,"The constant <tt>infinity</tt> refers to a number that is considered infinite, such as the result you would get when dividing any floating point value by zero, eg: 1.0/0."
Data_Types.htm+html.body.p:192-3,You can check the data type of any variable using the functions listed on the following the page:
Data_Types.htm+html.body.ul.li:194-5,Variable Functions
Data_Types.htm+html.body.p:196-3,You can also find arithmetic type tables that show the results of different operations using mixed variable data types here:
Data_Types.htm+html.body.ul.li:198-5,Type Tables
Data_Types.htm+html.body.div.div.div.div:206-9,"Back: <a href=""GML_Overview.htm"">GML Overview</a>"
Data_Types.htm+html.body.div.div.div.div:207-9,"Next: <a href=""Instance_Keywords.htm"">Instance Keywords</a>"
Data_Types.htm+html.body.p:258-1,{SEARCH_RESULT} Page outlining Data Types
Data_Types.htm+html.body.p:258-49,{INDEX_KEYWORD} Data Types
