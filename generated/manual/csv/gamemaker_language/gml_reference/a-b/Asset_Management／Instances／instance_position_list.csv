instance_position_list.htm+html.head.title:55-3,instance_position_list
instance_position_list.htm+html.head.title:59-3,instance_position_list
instance_position_list.htm+html.body.div.div.div[title]:73-7,instance_position_list
instance_position_list.htm+html.body.div.div.div:73-7,instance_position_list
instance_position_list.htm+html.body.h1:86-3,instance_position_list
instance_position_list.htm+html.body.p:87-3,"With this function you can check a position for a collision with all instances of another object. When you use this you are checking a single point in the room for all instances of an object, and the check will be done against the bounding box of the instances or against the mask of the instances if that object has precise collisions checked."
instance_position_list.htm+html.body.p:89-3,"The function will populate a (previously created) <a href=""../../Data_Structures/DS_Lists/DS_Lists.htm"">DS list</a> with the unique <a href=""Instance_Variables/id.htm""><tt>id</tt></a> values of all instances of the object that are considered to be in collision with the calling instance, and you have the option to order the list based on the distance from the position being checked to the origin of the instances found to be in collision. Note that the function also accepts the special keyword <a href=""../../../GML_Overview/Instance_Keywords.htm""><b><tt>all</tt></b></a>, in which case all instances found to be in collision will be listed. The function returns the number of instances found, or 0 if none are found."
instance_position_list.htm+html.body.h4:93-3,Syntax:
instance_position_list.htm+html.body.p:94-3,"instance_position_list(x, y, obj, list, ordered);"
instance_position_list.htm+html.body.table.tbody.tr.th:98-9,Argument
instance_position_list.htm+html.body.table.tbody.tr.th:99-9,Description
instance_position_list.htm+html.body.table.tbody.tr.td:102-9,x
instance_position_list.htm+html.body.table.tbody.tr.td:103-9,The x position to check for instances.
instance_position_list.htm+html.body.table.tbody.tr.td:106-9,y
instance_position_list.htm+html.body.table.tbody.tr.td:107-9,The y position to check for instances.
instance_position_list.htm+html.body.table.tbody.tr.td:110-9,obj
instance_position_list.htm+html.body.table.tbody.tr.td:111-9,The object to check for instances of.
instance_position_list.htm+html.body.table.tbody.tr.td:114-9,list
instance_position_list.htm+html.body.table.tbody.tr.td:115-9,The DS list to use to store the IDs of colliding instances.
instance_position_list.htm+html.body.table.tbody.tr.td:118-9,ordered
instance_position_list.htm+html.body.table.tbody.tr.td:119-9,Whether the list should be ordered by distance (<tt>true</tt>) or not (<tt>false</tt>).
instance_position_list.htm+html.body.h4:124-3,Returns:
instance_position_list.htm+html.body.p:125-3,Int (The number of instances found to be in collision)
instance_position_list.htm+html.body.h4:127-3,Example:
instance_position_list.htm+html.body.p:128-3,"{ANY_CODE} var _list = ds_list_create();<br /> var _num = instance_position_list(mouse_x, mouse_y, all, _list, false);<br /> if _num &gt; 0<br /> {nbsp_x4}{ <br /> {nbsp_x4}for (var i = 0; i &lt; _num; ++i;)<br /> {nbsp_x8}{ <br /> {nbsp_x8}instance_destroy(_list[| i]);<br /> {nbsp_x8}} <br /> {nbsp_x4}} <br /> ds_list_destroy(_list);"
instance_position_list.htm+html.body.p:134-3,"The above code will check for a collision with all instances found at the mouse position. These will be added to a DS list, which is then looped through to destroy each of the instances in collision."
instance_position_list.htm+html.body.div.div.div.div:141-9,"Back: <a href=""Instances.htm"">Instances</a>"
instance_position_list.htm+html.body.div.div.div.div:142-9,"Next: <a href=""instance_id_get.htm"">instance_id_get</a>"
instance_position_list.htm+html.body.p:154-1,{SEARCH_RESULT} Page outlining the function instance_position_list
