weak_ref_any_alive.htm+html.head.title:55-3,weak_ref_any_alive
weak_ref_any_alive.htm+html.head.title:59-3,weak_ref_any_alive
weak_ref_any_alive.htm+html.body.div.div.div[title]:73-7,weak_ref_any_alive
weak_ref_any_alive.htm+html.body.div.div.div:73-7,weak_ref_any_alive
weak_ref_any_alive.htm+html.body.h1:86-3,weak_ref_create
weak_ref_any_alive.htm+html.body.p:87-3,"With this function you can check the <a class=""tooltip"" title=""TITLE_KEY::weak_reference"">weak reference</a> to various structs to see if it they are still ""alive"" or not. You supply an array of weak references to check (each weak reference should have been created using the function <a href=""weak_ref_create.htm""><span class=""inline"">weak_ref_create()</span></a>), and the function will return <span class=""inline"">true</span> if <em><strong>any </strong></em>of the structs are still being referenced somewhere or <span class=""inline"">false</span> if they are not and have been garbage collected. Note that if you supply an array where any of the values are not a weak references, the function will return <span class=""inline"">undefined</span>."
weak_ref_any_alive.htm+html.body.p:90-3,"Note that the function also takes two optional arguments, where the first permits you to supply an initial index into the array to check from, as well as an argument to set the number of positions (length) from that index to check. Only the array indices within those parameters will be checked."
weak_ref_any_alive.htm+html.body.h4:93-3,Syntax:
weak_ref_any_alive.htm+html.body.p:94-3,"weak_ref_any_alive(weak_ref, [index], [length]);"
weak_ref_any_alive.htm+html.body.table.tbody.tr.th:98-9,Argument
weak_ref_any_alive.htm+html.body.table.tbody.tr.th:99-9,Description
weak_ref_any_alive.htm+html.body.table.tbody.tr.td:102-9,weak_ref
weak_ref_any_alive.htm+html.body.table.tbody.tr.td:103-9,The weak reference to the struct you want to check.
weak_ref_any_alive.htm+html.body.table.tbody.tr.td:106-9,[index]
weak_ref_any_alive.htm+html.body.table.tbody.tr.td:107-9,OPTIONAL! The index into the array to start checking from
weak_ref_any_alive.htm+html.body.table.tbody.tr.td:110-9,[length]
weak_ref_any_alive.htm+html.body.table.tbody.tr.td:111-9,OPTIONAL! The number of positions from the given index to check
weak_ref_any_alive.htm+html.body.h4:116-3,Returns:
weak_ref_any_alive.htm+html.body.p:117-3,Boolean (or undefined)
weak_ref_any_alive.htm+html.body.h4:119-3,Example:
weak_ref_any_alive.htm+html.body.p:120-3,{ANY_CODE} if weak_ref_any_alive(inventory_ref_array)<br /> {nbsp_x1} {nbsp_x1} {<br /> {nbsp_x1} {nbsp_x1} instance_destroy(obj_Inventory_Control);<br /> {nbsp_x1} {nbsp_x1} }
weak_ref_any_alive.htm+html.body.p:121-3,The above code checks an array of weak references and if any are still alive then an instance is destroyed.
weak_ref_any_alive.htm+html.body.div.div.div.div:128-9,"Back: <a href=""Garbage_Collection.htm"">Garbage Collection</a>"
weak_ref_any_alive.htm+html.body.div.div.div.div:129-9,"Next: <a href=""gc_collect.htm"">gc_collect</a>"
weak_ref_any_alive.htm+html.body.p:141-1,{SEARCH_RESULT} Reference page for weak_ref_any_alive
