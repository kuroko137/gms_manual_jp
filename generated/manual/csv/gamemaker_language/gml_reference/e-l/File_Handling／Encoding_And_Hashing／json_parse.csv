json_parse.htm+html.head.title:55-3,json_parse
json_parse.htm+html.head.title:59-3,json_parse
json_parse.htm+html.body.div.div.div[title]:73-7,json_parse
json_parse.htm+html.body.div.div.div:73-7,json_parse
json_parse.htm+html.body.h1:86-3,json_parse
json_parse.htm+html.body.p:87-3,"This function can be used to parse a JSON string (either previously created using json_stringify or from any valid source), and convert it into a collection of arrays or structs, where an array is the equivalent of a JSON array and a struct is the equivalent of a JSON object. You supply the string to parse, and the function will return the top level array or struct which can then be checked in your code. If you are not sure of the contents of the JSON, you can use the different <a href=""../../Variable_Functions/Variable_Functions.htm"">Variable Functions</a> (like <a href=""../../Variable_Functions/typeof.htm""><span class=""inline"">typeof()</span></a> or <a href=""../../Variable_Functions/variable_struct_get_names.htm""><span class=""inline"">variable_struct_get_names()</span></a>) to check the returned contents. Note that parsing an invalid value (ie: not a string) into the function will throw an exception error."
json_parse.htm+html.body.h4:91-3,Syntax:
json_parse.htm+html.body.p:92-3,<code>json_parse</code>(json)
json_parse.htm+html.body.table.tbody.tr.th:96-9,Argument
json_parse.htm+html.body.table.tbody.tr.th:97-9,Description
json_parse.htm+html.body.table.tbody.tr.td:100-9,json
json_parse.htm+html.body.table.tbody.tr.td:101-9,The JSON to parse (a string)
json_parse.htm+html.body.h4:106-3,Returns:
json_parse.htm+html.body.p:107-3,Nested structs and arrays
json_parse.htm+html.body.h4:109-3,Extended Example:
json_parse.htm+html.body.p:110-3,"In this example we will parse the following JSON string which we'll hold in the variable ""json"":"
json_parse.htm+html.body.p:111-3,"{ANY_CODE} json = ""{\""myObj\"": { \""apples\"":10, \""oranges\"":12, \""potatoes\"":100000, \""avocados\"":0 }, \""myArray\"":[0, 1, 2, 2, 4, 0, 1, 5, 1]}"""
json_parse.htm+html.body.p:112-3,This string would be parsed something like this:
json_parse.htm+html.body.p:113-3,"{ANY_CODE} data = json_parse(json);<br /> if variable_struct_exists(data, ""myObj"")<br /> { <br /> if is_struct(data.myObj)<br /> {nbsp_x2} {nbsp_x1}{<br /> {nbsp_x2} {nbsp_x1}var _names = variable_struct_get_names(data.myObj);<br /> {nbsp_x2} {nbsp_x1}var _str = """";<br /> {nbsp_x2} {nbsp_x1}for (var i = 0; i &lt; array_length(_names); i++;)<br /> {nbsp_x2} {nbsp_x3} {nbsp_x1}{<br /> {nbsp_x2} {nbsp_x3} {nbsp_x1}_str = _names[i] + "": "" +{nbsp_x1}string(variable_struct_get(data.myObj, _names[i]));<br /> {nbsp_x2} {nbsp_x3} {nbsp_x1}show_debug_message(_str);<br /> {nbsp_x2} {nbsp_x3} {nbsp_x1}}<br /> {nbsp_x2} {nbsp_x1}}<br /> if variable_struct_exists(data, ""myArray"")<br /> {nbsp_x2} {nbsp_x1}{<br /> {nbsp_x2} {nbsp_x1}if is_array(data.myArray)<br /> {nbsp_x2} {nbsp_x3} {nbsp_x1}{<br /> {nbsp_x2} {nbsp_x3} {nbsp_x1}show_debug_message(data.myArray);<br /> {nbsp_x2} {nbsp_x3} {nbsp_x1}}<br /> {nbsp_x2} {nbsp_x1}}<br /> }"
json_parse.htm+html.body.p:117-3,"The above code will parse the given JSON string, generating the following console output:"
json_parse.htm+html.body.p:118-3,"{ANY_CODE} oranges: 12<br /> potatoes: 100000<br /> avocados: 0<br /> apples: 10<br /> [ 0,1,2,2,4,0,1,5,1 ]"
json_parse.htm+html.body.div.div.div.div:125-9,"Back: <a href=""Encoding_And_Hashing.htm"">File Encoding</a>"
json_parse.htm+html.body.div.div.div.div:126-9,"Next: <a href=""base64_encode.htm"">base64_encode</a>"
json_parse.htm+html.body.p:138-1,{SEARCH_RESULT} Reference page for json_parse
