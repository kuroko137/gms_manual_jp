rectangle_in_rectangle.htm+html.head.title:55-3,rectangle_in_rectangle
rectangle_in_rectangle.htm+html.head.title:59-3,rectangle_in_rectangle
rectangle_in_rectangle.htm+html.body.div.div.div[title]:73-7,rectangle_in_rectangle
rectangle_in_rectangle.htm+html.body.div.div.div:73-7,rectangle_in_rectangle
rectangle_in_rectangle.htm+html.body.h1:86-3,rectangle_in_rectangle
rectangle_in_rectangle.htm+html.body.p:87-3,"This function will check two rectangular areas that you define to see if the source rectangle is either not in collision, completely within the destination rectangles bounds, or if they are simply touching. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:"
rectangle_in_rectangle.htm+html.body.p.img[alt]:89-6,{IMG_TXT} Rectangle rectangle collision example
rectangle_in_rectangle.htm+html.body.h4:90-3,Syntax:
rectangle_in_rectangle.htm+html.body.p:91-3,"rectangle_in_rectangle(sx1, sy1, sx2, sy2, dx1, dy1, dx2, dy2);"
rectangle_in_rectangle.htm+html.body.table.tbody.tr.th:95-9,Argument
rectangle_in_rectangle.htm+html.body.table.tbody.tr.th:96-9,Description
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:99-9,sx1
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:100-9,The x coordinate of the left side of the source rectangle.
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:103-9,sy1
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:104-9,The y coordinate of the top side of the source rectangle.
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:107-9,sx2
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:108-9,The x coordinate of the right side of the source rectangle.
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:111-9,sy2
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:112-9,The y coordinate of the bottom side of the source rectangle.
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:115-9,dx1
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:116-9,The x coordinate of the left side of the destination rectangle to check against.
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:119-9,dy1
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:120-9,The y coordinate of the top side of the destination rectangle to check against.
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:123-9,dx2
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:124-9,The x coordinate of the right side of the destination rectangle to check against.
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:127-9,dy2
rectangle_in_rectangle.htm+html.body.table.tbody.tr.td:128-9,The y coordinate of the bottom side of the destination rectangle to check against.
rectangle_in_rectangle.htm+html.body.h4:133-3,Returns:
rectangle_in_rectangle.htm+html.body.p:134-3,Real
rectangle_in_rectangle.htm+html.body.h4:136-3,Example:
rectangle_in_rectangle.htm+html.body.p:137-3,"{ANY_CODE} switch(rectangle_in_rectangle(x - 50, y - 50, x + 50, y + 50, mouse_x - 50, mouse_y - 50, mouse_x + 50, mouse_y + 50))<br /> {nbsp_x3}{ <br /> {nbsp_x3}case 0: image_blend = c_yellow; break;<br /> {nbsp_x3}case 1: image_blend = c_red; break;<br /> {nbsp_x3}case 2: image_blend = c_orange; break;<br /> {nbsp_x3}}"
rectangle_in_rectangle.htm+html.body.p:140-3,"The above code checks two rectangular areas for collision, and will set the instance <tt>image_blend</tt> based on the return value."
rectangle_in_rectangle.htm+html.body.div.div.div.div:147-9,"Back: <a href=""Collisions.htm"">Collisions</a>"
rectangle_in_rectangle.htm+html.body.div.div.div.div:148-9,"Next: <a href=""rectangle_in_triangle.htm"">rectangle_in_triangle</a>"
rectangle_in_rectangle.htm+html.body.p:160-1,{SEARCH_RESULT} Page that gives an overview of the funtion rectangle_in_rectangle
