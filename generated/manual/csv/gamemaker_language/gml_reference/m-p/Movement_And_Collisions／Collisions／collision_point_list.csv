collision_point_list.htm+html.head.title:55-3,collision_point_list
collision_point_list.htm+html.head.title:59-3,collision_point_list
collision_point_list.htm+html.body.div.div.div[title]:73-7,collision_point_list
collision_point_list.htm+html.body.div.div.div:73-7,collision_point_list
collision_point_list.htm+html.body.h1:86-3,collision_point_list
collision_point_list.htm+html.body.p:87-3,"This function is the same as the <a href=""collision_point.htm""><tt>collision_point()</tt></a> function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y position of the point to check and you can set the check to be precise (in which case all instances being checked will need to have <i>precise</i> collision masks) and whether the check should include the calling instance or not. You supply a <a href=""../../Data_Structures/DS_Lists/DS_Lists.htm"">DS list</a> too which will be populated with the unique <a href=""../../Asset_Management/Instances/Instance_Variables/id.htm""><tt>id</tt></a> values of all instances of the object that are considered to be in collision with the calling instance, and you have the option to order the list based on the distance from the given point to the origin of the instances found to be in collision. The function returns the number of instances found, or 0 if none are found."
collision_point_list.htm+html.body.p:90-3,"Note that instead of an object index you can supply the <a href=""../../../GML_Overview/Instance_Keywords.htm"">instance keyword</a> <span class=""inline"">all</span>, to check for all instances in the current room, which may include the instance running the code (depending on the <span class=""inline"">notme</span> argument)."
collision_point_list.htm+html.body.h4:93-3,Syntax:
collision_point_list.htm+html.body.p:94-3,"collision_point_list(x, y, obj, prec, notme, list, ordered);"
collision_point_list.htm+html.body.table.tbody.tr.th:98-9,Argument
collision_point_list.htm+html.body.table.tbody.tr.th:99-9,Description
collision_point_list.htm+html.body.table.tbody.tr.td:102-9,x
collision_point_list.htm+html.body.table.tbody.tr.td:103-9,The x coordinate of the point to check.
collision_point_list.htm+html.body.table.tbody.tr.td:106-9,y
collision_point_list.htm+html.body.table.tbody.tr.td:107-9,The y coordinate of the point to check.
collision_point_list.htm+html.body.table.tbody.tr.td:110-9,obj
collision_point_list.htm+html.body.table.tbody.tr.td:111-9,The object to check for instance collisions.
collision_point_list.htm+html.body.table.tbody.tr.td:114-9,prec
collision_point_list.htm+html.body.table.tbody.tr.td:115-9,"Whether the check is based on precise collisions (<tt>true</tt>, which is slower) or its bounding box in general (<tt>false</tt>, faster)."
collision_point_list.htm+html.body.table.tbody.tr.td:118-9,notme
collision_point_list.htm+html.body.table.tbody.tr.td:119-9,"Whether the calling instance, if relevant, should be excluded (<tt>true</tt>) or not (<tt>false</tt>)."
collision_point_list.htm+html.body.table.tbody.tr.td:122-9,list
collision_point_list.htm+html.body.table.tbody.tr.td:123-9,The DS list to use to store the IDs of colliding instances.
collision_point_list.htm+html.body.table.tbody.tr.td:126-9,ordered
collision_point_list.htm+html.body.table.tbody.tr.td:127-9,Whether the list should be ordered by distance (<tt>true</tt>) or not (<tt>false</tt>).
collision_point_list.htm+html.body.h4:132-3,Returns:
collision_point_list.htm+html.body.p:133-3,Integer (The number of instances found to be in collision)
collision_point_list.htm+html.body.h4:135-3,Example:
collision_point_list.htm+html.body.p:136-3,"{ANY_CODE} var _list = ds_list_create();<br /> var _num = collision_point_list(x, y, obj_Enemy, false, true, _list, false);<br /> if _num &gt; 0<br /> {nbsp_x4}{ <br /> {nbsp_x4}for (var i = 0; i &lt; _num; ++i;)<br /> {nbsp_x8}{ <br /> {nbsp_x8}instance_destroy(_list[| i]);<br /> {nbsp_x8}} <br /> {nbsp_x4}} <br /> ds_list_destroy(_list);"
collision_point_list.htm+html.body.p:142-3,"The code above will check the position of the calling instance for collisions with instances of ""obj_Enemy"". If there are any collisions, then the pre-created list is looped through and each instance that was in the collision is destroyed."
collision_point_list.htm+html.body.div.div.div.div:149-9,"Back: <a href=""Collisions.htm"">Collisions</a>"
collision_point_list.htm+html.body.div.div.div.div:150-9,"Next: <a href=""collision_rectangle.htm"">collision_rectangle</a>"
collision_point_list.htm+html.body.p:162-1,{SEARCH_RESULT} Page that gives an overview of the funtion collision_point_list
