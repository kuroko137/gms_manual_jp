phy_rotation.htm+html.head.title:55-3,phy_rotation
phy_rotation.htm+html.head.title:59-3,phy_rotation
phy_rotation.htm+html.body.div.div.div[title]:73-7,phy_rotation
phy_rotation.htm+html.body.div.div.div:73-7,phy_rotation
phy_rotation.htm+html.body.h1:86-3,phy_rotation
phy_rotation.htm+html.body.p:87-3,"This variable can be used to get (or to set) the angle of the instances fixture in degrees, similar to setting or getting the <a href=""../../Asset_Management/Sprites/Sprite_Instance_Variables/image_angle.htm""><tt>image_angle</tt></a>. However note that in the physics world rotations are calculated in the <i>opposite</i> way to the normal GameMaker Studio 2 game world, meaning that vector functions like <a href=""../../Maths_And_Numbers/Angles_And_Distance/point_direction.htm""><tt>point_direction()</tt></a>should have their return values modified (simply making positive to negative should resolve this)."
phy_rotation.htm+html.body.h4:91-3,Syntax:
phy_rotation.htm+html.body.p:92-3,phy_rotation;
phy_rotation.htm+html.body.h4:94-3,Returns:
phy_rotation.htm+html.body.p:95-3,"Real (single precision floating point value, or <tt>undefined</tt> if the instance is not physics enabled)"
phy_rotation.htm+html.body.h4:97-3,Example:
phy_rotation.htm+html.body.p:98-3,{ANY_CODE} if (phy_speed_x &gt; 0) || (phy_speed_y &gt; 0)<br /> {nbsp_x4}{ <br /> {nbsp_x4}phy_rotation += sqrt(sqr(phy_speed_x) + sqr(phy_speed_y)) /10;<br /> {nbsp_x4}}
phy_rotation.htm+html.body.p:101-3,"The above code checks the linear speed and if either vector is not 0, it then calculates the actual speed and uses that to set the rotation."
phy_rotation.htm+html.body.div.div.div.div:109-9,"Back: <a href=""Physics_Variables.htm"">Physics Variables</a>"
phy_rotation.htm+html.body.div.div.div.div:110-9,"Next: <a href=""phy_fixed_rotation.htm"">phy_fixed_rotation</a>"
phy_rotation.htm+html.body.p:122-1,{SEARCH_RESULT} Reference page for phy_rotation
