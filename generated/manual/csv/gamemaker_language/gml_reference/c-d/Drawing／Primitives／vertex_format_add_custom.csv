vertex_format_add_custom.htm+html.head.title:55-3,vertex_format_add_custom
vertex_format_add_custom.htm+html.head.title:59-3,vertex_format_add_custom
vertex_format_add_custom.htm+html.body.div.div.div[title]:73-7,vertex_format_add_custom
vertex_format_add_custom.htm+html.body.div.div.div:73-7,vertex_format_add_custom
vertex_format_add_custom.htm+html.body.h1:86-3,vertex_format_add_custom
vertex_format_add_custom.htm+html.body.p:87-3,"This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:"
vertex_format_add_custom.htm+html.body.table.tbody.tr.th:92-9,Constant
vertex_format_add_custom.htm+html.body.table.tbody.tr.th:93-9,Description
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:96-9,vertex_type_float1
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:97-9,A single floating point value
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:100-9,vertex_type_float2
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:101-9,Two floating point values
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:104-9,vertex_type_float3
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:105-9,Three floating point values
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:108-9,vertex_type_float4
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:109-9,Four floating point values
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:112-9,vertex_type_colour
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:113-9,"Four component values (r, g, b, a)"
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:116-9,vertex_type_ubyte4
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:117-9,Four component unsigned byte values (from 0 to 255)
vertex_format_add_custom.htm+html.body.p:121-3,"The use that these constants will be put too also needs to be defined so that the values can be ""bound"" properly within the shader being created. This is necessary due to the fact that DX and OpenGL have different requirements so if you don't bind them properly, they won't come through right in the shader. The available usage constants that you can choose are listed below and those you use will depend on the specifics of the shader being created:"
vertex_format_add_custom.htm+html.body.table.tbody.tr.th:127-9,Constant
vertex_format_add_custom.htm+html.body.table.tbody.tr.th:128-9,Description
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:131-9,vertex_usage_position
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:132-9,"position values (x, y, z)"
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:135-9,vertex_usage_colour
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:136-9,"colour values (r, g, b, a)"
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:139-9,vertex_usage_normal
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:140-9,"vertex normal values (nx, ny, nz)"
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:143-9,vertex_usage_textcoord
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:144-9,"UV coordinates (u, v)"
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:147-9,vertex_usage_blendweight
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:148-9,"the blendweight of the input matrix (for skeletal animation, for example)"
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:151-9,vertex_usage_blendindices
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:152-9,"the indices of the matrices to use (for skeletal animation, for example)"
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:155-9,vertex_usage_depth
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:156-9,vertex depth buffer value
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:159-9,vertex_usage_tangent
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:160-9,tangent values
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:163-9,vertex_usage_binormal
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:164-9,binormal values
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:167-9,vertex_usage_fog
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:168-9,fog values
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:171-9,vertex_usage_sample
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:172-9,sampler index
vertex_format_add_custom.htm+html.body.p:176-3,There are some important things to note when using custom formats like these:
vertex_format_add_custom.htm+html.body.ul.li:178-5,"The <tt>vertex_format_add_custom()</tt> function only supports <tt>vertex_usage_position</tt>, <tt>vertex_usage_colour</tt>, <tt>vertex_usage_normal</tt> and <tt>vertex_usage_textcoord</tt> when using GLSL shaders. These will map to the shader attributes <tt>in_Position</tt>, <tt>in_Colour[0 - ...]</tt>, <tt>in_Normal</tt> respectively (anything that is not one of these three attributes - eg: texture coordinates - can be mapped to any attribute you define)."
vertex_format_add_custom.htm+html.body.ul.li:180-5,"In general you should use <tt>vertex_usage_textcoord</tt> for all extra parameters where possible, as types like <tt>vertex_usage_blendweight</tt> and <tt>vertex_usage_tangent</tt> are close to deprecated in most shader languages, and probably won't convert properly. Instead use <tt>vec</tt>, <tt>vec2</tt>, <tt>vec3</tt> or <tt>vec4</tt> types <tt>vertex_usage_textcoord</tt> and everything should work fine."
vertex_format_add_custom.htm+html.body.ul.li:182-5,"GLSL ES does <i>not</i> support integer attributes, so passing in <tt>ivec4</tt>'s does not work (this type is usually used when passing in <tt>vertex_usage_blendindices</tt>). What you need to do is pass in texture coordinates and then in the shader, convert them to <tt>ivec4</tt> like this:"
vertex_format_add_custom.htm+html.body.p:186-3,"{ANY_CODE} attribute vec3 in_Position;<br /> attribute vec4 in_BlendIndices;<br /> attribute vec4 in_BlendWeights;<br /> <br /> varying vec4 v_vColour;<br /> varying mat4 v_mat;<br /> <br /> void main()<br /> { <br /> {nbsp_x4}gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4( in_Position.xyz, 1.0);<br /> {nbsp_x4}v_vColour = in_BlendWeights;<br /> {nbsp_x4} ivec4 t = ivec4(in_BlendIndices);<br /> {nbsp_x4} v_mat = gm_Matrices[ t.x ];<br /> }"
vertex_format_add_custom.htm+html.body.ul.li:192-5,"Blend weights are usually stored in an array and then accessed using blend indices, but you can see here that instead of defining <tt>in_BlendIndices</tt> as an <tt>ivec4</tt> attribute, it's a <tt>vec4</tt>, then cast to an <tt>ivec4</tt> in the code. This is then used to index the array created using the <tt>gm_Matrix</tt> (you can only access an array using an <tt>INT</tt> value - not a float)."
vertex_format_add_custom.htm+html.body.h4:196-3,Syntax:
vertex_format_add_custom.htm+html.body.p:197-3,"vertex_format_add_custom(type, usage);"
vertex_format_add_custom.htm+html.body.table.tbody.tr.th:201-9,Argument
vertex_format_add_custom.htm+html.body.table.tbody.tr.th:202-9,Description
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:205-9,type
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:206-9,The data type that this custom vertex data will hold (see the <b><i>type constants</i></b> listed below).
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:209-9,usage
vertex_format_add_custom.htm+html.body.table.tbody.tr.td:210-9,The use that the data will get(see the <b><i>usage constants</i></b> listed below).
vertex_format_add_custom.htm+html.body.h4:215-3,Returns:
vertex_format_add_custom.htm+html.body.p:216-3,N/A
vertex_format_add_custom.htm+html.body.h4:218-3,Example:
vertex_format_add_custom.htm+html.body.p:219-3,"{ANY_CODE} vertex_format_begin();<br /> vertex_format_add_textcoord(); <br /> vertex_format_add_custom(vertex_type_float3, vertex_usage_position);<br /> my_format = vertex_format_end();"
vertex_format_add_custom.htm+html.body.p:221-3,"The above code will create a new vertex format with just texture and 3 custom floating point values for position. It is then stores the format id in the variable ""my_format""."
vertex_format_add_custom.htm+html.body.div.div.div.div:228-9,"Back: <a href=""Primitives_And_Vertex_Formats.htm"">Primitives And Vertex Formats</a>"
vertex_format_add_custom.htm+html.body.div.div.div.div:229-9,"Next: <a href=""vertex_format_end.htm"">vertex_format_end</a>"
vertex_format_add_custom.htm+html.body.p:258-1,{SEARCH_RESULT} Reference for vertex_format_add_custom
